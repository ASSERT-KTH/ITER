bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  &&  limit  <  =  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  &&  limit  <  =  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  &&  limit  <  =  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i]    &&    limit    >    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	38	None	replace
2	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  &&  limit  >=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  &&  limit  >=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  &&  limit  >=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i]    &&    limit    >    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	38	None	replace
3	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i],    limit)    {    	non-compiled	[CE]  	24	None	replace
4	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  limit[i],  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  limit[i],  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  limit[i],  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i],    limit)    {    	non-compiled	[CE]  	24	None	replace
5	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i],    limit)    {    	non-compiled	[CE]  	24	None	replace
6	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i],  buffer[i])  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i],  buffer[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i],  buffer[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i],    limit)    {    	non-compiled	[CE]  	24	None	replace
7	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  limit[i],  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  limit[i],  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  limit[i],  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i],    limit)    {    	non-compiled	[CE]  	24	None	replace
8	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i],  null)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i],  null)  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i],  null)  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i],    limit)    {    	non-compiled	[CE]  	24	None	replace
9	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i++])  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i++])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i++])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i],    limit)    {    	non-compiled	[CE]  	24	None	replace
10	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {	  if    (buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i]    ||    buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	36	None	replace
11	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {	  if    (buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i]    ||    buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	36	None	replace
12	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  buffer[pos  +  i]  <  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  buffer[pos  +  i]  <  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  buffer[pos  +  i]  <  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i]    ||    limit    <    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	7	None	replace
13	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  limit!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  limit!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  limit!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i]    ||    limit    >    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	5	None	replace
14	[BUG]  [BUGGY]  ((  pos  &  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  pos  &  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  pos  &  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX.length)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length));    	non-compiled	[CE]  	17	None	replace
15	[BUG]  [BUGGY]  ((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX.length)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length));    	non-compiled	[CE]  	17	None	replace
16	[BUG]  [BUGGY]  ((  charsLoaded  &  NON_EXECUTE_PREFIX.length)||(pos  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  charsLoaded  &  NON_EXECUTE_PREFIX.length)||(pos  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  charsLoaded  &  NON_EXECUTE_PREFIX.length)||(pos  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX.length)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length));    	non-compiled	[CE]  	17	None	replace
17	[BUG]  [BUGGY]  ((  NON_EXECUTE_PREFIX.length  -  1)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  NON_EXECUTE_PREFIX.length  -  1)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  NON_EXECUTE_PREFIX.length  -  1)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX.length)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length));    	non-compiled	[CE]  	17	None	replace
18	[BUG]  [BUGGY]  ((  pos  +  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  pos  +  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  pos  +  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX.length)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length));    	non-compiled	[CE]  	17	None	replace
19	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX,    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	40	None	replace
20	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX,    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	40	None	replace
21	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  >>  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  >>  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  >>  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX,    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	40	None	replace
22	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX,    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	40	None	replace
23	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX,  limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX,  limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX,  limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX,    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	40	None	replace
24	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX,  limit[pos  +  i]  >>  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX,  limit[pos  +  i]  >>  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX,  limit[pos  +  i]  >>  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX,    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	40	None	replace
25	[BUG]  [BUGGY]  ((  pos  +  i)  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length  +  i));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  pos  +  i)  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length  +  i));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  pos  +  i)  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length  +  i));	  ((    NON_EXECUTE_PREFIX.length    +    i)    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length    +    i));    	non-compiled	[CE]  	12	None	replace
26	[BUG]  [BUGGY]  ((  NON_EXECUTE_PREFIX.length  +  i)>  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length  +  i));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  NON_EXECUTE_PREFIX.length  +  i)>  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length  +  i));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  NON_EXECUTE_PREFIX.length  +  i)>  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length  +  i));	  ((    NON_EXECUTE_PREFIX.length    +    i)    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length    +    i));    	non-compiled	[CE]  	12	None	replace
27	[BUG]  [BUGGY]  ((  NON_EXECUTE_PREFIX.length  +  i)  <  limit  ||!fillBuffer(NON_EXECUTE_PREFIX.length  +  i));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  NON_EXECUTE_PREFIX.length  +  i)  <  limit  ||!fillBuffer(NON_EXECUTE_PREFIX.length  +  i));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  NON_EXECUTE_PREFIX.length  +  i)  <  limit  ||!fillBuffer(NON_EXECUTE_PREFIX.length  +  i));	  ((    NON_EXECUTE_PREFIX.length    +    i)    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length    +    i));    	non-compiled	[CE]  	12	None	replace
28	[BUG]  [BUGGY]  ((  NON_EXECUTE_PREFIX.length  +  i)  >=  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length  +  i));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  NON_EXECUTE_PREFIX.length  +  i)  >=  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length  +  i));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  NON_EXECUTE_PREFIX.length  +  i)  >=  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length  +  i));	  ((    NON_EXECUTE_PREFIX.length    +    i)    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length    +    i));    	non-compiled	[CE]  	12	None	replace
29	[BUG]  [BUGGY]  int  limit  =  Math.min(limit,  i);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(limit,  i);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(limit,  i);	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	29	None	replace
30	[BUG]  [BUGGY]  int  limit  =  Math.min(NON_EXECUTE_PREFIX,  i);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(NON_EXECUTE_PREFIX,  i);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(NON_EXECUTE_PREFIX,  i);	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	29	None	replace
31	[BUG]  [BUGGY]  int  limit  =  Math.min(limit,  NON_EXECUTE_PREFIX.length  +  1);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(limit,  NON_EXECUTE_PREFIX.length  +  1);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(limit,  NON_EXECUTE_PREFIX.length  +  1);	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	29	None	replace
32	[BUG]  [BUGGY]  int  limit  =  Math.max(limit,  NON_EXECUTE_PREFIX.length  -  1);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.max(limit,  NON_EXECUTE_PREFIX.length  -  1);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.max(limit,  NON_EXECUTE_PREFIX.length  -  1);	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	29	None	replace
33	[BUG]  [BUGGY]  int  limit  =  Math.max(limit,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.max(limit,  NON_EXECUTE_PREFIX.length);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.max(limit,  NON_EXECUTE_PREFIX.length);	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	29	None	replace
34	[BUG]  [BUGGY]  int  limit  =  Math.min(0,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(0,  NON_EXECUTE_PREFIX.length);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(0,  NON_EXECUTE_PREFIX.length);	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	29	None	replace
35	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  null  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  null  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  null  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    null    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	4	None	replace
36	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  null  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  null  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  null  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    null    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	4	None	replace
37	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  null  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  null  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  null  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    null    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	4	None	replace
38	[BUG]  [BUGGY]  if(buffer[pos  +  1]!=  null  ||  buffer[pos  +  1]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  1]!=  null  ||  buffer[pos  +  1]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  1]!=  null  ||  buffer[pos  +  1]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    null    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	4	None	replace
39	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  null  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  null  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  null  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    null    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	4	None	replace
40	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  null  ||  buffer[pos  +  i]!=  limit  ||  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  null  ||  buffer[pos  +  i]!=  limit  ||  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  null  ||  buffer[pos  +  i]!=  limit  ||  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    null    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	4	None	replace
41	[BUG]  [BUGGY]  int  limit  =  Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length  -  1);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length  -  1);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length  -  1);	  int    limit    =    Math.min(limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	44	None	replace
42	[BUG]  [BUGGY]  int  limit  =  Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length,  i);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length,  i);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length,  i);	  int    limit    =    Math.min(limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	44	None	replace
43	[BUG]  [BUGGY]  int  limit  =  Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length  -  2);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length  -  2);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length  -  2);	  int    limit    =    Math.min(limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	44	None	replace
44	[BUG]  [BUGGY]  int  limit  =  Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length  +  1);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length  +  1);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length  +  1);	  int    limit    =    Math.min(limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	44	None	replace
45	[BUG]  [BUGGY]  int  limit  =  Math.min(limit,  pos  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(limit,  pos  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(limit,  pos  +  1,  NON_EXECUTE_PREFIX.length);	  int    limit    =    Math.min(limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	44	None	replace
46	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length  ||  buffer[i]  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length  ||  buffer[i]  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length  ||  buffer[i]  ==  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX.length    ||    buffer[i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	9	None	replace
47	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX.length  ||  buffer[i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX.length  ||  buffer[i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX.length  ||  buffer[i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX.length    ||    buffer[i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	9	None	replace
48	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length  ||  limit[i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length  ||  limit[i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length  ||  limit[i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX.length    ||    buffer[i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	9	None	replace
49	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX.length  ||  limit[i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX.length  ||  limit[i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX.length  ||  limit[i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX.length    ||    buffer[i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	9	None	replace
50	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX.length  ||  buffer[i]  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX.length  ||  buffer[i]  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX.length  ||  buffer[i]  ==  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX.length    ||    buffer[i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	9	None	replace
51	[BUG]  [BUGGY]  ((  pos  +  1)  <  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  pos  +  1)  <  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  pos  +  1)  <  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");	  ((    NON_EXECUTE_PREFIX.length    +    1)    <    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	14	None	replace
52	[BUG]  [BUGGY]  ((  NON_EXECUTE_PREFIX.length  +  1)  <  <  limit  ||!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  NON_EXECUTE_PREFIX.length  +  1)  <  <  limit  ||!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  NON_EXECUTE_PREFIX.length  +  1)  <  <  limit  ||!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");	  ((    NON_EXECUTE_PREFIX.length    +    1)    <    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	14	None	replace
53	[BUG]  [BUGGY]  ((  NON_EXECUTE_PREFIX.length  +  1)  >=  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  NON_EXECUTE_PREFIX.length  +  1)  >=  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  NON_EXECUTE_PREFIX.length  +  1)  >=  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");	  ((    NON_EXECUTE_PREFIX.length    +    1)    <    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	14	None	replace
54	[BUG]  [BUGGY]  ((  limit  +  1)  <  NON_EXECUTE_PREFIX.length)&&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  limit  +  1)  <  NON_EXECUTE_PREFIX.length)&&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  limit  +  1)  <  NON_EXECUTE_PREFIX.length)&&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");	  ((    NON_EXECUTE_PREFIX.length    +    1)    <    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	14	None	replace
55	[BUG]  [BUGGY]  ((  NON_EXECUTE_PREFIX.length  +  1)  <  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  NON_EXECUTE_PREFIX.length  +  1)  <  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  NON_EXECUTE_PREFIX.length  +  1)  <  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");  }	  ((    NON_EXECUTE_PREFIX.length    +    1)    <    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	14	None	replace
56	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  pos  -(NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  pos  -(NON_EXECUTE_PREFIX[i]);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  pos  -(NON_EXECUTE_PREFIX[i]);	  NON_EXECUTE_PREFIX.length    =    limit    -(NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	28	None	replace
57	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  i  -(NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  i  -(NON_EXECUTE_PREFIX[i]);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  i  -(NON_EXECUTE_PREFIX[i]);	  NON_EXECUTE_PREFIX.length    =    limit    -(NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	28	None	replace
58	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  limit  -(NON_EXECUTE_PREFIX[i]  +  1);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  limit  -(NON_EXECUTE_PREFIX[i]  +  1);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  limit  -(NON_EXECUTE_PREFIX[i]  +  1);	  NON_EXECUTE_PREFIX.length    =    limit    -(NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	28	None	replace
59	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  limit  -(NON_EXECUTE_PREFIX[i])+  1;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  limit  -(NON_EXECUTE_PREFIX[i])+  1;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  limit  -(NON_EXECUTE_PREFIX[i])+  1;	  NON_EXECUTE_PREFIX.length    =    limit    -(NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	28	None	replace
60	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  index  -(NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  index  -(NON_EXECUTE_PREFIX[i]);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  index  -(NON_EXECUTE_PREFIX[i]);	  NON_EXECUTE_PREFIX.length    =    limit    -(NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	28	None	replace
61	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  i?  NON_EXECUTE_PREFIX.length  :  NON_EXECUTE_PREFIX.length;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  i?  NON_EXECUTE_PREFIX.length  :  NON_EXECUTE_PREFIX.length;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  i?  NON_EXECUTE_PREFIX.length  :  NON_EXECUTE_PREFIX.length;	  NON_EXECUTE_PREFIX.length    =    limit?    NON_EXECUTE_PREFIX.length    :    i;    	non-compiled	[CE]  	31	None	replace
62	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  i?  NON_EXECUTE_PREFIX.length  :  NON_EXECUTE_PREFIX;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  i?  NON_EXECUTE_PREFIX.length  :  NON_EXECUTE_PREFIX;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  i?  NON_EXECUTE_PREFIX.length  :  NON_EXECUTE_PREFIX;	  NON_EXECUTE_PREFIX.length    =    limit?    NON_EXECUTE_PREFIX.length    :    i;    	non-compiled	[CE]  	31	None	replace
63	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  i?  NON_EXECUTE_PREFIX.length  :  limit;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  i?  NON_EXECUTE_PREFIX.length  :  limit;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  i?  NON_EXECUTE_PREFIX.length  :  limit;	  NON_EXECUTE_PREFIX.length    =    limit?    NON_EXECUTE_PREFIX.length    :    i;    	non-compiled	[CE]  	31	None	replace
64	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  pos?  NON_EXECUTE_PREFIX.length  :  i;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  pos?  NON_EXECUTE_PREFIX.length  :  i;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  pos?  NON_EXECUTE_PREFIX.length  :  i;	  NON_EXECUTE_PREFIX.length    =    limit?    NON_EXECUTE_PREFIX.length    :    i;    	non-compiled	[CE]  	31	None	replace
65	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[1])  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[1])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[1])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[0]    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[0])    {    	non-compiled	[CE]  	32	None	replace
66	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[1]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[1])  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[1]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[1])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[1]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[1])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[0]    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[0])    {    	non-compiled	[CE]  	32	None	replace
67	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[1]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[1])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[1]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[1])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[1]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[1])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[0]    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[0])    {    	non-compiled	[CE]  	32	None	replace
68	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[1])  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[1])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[1])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[0]    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[0])    {    	non-compiled	[CE]  	32	None	replace
69	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[1])  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[1])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[1])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[0]    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[0])    {    	non-compiled	[CE]  	32	None	replace
70	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[1])  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[1])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[1])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[0]    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[0])    {    	non-compiled	[CE]  	32	None	replace
71	[BUG]  [BUGGY]  if  (buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  buffer[i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if  (buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  buffer[i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if  (buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  buffer[i]!=  NON_EXECUTE_PREFIX[i])  {	  if    (buffer[pos    +    i]    ==    limit    ||    buffer[i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	25	None	replace
72	[BUG]  [BUGGY]  ((  pos  &  NON_EXECUTE_PREFIX)!=  0)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  pos  &  NON_EXECUTE_PREFIX)!=  0)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  pos  &  NON_EXECUTE_PREFIX)!=  0)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX)!=    0)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length));    	non-compiled	[CE]  	15	None	replace
73	[BUG]  [BUGGY]  ((  charsLoaded  &  NON_EXECUTE_PREFIX)!=  0)||(pos  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  charsLoaded  &  NON_EXECUTE_PREFIX)!=  0)||(pos  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  charsLoaded  &  NON_EXECUTE_PREFIX)!=  0)||(pos  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX)!=    0)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length));    	non-compiled	[CE]  	15	None	replace
74	[BUG]  [BUGGY]  ((  i  &  NON_EXECUTE_PREFIX)!=  0)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  i  &  NON_EXECUTE_PREFIX)!=  0)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  i  &  NON_EXECUTE_PREFIX)!=  0)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX)!=    0)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length));    	non-compiled	[CE]  	15	None	replace
75	[BUG]  [BUGGY]  ((  limit  &  NON_EXECUTE_PREFIX)!=  0)||(i  <  charsLoaded  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  limit  &  NON_EXECUTE_PREFIX)!=  0)||(i  <  charsLoaded  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  limit  &  NON_EXECUTE_PREFIX)!=  0)||(i  <  charsLoaded  &&!fillBuffer(NON_EXECUTE_PREFIX.length));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX)!=    0)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length));    	non-compiled	[CE]  	15	None	replace
76	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  buffer[pos  +  i]  <  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  buffer[pos  +  i]  <  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  buffer[pos  +  i]  <  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i]    ||    limit    <    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	20	None	replace
77	[BUG]  [BUGGY]  if  (buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  limit  >  NON_EXECUTE_PREFIX[i].length)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if  (buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  limit  >  NON_EXECUTE_PREFIX[i].length)  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if  (buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  limit  >  NON_EXECUTE_PREFIX[i].length)  {	  if    (buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i]    ||    limit    ==    NON_EXECUTE_PREFIX[i].length)    {    	non-compiled	[CE]  	37	None	replace
78	[BUG]  [BUGGY]  if  (buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  limit  ==  NON_EXECUTE_PREFIX[i].length)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if  (buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  limit  ==  NON_EXECUTE_PREFIX[i].length)  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if  (buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  limit  ==  NON_EXECUTE_PREFIX[i].length)  {	  if    (buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i]    ||    limit    ==    NON_EXECUTE_PREFIX[i].length)    {    	non-compiled	[CE]  	37	None	replace
79	[BUG]  [BUGGY]  if  (buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  limit  >=  NON_EXECUTE_PREFIX[i].length)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if  (buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  limit  >=  NON_EXECUTE_PREFIX[i].length)  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if  (buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  limit  >=  NON_EXECUTE_PREFIX[i].length)  {	  if    (buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i]    ||    limit    ==    NON_EXECUTE_PREFIX[i].length)    {    	non-compiled	[CE]  	37	None	replace
80	[BUG]  [BUGGY]  int  limit  =  Math.min(limit,  i);  pos--;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(limit,  i);  pos--;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(limit,  i);  pos--;	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length);    pos--;    	non-compiled	[CE]  	48	None	replace
81	[BUG]  [BUGGY]  int  limit  =  Math.min(NON_EXECUTE_PREFIX,  i);  pos--;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(NON_EXECUTE_PREFIX,  i);  pos--;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(NON_EXECUTE_PREFIX,  i);  pos--;	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length);    pos--;    	non-compiled	[CE]  	48	None	replace
82	[BUG]  [BUGGY]  int  limit  =  Math.min(limit,  NON_EXECUTE_PREFIX.length  -  1);  pos--;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(limit,  NON_EXECUTE_PREFIX.length  -  1);  pos--;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(limit,  NON_EXECUTE_PREFIX.length  -  1);  pos--;	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length);    pos--;    	non-compiled	[CE]  	48	None	replace
83	[BUG]  [BUGGY]  int  limit  =  Math.min(NON_EXECUTE_PREFIX.length,  i);  pos--;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(NON_EXECUTE_PREFIX.length,  i);  pos--;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(NON_EXECUTE_PREFIX.length,  i);  pos--;	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length);    pos--;    	non-compiled	[CE]  	48	None	replace
84	[BUG]  [BUGGY]  int  limit  =  Math.min(NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length);  pos--;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length);  pos--;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length);  pos--;	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length);    pos--;    	non-compiled	[CE]  	48	None	replace
85	[BUG]  [BUGGY]  int  limit  =  Math.min(0,  NON_EXECUTE_PREFIX.length);  pos--;  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(0,  NON_EXECUTE_PREFIX.length);  pos--;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(0,  NON_EXECUTE_PREFIX.length);  pos--;	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length);    pos--;    	non-compiled	[CE]  	48	None	replace
86	[BUG]  [BUGGY]  if(limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {	  if(limit[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	8	None	replace
87	[BUG]  [BUGGY]  if(pos  <  =  NON_EXECUTE_PREFIX.length  ||  limit[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(pos  <  =  NON_EXECUTE_PREFIX.length  ||  limit[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(pos  <  =  NON_EXECUTE_PREFIX.length  ||  limit[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {	  if(limit[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	8	None	replace
88	[BUG]  [BUGGY]  if(pos  <  limit  ||  limit[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(pos  <  limit  ||  limit[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(pos  <  limit  ||  limit[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {	  if(limit[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	8	None	replace
89	[BUG]  [BUGGY]  if(value[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(value[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(value[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {	  if(limit[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	8	None	replace
90	[BUG]  [BUGGY]  if(pos[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(pos[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(pos[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {	  if(limit[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	8	None	replace
91	[BUG]  [BUGGY]  if(limit[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  limit[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(limit[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  limit[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(limit[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  limit[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {	  if(limit[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	8	None	replace
92	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i]    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	3	None	replace
93	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  buffer[i]  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  buffer[i]  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  buffer[i]  ==  NON_EXECUTE_PREFIX[i])  {	  if    (buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i]    ||    buffer[i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	10	None	replace
94	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0]  ||  buffer[i]!=  NON_EXECUTE_PREFIX[0])  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0]  ||  buffer[i]!=  NON_EXECUTE_PREFIX[0])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0]  ||  buffer[i]!=  NON_EXECUTE_PREFIX[0])  {	  if    (buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i]    ||    buffer[i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	10	None	replace
95	[BUG]  [BUGGY]  ((  pos  &  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i])));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  pos  &  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i])));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  pos  &  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i])));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX.length)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i])));    	non-compiled	[CE]  	16	None	replace
96	[BUG]  [BUGGY]  ((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i])));  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i])));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i])));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX.length)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i])));    	non-compiled	[CE]  	16	None	replace
97	[BUG]  [BUGGY]  ((  charsLoaded  &  NON_EXECUTE_PREFIX.length)||(pos  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i])));  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  charsLoaded  &  NON_EXECUTE_PREFIX.length)||(pos  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i])));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  charsLoaded  &  NON_EXECUTE_PREFIX.length)||(pos  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i])));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX.length)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i])));    	non-compiled	[CE]  	16	None	replace
98	[BUG]  [BUGGY]  ((  pos  +  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i])));  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  pos  +  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i])));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  pos  +  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i])));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX.length)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i])));    	non-compiled	[CE]  	16	None	replace
99	[BUG]  [BUGGY]  ((  limit  +  NON_EXECUTE_PREFIX.length)||(i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i])));  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  limit  +  NON_EXECUTE_PREFIX.length)||(i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i])));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  limit  +  NON_EXECUTE_PREFIX.length)||(i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i])));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX.length)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i])));    	non-compiled	[CE]  	16	None	replace
100	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX.length    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	1	None	replace
101	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length  ||  limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length  ||  limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX.length  ||  limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX.length    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	1	None	replace
102	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX.length  ||  limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX.length  ||  limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX.length  ||  limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX.length    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	1	None	replace
103	[BUG]  [BUGGY]  if(limit[pos  +  i]!=  NON_EXECUTE_PREFIX.length  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(limit[pos  +  i]!=  NON_EXECUTE_PREFIX.length  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(limit[pos  +  i]!=  NON_EXECUTE_PREFIX.length  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX.length    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	1	None	replace
104	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX.length  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX.length  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX.length  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX.length    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	1	None	replace
105	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    limit    ||    buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	6	None	replace
106	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	39	None	replace
107	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	39	None	replace
108	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX  ||  limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX  ||  limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX  ||  limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	39	None	replace
109	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	39	None	replace
110	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  pos  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  pos  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  pos  &&!fillBuffer(NON_EXECUTE_PREFIX.length);	  NON_EXECUTE_PREFIX.length    =    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	27	None	replace
111	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  i  +  1;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  i  +  1;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  i  +  1;	  NON_EXECUTE_PREFIX.length    =    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	27	None	replace
112	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  i  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  i  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  i  &&!fillBuffer(NON_EXECUTE_PREFIX.length);	  NON_EXECUTE_PREFIX.length    =    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	27	None	replace
113	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  i  ||!fillBuffer(NON_EXECUTE_PREFIX.length);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  i  ||!fillBuffer(NON_EXECUTE_PREFIX.length);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  i  ||!fillBuffer(NON_EXECUTE_PREFIX.length);	  NON_EXECUTE_PREFIX.length    =    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	27	None	replace
114	[BUG]  [BUGGY]  int  limit  =(int)Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length  -  1);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =(int)Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length  -  1);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =(int)Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length  -  1);	  int    limit    =(int)Math.min(limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	46	None	replace
115	[BUG]  [BUGGY]  int  limit  =(int)Math.min(NON_EXECUTE_PREFIX.length  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =(int)Math.min(NON_EXECUTE_PREFIX.length  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =(int)Math.min(NON_EXECUTE_PREFIX.length  +  1,  NON_EXECUTE_PREFIX.length);	  int    limit    =(int)Math.min(limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	46	None	replace
116	[BUG]  [BUGGY]  int  limit  =(int)Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length,  i);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =(int)Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length,  i);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =(int)Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length,  i);	  int    limit    =(int)Math.min(limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	46	None	replace
117	[BUG]  [BUGGY]  int  limit  =(int)Math.min(NON_EXECUTE_PREFIX,  pos  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =(int)Math.min(NON_EXECUTE_PREFIX,  pos  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =(int)Math.min(NON_EXECUTE_PREFIX,  pos  +  1,  NON_EXECUTE_PREFIX.length);	  int    limit    =(int)Math.min(limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	46	None	replace
118	[BUG]  [BUGGY]  int  limit  =(int)Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length,  pos);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =(int)Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length,  pos);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =(int)Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length,  pos);	  int    limit    =(int)Math.min(limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	46	None	replace
119	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  pos  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  pos  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  pos  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);	  NON_EXECUTE_PREFIX.length    =    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	26	None	replace
120	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  0  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  0  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  0  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);	  NON_EXECUTE_PREFIX.length    =    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	26	None	replace
121	[BUG]  [BUGGY]  if(buffer[pos  +  i]  >=  NON_EXECUTE_PREFIX[i]  ||  limit  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  >=  NON_EXECUTE_PREFIX[i]  ||  limit  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  >=  NON_EXECUTE_PREFIX[i]  ||  limit  ==  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i]    &&    limit    ==    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	42	None	replace
122	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i],  buffer[i])  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i],  buffer[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i],  buffer[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i],    limit)    {    	non-compiled	[CE]  	23	None	replace
123	[BUG]  [BUGGY]  int  limit  =(int)Math.min(NON_EXECUTE_PREFIX,  i);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =(int)Math.min(NON_EXECUTE_PREFIX,  i);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =(int)Math.min(NON_EXECUTE_PREFIX,  i);	  int    limit    =(int)Math.min(limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	45	None	replace
124	[BUG]  [BUGGY]  int  limit  =(int)Math.min(limit,  NON_EXECUTE_PREFIX.length  -  1);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =(int)Math.min(limit,  NON_EXECUTE_PREFIX.length  -  1);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =(int)Math.min(limit,  NON_EXECUTE_PREFIX.length  -  1);	  int    limit    =(int)Math.min(limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	45	None	replace
125	[BUG]  [BUGGY]  int  limit  =(int)Math.min(limit,  i);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =(int)Math.min(limit,  i);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =(int)Math.min(limit,  i);	  int    limit    =(int)Math.min(limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	45	None	replace
126	[BUG]  [BUGGY]  char  limit  =(char)Math.min(limit,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  char  limit  =(char)Math.min(limit,  NON_EXECUTE_PREFIX.length);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	char  limit  =(char)Math.min(limit,  NON_EXECUTE_PREFIX.length);	  int    limit    =(int)Math.min(limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	45	None	replace
127	[BUG]  [BUGGY]  int  limit  =(int)Math.min(non_EXECUTE_PREFIX,  i);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =(int)Math.min(non_EXECUTE_PREFIX,  i);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =(int)Math.min(non_EXECUTE_PREFIX,  i);	  int    limit    =(int)Math.min(limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	45	None	replace
128	[BUG]  [BUGGY]  int  limit  =(int)Math.min(limit,  NON_EXECUTE_PREFIX.length  +  1);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =(int)Math.min(limit,  NON_EXECUTE_PREFIX.length  +  1);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =(int)Math.min(limit,  NON_EXECUTE_PREFIX.length  +  1);	  int    limit    =(int)Math.min(limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	45	None	replace
129	[BUG]  [BUGGY]  int  limit  =(int)Math.min(i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =(int)Math.min(i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =(int)Math.min(i,  NON_EXECUTE_PREFIX.length);	  int    limit    =(int)Math.min(limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	45	None	replace
130	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX  ||  limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX  ||  limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX  ||  limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	41	None	replace
131	[BUG]  [BUGGY]  ((  pos  &  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length)));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  pos  &  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length)));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  pos  &  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length)));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX.length)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length)));    	non-compiled	[CE]  	11	None	replace
132	[BUG]  [BUGGY]  ((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length)));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length)));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length)));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX.length)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length)));    	non-compiled	[CE]  	11	None	replace
133	[BUG]  [BUGGY]  ((  charsLoaded  &  NON_EXECUTE_PREFIX.length)||(pos  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length)));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  charsLoaded  &  NON_EXECUTE_PREFIX.length)||(pos  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length)));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  charsLoaded  &  NON_EXECUTE_PREFIX.length)||(pos  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length)));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX.length)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length)));    	non-compiled	[CE]  	11	None	replace
134	[BUG]  [BUGGY]  ((  pos  +  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length)));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  pos  +  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length)));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  pos  +  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length)));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX.length)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length)));    	non-compiled	[CE]  	11	None	replace
135	[BUG]  [BUGGY]  pos  +=  limit;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  pos  +=  limit;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	pos  +=  limit;	  pos    +=    NON_EXECUTE_PREFIX.length;    	non-compiled	[CE]  	13	None	replace
136	[BUG]  [BUGGY]  pos  +=  NON_EXECUTE_PREFIX.length  +  1;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  pos  +=  NON_EXECUTE_PREFIX.length  +  1;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	pos  +=  NON_EXECUTE_PREFIX.length  +  1;	  pos    +=    NON_EXECUTE_PREFIX.length;    	non-compiled	[CE]  	13	None	replace
137	[BUG]  [BUGGY]  pos  +=  limit,  NON_EXECUTE_PREFIX.length;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  pos  +=  limit,  NON_EXECUTE_PREFIX.length;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	pos  +=  limit,  NON_EXECUTE_PREFIX.length;	  pos    +=    NON_EXECUTE_PREFIX.length;    	non-compiled	[CE]  	13	None	replace
138	[BUG]  [BUGGY]  pos  +=  limit  *  NON_EXECUTE_PREFIX.length;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  pos  +=  limit  *  NON_EXECUTE_PREFIX.length;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	pos  +=  limit  *  NON_EXECUTE_PREFIX.length;	  pos    +=    NON_EXECUTE_PREFIX.length;    	non-compiled	[CE]  	13	None	replace
139	[BUG]  [BUGGY]  pos  +=  NON_EXECUTE_PREFIX.length  +  limit;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  pos  +=  NON_EXECUTE_PREFIX.length  +  limit;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	pos  +=  NON_EXECUTE_PREFIX.length  +  limit;	  pos    +=    NON_EXECUTE_PREFIX.length;    	non-compiled	[CE]  	13	None	replace
140	[BUG]  [BUGGY]  pos  +=  limit  ||  NON_EXECUTE_PREFIX.length;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  pos  +=  limit  ||  NON_EXECUTE_PREFIX.length;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	pos  +=  limit  ||  NON_EXECUTE_PREFIX.length;	  pos    +=    NON_EXECUTE_PREFIX.length;    	non-compiled	[CE]  	13	None	replace
141	[BUG]  [BUGGY]  int  limit  =  Math.min(NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length  -  1);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length  -  1);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(NON_EXECUTE_PREFIX.length,  NON_EXECUTE_PREFIX.length  -  1);	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length    -    1);    	non-compiled	[CE]  	47	None	replace
142	[BUG]  [BUGGY]  int  limit  =  Math.min(NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length  -  1);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length  -  1);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length  -  1);	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length    -    1);    	non-compiled	[CE]  	47	None	replace
143	[BUG]  [BUGGY]  int  limit  =  Math.min(limit,  NON_EXECUTE_PREFIX.length  -  2);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(limit,  NON_EXECUTE_PREFIX.length  -  2);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(limit,  NON_EXECUTE_PREFIX.length  -  2);	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length    -    1);    	non-compiled	[CE]  	47	None	replace
144	[BUG]  [BUGGY]  int  limit  =  Math.min(NON_EXECUTE_PREFIX,  i  -  1);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(NON_EXECUTE_PREFIX,  i  -  1);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(NON_EXECUTE_PREFIX,  i  -  1);	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length    -    1);    	non-compiled	[CE]  	47	None	replace
145	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  i?  NON_EXECUTE_PREFIX.length  :  0;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  i?  NON_EXECUTE_PREFIX.length  :  0;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  i?  NON_EXECUTE_PREFIX.length  :  0;	  NON_EXECUTE_PREFIX.length    =    limit?    NON_EXECUTE_PREFIX.length    :    0;    	non-compiled	[CE]  	30	None	replace
146	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  pos?  NON_EXECUTE_PREFIX.length  :  0;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  pos?  NON_EXECUTE_PREFIX.length  :  0;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  pos?  NON_EXECUTE_PREFIX.length  :  0;	  NON_EXECUTE_PREFIX.length    =    limit?    NON_EXECUTE_PREFIX.length    :    0;    	non-compiled	[CE]  	30	None	replace
147	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  limit?  NON_EXECUTE_PREFIX.length  :  1;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  limit?  NON_EXECUTE_PREFIX.length  :  1;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  limit?  NON_EXECUTE_PREFIX.length  :  1;	  NON_EXECUTE_PREFIX.length    =    limit?    NON_EXECUTE_PREFIX.length    :    0;    	non-compiled	[CE]  	30	None	replace
148	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i]    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	2	None	replace
149	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  limit?  NON_EXECUTE_PREFIX.length  :  NON_EXECUTE_PREFIX.length;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  limit?  NON_EXECUTE_PREFIX.length  :  NON_EXECUTE_PREFIX.length;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  limit?  NON_EXECUTE_PREFIX.length  :  NON_EXECUTE_PREFIX.length;	  NON_EXECUTE_PREFIX.length    =    limit?    NON_EXECUTE_PREFIX.length    :    i;    	non-compiled	[CE]  	31	None	replace
150	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  limit?  NON_EXECUTE_PREFIX.length  :  pos;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  limit?  NON_EXECUTE_PREFIX.length  :  pos;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  limit?  NON_EXECUTE_PREFIX.length  :  pos;	  NON_EXECUTE_PREFIX.length    =    limit?    NON_EXECUTE_PREFIX.length    :    i;    	non-compiled	[CE]  	31	None	replace
151	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  limit?  NON_EXECUTE_PREFIX.length  :  NON_EXECUTE_PREFIX[i];  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  limit?  NON_EXECUTE_PREFIX.length  :  NON_EXECUTE_PREFIX[i];  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  limit?  NON_EXECUTE_PREFIX.length  :  NON_EXECUTE_PREFIX[i];	  NON_EXECUTE_PREFIX.length    =    limit?    NON_EXECUTE_PREFIX.length    :    i;    	non-compiled	[CE]  	31	None	replace
152	[BUG]  [BUGGY]  ((  limit  &  NON_EXECUTE_PREFIX)!=  0)||(i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  limit  &  NON_EXECUTE_PREFIX)!=  0)||(i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  limit  &  NON_EXECUTE_PREFIX)!=  0)||(i  <  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX)!=    0)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length));    	non-compiled	[CE]  	15	None	replace
153	[BUG]  [BUGGY]  int  limit  =  Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length  -  i);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length  -  i);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length  -  i);	  int    limit    =    Math.min(limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	44	None	replace
154	[BUG]  [BUGGY]  int  limit  =  Math.min(limit  +  1,  NON_EXECUTE_PREFIX,  i);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(limit  +  1,  NON_EXECUTE_PREFIX,  i);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(limit  +  1,  NON_EXECUTE_PREFIX,  i);	  int    limit    =    Math.min(limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	44	None	replace
155	[BUG]  [BUGGY]  int  limit  =  Math.min(limit  -  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(limit  -  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(limit  -  1,  NON_EXECUTE_PREFIX.length);	  int    limit    =    Math.min(limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	44	None	replace
156	[BUG]  [BUGGY]  ((  NON_EXECUTE_PREFIX.length  +  i)  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  NON_EXECUTE_PREFIX.length  +  i)  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  NON_EXECUTE_PREFIX.length  +  i)  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");	  ((    NON_EXECUTE_PREFIX.length    +    1)    <    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	14	None	replace
157	[BUG]  [BUGGY]  ((  limit  +  1)  <  NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  limit  +  1)  <  NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  limit  +  1)  <  NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");	  ((    NON_EXECUTE_PREFIX.length    +    1)    <    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	14	None	replace
158	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  &&  limit  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  &&  limit  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  &&  limit  ==  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i]    &&    limit    ==    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	42	None	replace
159	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0]  &&  limit  ==  NON_EXECUTE_PREFIX[0])  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0]  &&  limit  ==  NON_EXECUTE_PREFIX[0])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0]  &&  limit  ==  NON_EXECUTE_PREFIX[0])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i]    &&    limit    ==    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	42	None	replace
160	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX,  limit  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX,  limit  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX,  limit  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX.length    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	33	None	replace
161	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX,  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX,  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX,  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX,    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	40	None	replace
162	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX,    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	40	None	replace
163	[BUG]  [BUGGY]  int  limit  =  Math.min(limit,  NON_EXECUTE_PREFIX.length  -  1  +  i);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(limit,  NON_EXECUTE_PREFIX.length  -  1  +  i);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(limit,  NON_EXECUTE_PREFIX.length  -  1  +  i);	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length    -    1);    	non-compiled	[CE]  	47	None	replace
164	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  &&  limit  <  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  &&  limit  <  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  &&  limit  <  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i]    ||    limit    <    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	20	None	replace
165	[BUG]  [BUGGY]  pos  +=  NON_EXECUTE_PREFIX.length  +  2;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  pos  +=  NON_EXECUTE_PREFIX.length  +  2;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	pos  +=  NON_EXECUTE_PREFIX.length  +  2;	  pos    +=    NON_EXECUTE_PREFIX.length;    	non-compiled	[CE]  	13	None	replace
166	[BUG]  [BUGGY]  pos  +=  limit.length;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  pos  +=  limit.length;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	pos  +=  limit.length;	  pos    +=    NON_EXECUTE_PREFIX.length;    	non-compiled	[CE]  	13	None	replace
167	[BUG]  [BUGGY]  pos  +=  NON_EXECUTE_PREFIX.length  +  i;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  pos  +=  NON_EXECUTE_PREFIX.length  +  i;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	pos  +=  NON_EXECUTE_PREFIX.length  +  i;	  pos    +=    NON_EXECUTE_PREFIX.length;    	non-compiled	[CE]  	13	None	replace
168	[BUG]  [BUGGY]  if  (buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  buffer[i]  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if  (buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  buffer[i]  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if  (buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  buffer[i]  ==  NON_EXECUTE_PREFIX[i])  {	  if    (buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i]    ||    buffer[i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	10	None	replace
169	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i].length)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i].length)  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i].length)  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i],    limit)    {    	non-compiled	[CE]  	23	None	replace
170	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i++])  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i++])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i++])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i],    limit)    {    	non-compiled	[CE]  	23	None	replace
171	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i].length)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i].length)  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i],  NON_EXECUTE_PREFIX[i].length)  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i],    limit)    {    	non-compiled	[CE]  	23	None	replace
172	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  null  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  null  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  null  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {	  if(buffer[pos    +    i]!=    null    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	4	None	replace
173	[BUG]  [BUGGY]  if(buffer[i  +  i]!=  null  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[i  +  i]!=  null  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[i  +  i]!=  null  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    null    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	4	None	replace
174	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[2]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[2])  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[2]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[2])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[2]  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[2])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[0]    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[0])    {    	non-compiled	[CE]  	32	None	replace
175	[BUG]  [BUGGY]  if(buffer[i  +  i]!=  NON_EXECUTE_PREFIX.length  ||  buffer[i]  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[i  +  i]!=  NON_EXECUTE_PREFIX.length  ||  buffer[i]  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[i  +  i]!=  NON_EXECUTE_PREFIX.length  ||  buffer[i]  ==  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX.length    ||    buffer[i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	9	None	replace
176	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[1]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[1])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[1]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[1])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[1]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[1])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[0]    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[0])    {    	non-compiled	[CE]  	34	None	replace
177	[BUG]  [BUGGY]  ((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  =  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length)));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  =  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length)));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  =  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length)));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX.length)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length)));    	non-compiled	[CE]  	11	None	replace
178	[BUG]  [BUGGY]  ((  i  &  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length)));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  i  &  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length)));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  i  &  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length)));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX.length)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length)));    	non-compiled	[CE]  	11	None	replace
179	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  i  >  0?  NON_EXECUTE_PREFIX.length  :  0;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  i  >  0?  NON_EXECUTE_PREFIX.length  :  0;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  i  >  0?  NON_EXECUTE_PREFIX.length  :  0;	  NON_EXECUTE_PREFIX.length    =    limit?    NON_EXECUTE_PREFIX.length    :    0;    	non-compiled	[CE]  	30	None	replace
180	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  &&  limit  >=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  &&  limit  >=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  &&  limit  >=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i]    ||    limit    >=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	21	None	replace
181	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  i  >  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  i  >  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  i  >  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length);	  NON_EXECUTE_PREFIX.length    =    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	27	None	replace
182	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  i;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  i;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  i;	  NON_EXECUTE_PREFIX.length    =    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	27	None	replace
183	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length);	  NON_EXECUTE_PREFIX.length    =    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	27	None	replace
184	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length  +  i);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length  +  i);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length  +  i);	  NON_EXECUTE_PREFIX.length    =    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	27	None	replace
185	[BUG]  [BUGGY]  int  limit  =  Math.min(limit,  NON_EXECUTE_PREFIX.length  +  i);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(limit,  NON_EXECUTE_PREFIX.length  +  i);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(limit,  NON_EXECUTE_PREFIX.length  +  i);	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	29	None	replace
186	[BUG]  [BUGGY]  int  limit  =  Math.min(i,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(i,  NON_EXECUTE_PREFIX.length);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(i,  NON_EXECUTE_PREFIX.length);	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	29	None	replace
187	[BUG]  [BUGGY]  int  limit  =  Math.min(limit,  NON_EXECUTE_PREFIX.length  -  i);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(limit,  NON_EXECUTE_PREFIX.length  -  i);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(limit,  NON_EXECUTE_PREFIX.length  -  i);	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	29	None	replace
188	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  limit  -(NON_EXECUTE_PREFIX[i]  -  1);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  limit  -(NON_EXECUTE_PREFIX[i]  -  1);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  limit  -(NON_EXECUTE_PREFIX[i]  -  1);	  NON_EXECUTE_PREFIX.length    =    limit    -(NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	28	None	replace
189	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {	  if(buffer[pos    +    i]    ==    limit    ||    buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	6	None	replace
190	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  PEEKED_BUFFER  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  PEEKED_BUFFER  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  PEEKED_BUFFER  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    limit    ||    buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	6	None	replace
191	[BUG]  [BUGGY]  int  limit  =  Math.min(i,  NON_EXECUTE_PREFIX.length);  pos--;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(i,  NON_EXECUTE_PREFIX.length);  pos--;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(i,  NON_EXECUTE_PREFIX.length);  pos--;	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length);    pos--;    	non-compiled	[CE]  	48	None	replace
192	[BUG]  [BUGGY]  char  limit  =  Math.min(limit,  NON_EXECUTE_PREFIX.length);  pos--;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  char  limit  =  Math.min(limit,  NON_EXECUTE_PREFIX.length);  pos--;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	char  limit  =  Math.min(limit,  NON_EXECUTE_PREFIX.length);  pos--;	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length);    pos--;    	non-compiled	[CE]  	48	None	replace
193	[BUG]  [BUGGY]  int  limit  =  Math.min(LAST_VALUE_PREFIX,  NON_EXECUTE_PREFIX.length);  pos--;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(LAST_VALUE_PREFIX,  NON_EXECUTE_PREFIX.length);  pos--;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(LAST_VALUE_PREFIX,  NON_EXECUTE_PREFIX.length);  pos--;	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length);    pos--;    	non-compiled	[CE]  	48	None	replace
194	[BUG]  [BUGGY]  ((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  charsLoaded  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  charsLoaded  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  charsLoaded  &&!fillBuffer(NON_EXECUTE_PREFIX.length));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX.length)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length));    	non-compiled	[CE]  	17	None	replace
195	[BUG]  [BUGGY]  ((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  =  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  =  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  =  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX.length));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX.length)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length));    	non-compiled	[CE]  	17	None	replace
196	[BUG]  [BUGGY]  ((  i  &  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  i  &  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  i  &  NON_EXECUTE_PREFIX.length)||(i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX.length)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length));    	non-compiled	[CE]  	17	None	replace
197	[BUG]  [BUGGY]  ((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  =  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i])));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  =  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i])));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  =  NON_EXECUTE_PREFIX.length  &&!fillBuffer(NON_EXECUTE_PREFIX[i])));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX.length)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i])));    	non-compiled	[CE]  	16	None	replace
198	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i]    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	3	None	replace
199	[BUG]  [BUGGY]  int  limit  =(int)Math.min(NON_EXECUTE_PREFIX,  i  +  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =(int)Math.min(NON_EXECUTE_PREFIX,  i  +  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =(int)Math.min(NON_EXECUTE_PREFIX,  i  +  1,  NON_EXECUTE_PREFIX.length);	  int    limit    =(int)Math.min(limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	46	None	replace
200	[BUG]  [BUGGY]  int  limit  =(int)Math.min(limit  +  1,  NON_EXECUTE_PREFIX,  i);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =(int)Math.min(limit  +  1,  NON_EXECUTE_PREFIX,  i);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =(int)Math.min(limit  +  1,  NON_EXECUTE_PREFIX,  i);	  int    limit    =(int)Math.min(limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	46	None	replace
201	[BUG]  [BUGGY]  int  limit  =(int)Math.min(NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =(int)Math.min(NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =(int)Math.min(NON_EXECUTE_PREFIX,  NON_EXECUTE_PREFIX.length);	  int    limit    =(int)Math.min(limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	46	None	replace
202	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	41	None	replace
203	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	41	None	replace
204	[BUG]  [BUGGY]  if(buffer[pos  +  i]  >=  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  >=  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  >=  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	41	None	replace
205	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  &&  limit  <  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  &&  limit  <  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  &&  limit  <  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i]    ||    limit    <    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	7	None	replace
206	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[0])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	39	None	replace
207	[BUG]  [BUGGY]  int  limit  =(int)Math.min(limit,  NON_EXECUTE_PREFIX.length  -  i);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =(int)Math.min(limit,  NON_EXECUTE_PREFIX.length  -  i);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =(int)Math.min(limit,  NON_EXECUTE_PREFIX.length  -  i);	  int    limit    =(int)Math.min(limit,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	45	None	replace
208	[BUG]  [BUGGY]  if(limit[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(limit[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(limit[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||!fillBuffer(NON_EXECUTE_PREFIX[i]))  {	  if(limit[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	8	None	replace
209	[BUG]  [BUGGY]  if(limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||!fillBuffer(NON_EXECUTE_PREFIX[i]))  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(limit[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||!fillBuffer(NON_EXECUTE_PREFIX[i]))  {	  if(limit[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	8	None	replace
210	[BUG]  [BUGGY]  if(limit[pos  +  i]  ==  NON_EXECUTE_PREFIX[i].length)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(limit[pos  +  i]  ==  NON_EXECUTE_PREFIX[i].length)  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(limit[pos  +  i]  ==  NON_EXECUTE_PREFIX[i].length)  {	  if(limit[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	8	None	replace
211	[BUG]  [BUGGY]  if(limit[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(limit[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(limit[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {	  if(limit[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	8	None	replace
212	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  i  >  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  i  >  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  i  >  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);	  NON_EXECUTE_PREFIX.length    =    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	26	None	replace
213	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  i  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i]);	  NON_EXECUTE_PREFIX.length    =    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	26	None	replace
214	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NULL  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NULL  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NULL  ||  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    null    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	4	None	replace
215	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  0  -(NON_EXECUTE_PREFIX[i]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  0  -(NON_EXECUTE_PREFIX[i]);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  0  -(NON_EXECUTE_PREFIX[i]);	  NON_EXECUTE_PREFIX.length    =    limit    -(NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	28	None	replace
216	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i].length)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i].length)  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i].length)  {	  if    (buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i]    ||    limit    ==    NON_EXECUTE_PREFIX[i].length)    {    	non-compiled	[CE]  	37	None	replace
217	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0]  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0]  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0]  &&  buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[0]    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[0])    {    	non-compiled	[CE]  	34	None	replace
218	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX  ||  buffer[i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX  ||  buffer[i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX  ||  buffer[i]!=  NON_EXECUTE_PREFIX[i])  {	  if    (buffer[pos    +    i]    ==    limit    ||    buffer[i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	25	None	replace
219	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX,  buffer[i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX,  buffer[i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX,  buffer[i]!=  NON_EXECUTE_PREFIX[i])  {	  if    (buffer[pos    +    i]    ==    limit    ||    buffer[i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	25	None	replace
220	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  limit  <  =  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  limit  <  =  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  limit  <  =  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i]    ||    limit    <    =    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	22	None	replace
221	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  >>  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  >>  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX,  buffer[pos  +  i]  >>  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX,    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	40	None	replace
222	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  limit?  NON_EXECUTE_PREFIX.length  :  i  +  1;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  limit?  NON_EXECUTE_PREFIX.length  :  i  +  1;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  limit?  NON_EXECUTE_PREFIX.length  :  i  +  1;	  NON_EXECUTE_PREFIX.length    =    limit?    NON_EXECUTE_PREFIX.length    :    i;    	non-compiled	[CE]  	31	None	replace
223	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  &&  limit  >  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  &&  limit  >  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  &&  limit  >  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i]    &&    limit    >    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	38	None	replace
224	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i],  null)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i],  null)  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i],  null)  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i],    limit)    {    	non-compiled	[CE]  	23	None	replace
225	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0],  limit)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0],  limit)  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[0],  limit)  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i],    limit)    {    	non-compiled	[CE]  	23	None	replace
226	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i],  limit  +=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i],  limit  +=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i],  limit  +=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i],    limit)    {    	non-compiled	[CE]  	23	None	replace
227	[BUG]  [BUGGY]  ((  pos  +  i)  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  pos  +  i)  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  pos  +  i)  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));	  ((    NON_EXECUTE_PREFIX.length    +    i)    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length    +    i));    	non-compiled	[CE]  	12	None	replace
228	[BUG]  [BUGGY]  ((  limit  +  i)  <  NON_EXECUTE_PREFIX.length)&&!fillBuffer(NON_EXECUTE_PREFIX.length));  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  limit  +  i)  <  NON_EXECUTE_PREFIX.length)&&!fillBuffer(NON_EXECUTE_PREFIX.length));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  limit  +  i)  <  NON_EXECUTE_PREFIX.length)&&!fillBuffer(NON_EXECUTE_PREFIX.length));	  ((    NON_EXECUTE_PREFIX.length    +    i)    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length    +    i));    	non-compiled	[CE]  	12	None	replace
229	[BUG]  [BUGGY]  ((  limit  +  i)  <  NON_EXECUTE_PREFIX.length));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  limit  +  i)  <  NON_EXECUTE_PREFIX.length));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  limit  +  i)  <  NON_EXECUTE_PREFIX.length));	  ((    NON_EXECUTE_PREFIX.length    +    i)    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length    +    i));    	non-compiled	[CE]  	12	None	replace
230	[BUG]  [BUGGY]  ((  i  +  1)  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  i  +  1)  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  i  +  1)  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length));	  ((    NON_EXECUTE_PREFIX.length    +    i)    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length    +    i));    	non-compiled	[CE]  	12	None	replace
231	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i  +  1]);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i  +  1]);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  limit  &&!fillBuffer(NON_EXECUTE_PREFIX[i  +  1]);	  NON_EXECUTE_PREFIX.length    =    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i]);    	non-compiled	[CE]  	26	None	replace
232	[BUG]  [BUGGY]  pos  +=  limit  ||  fillBuffer(NON_EXECUTE_PREFIX.length);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  pos  +=  limit  ||  fillBuffer(NON_EXECUTE_PREFIX.length);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	pos  +=  limit  ||  fillBuffer(NON_EXECUTE_PREFIX.length);	  pos    +=    NON_EXECUTE_PREFIX.length;    	non-compiled	[CE]  	13	None	replace
233	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i]  >=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	41	None	replace
234	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i],  limit  >  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i],  limit  >  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX  ||  buffer[pos  +  i],  limit  >  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX    ||    buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	41	None	replace
235	[BUG]  [BUGGY]  ((  pos  +  1)  <  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  pos  +  1)  <  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  pos  +  1)  <  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");  }	  ((    NON_EXECUTE_PREFIX.length    +    1)    <    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	14	None	replace
236	[BUG]  [BUGGY]  ((  pos  +  1)  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  pos  +  1)  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  pos  +  1)  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");	  ((    NON_EXECUTE_PREFIX.length    +    1)    <    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	14	None	replace
237	[BUG]  [BUGGY]  ((  NON_EXECUTE_PREFIX.length  +  1)  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  NON_EXECUTE_PREFIX.length  +  1)  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  NON_EXECUTE_PREFIX.length  +  1)  <  limit  &&!fillBuffer(NON_EXECUTE_PREFIX.length))  {  throw  new  IllegalArgumentException( " ");	  ((    NON_EXECUTE_PREFIX.length    +    1)    <    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	14	None	replace
238	[BUG]  [BUGGY]  int  limit  =  Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length  -  4);  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length  -  4);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(limit  +  1,  NON_EXECUTE_PREFIX.length  -  4);	  int    limit    =    Math.min(limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	44	None	replace
239	[BUG]  [BUGGY]  NON_EXECUTE_PREFIX.length  =  limit?  NON_EXECUTE_PREFIX[i]  :  0;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  NON_EXECUTE_PREFIX.length  =  limit?  NON_EXECUTE_PREFIX[i]  :  0;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	NON_EXECUTE_PREFIX.length  =  limit?  NON_EXECUTE_PREFIX[i]  :  0;	  NON_EXECUTE_PREFIX.length    =    limit?    NON_EXECUTE_PREFIX.length    :    0;    	non-compiled	[CE]  	30	None	replace
240	[BUG]  [BUGGY]  int  limit  =(int)Math.min(limit  -  1,  NON_EXECUTE_PREFIX.length);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =(int)Math.min(limit  -  1,  NON_EXECUTE_PREFIX.length);  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =(int)Math.min(limit  -  1,  NON_EXECUTE_PREFIX.length);	  int    limit    =(int)Math.min(limit    +    1,    NON_EXECUTE_PREFIX.length);    	non-compiled	[CE]  	46	None	replace
241	[BUG]  [BUGGY]  if(buffer[pos  +  i]  ==  null  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]  ==  null  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]  ==  null  ||  buffer[pos  +  i]  ==  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    limit    ||    buffer[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	43	None	replace
242	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  &&  buffer[i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  &&  buffer[i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX[i]  &&  buffer[i]!=  NON_EXECUTE_PREFIX[i])  {	  if    (buffer[pos    +    i]!=    NON_EXECUTE_PREFIX[i]    ||    buffer[i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	10	None	replace
243	[BUG]  [BUGGY]  ((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  charsLoaded  &&!fillBuffer(NON_EXECUTE_PREFIX.length)));  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  charsLoaded  &&!fillBuffer(NON_EXECUTE_PREFIX.length)));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  charsLoaded  &&!fillBuffer(NON_EXECUTE_PREFIX.length)));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX.length)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX.length)));    	non-compiled	[CE]  	11	None	replace
244	[BUG]  [BUGGY]  ((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  charsLoaded  &&!fillBuffer(NON_EXECUTE_PREFIX[i])));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  ((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  charsLoaded  &&!fillBuffer(NON_EXECUTE_PREFIX[i])));  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	((  limit  &  NON_EXECUTE_PREFIX.length)||(i  <  charsLoaded  &&!fillBuffer(NON_EXECUTE_PREFIX[i])));	  ((    charsLoaded    &    NON_EXECUTE_PREFIX.length)||(i    <    limit    &&!fillBuffer(NON_EXECUTE_PREFIX[i])));    	non-compiled	[CE]  	16	None	replace
245	[BUG]  [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX,  limit  ||  buffer[i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX,  limit  ||  buffer[i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(buffer[pos  +  i]!=  NON_EXECUTE_PREFIX,  limit  ||  buffer[i]!=  NON_EXECUTE_PREFIX[i])  {	  if(buffer[pos    +    i]!=    NON_EXECUTE_PREFIX.length    ||    buffer[i]!=    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	9	None	replace
246	[BUG]  [BUGGY]  int  limit  =  Math.min(LENGTH,  NON_EXECUTE_PREFIX.length);  pos--;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  int  limit  =  Math.min(LENGTH,  NON_EXECUTE_PREFIX.length);  pos--;  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	int  limit  =  Math.min(LENGTH,  NON_EXECUTE_PREFIX.length);  pos--;	  int    limit    =    Math.min(limit,    NON_EXECUTE_PREFIX.length);    pos--;    	non-compiled	[CE]  	48	None	replace
247	[BUG]  [BUGGY]  if(limit[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  limit  >  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(limit[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  limit  >  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(limit[pos  +  i]  ==  NON_EXECUTE_PREFIX[i]  ||  limit  >  NON_EXECUTE_PREFIX[i])  {	  if(limit[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	8	None	replace
248	[BUG]  [BUGGY]  if(line[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      private  void  consumeNonExecutePrefix()  throws  IOException  {  nextNonWhitespace(true);  pos--;  if  (pos  +  NON_EXECUTE_PREFIX.length  >  limit  &&  !fillBuffer(NON_EXECUTE_PREFIX.length))  {  return;  }  for  (int  i  =  0;  i  <  NON_EXECUTE_PREFIX.length;  i++)  {      [BUGGY]  if(line[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {  [BUGGY]      return;  //  not  a  security  token!  }  }  pos  +=  NON_EXECUTE_PREFIX.length;  }  [CLASS]  JsonReader  1  [METHOD]  consumeNonExecutePrefix  [RETURN_TYPE]  void  [VARIABLES]  boolean  charsLoaded  fitsInLong  lenient  negative  throwOnEof  Reader  in  int[]  newPathIndices  newStack  pathIndices  stack  String  keyword  keywordUpper  message  peekedString  result  toFind  String[]  newPathNames  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  count  end  i  l  last  length  limit  lineNumber  lineStart  minimum  newTop  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  size  stackSize  start  total  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2041241452319315	1583	1583	3	replace	if(line[pos  +  i]!=  NON_EXECUTE_PREFIX[i])  {	  if(limit[pos    +    i]    ==    NON_EXECUTE_PREFIX[i])    {    	non-compiled	[CE]  	8	None	replace
