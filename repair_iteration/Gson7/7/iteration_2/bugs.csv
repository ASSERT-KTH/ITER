bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	6	None	replace
2	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	6	None	replace
3	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	6	None	replace
4	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	6	None	replace
5	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_LONG;  [CE]  not  a  statement  [FE]                          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  parent  ==  JsonScope.NONEMPTY_LONG;  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_LONG;	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  not  a  statement	6	None	replace
6	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  [FE]                            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	6	None	replace
7	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	2	None	replace
8	[BUG]  [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	2	None	replace
9	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	2	None	replace
10	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	2	None	replace
11	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	2	None	replace
12	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_LONG;  [CE]  not  a  statement  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  parent!=  JsonScope.NONEMPTY_LONG;  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_LONG;	  if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  not  a  statement	5	None	replace
13	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	5	None	replace
14	[BUG]  [BUGGY]  while(stack.length()  >  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(stack.length()  >  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  >  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  if(stack.length()    ==    0)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	18	None	replace
15	[BUG]  [BUGGY]  pendency(stack.length()  -  1)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  pendency(stack.length()  -  1)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pendency(stack.length()  -  1)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(stack.length()    ==    0)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	18	None	replace
16	[BUG]  [BUGGY]  pendInt(stack.length()  -  1)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  pendInt(stack.length()  -  1)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pendInt(stack.length()  -  1)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(stack.length()    ==    0)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	18	None	replace
17	[BUG]  [BUGGY]  while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	10	None	replace
18	[BUG]  [BUGGY]  int  pos  =  stack[stackSize  -  1];  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  int  pos  =  stack[stackSize  -  1];  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack[stackSize  -  1];	  if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	10	None	replace
19	[BUG]  [BUGGY]  while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	10	None	replace
20	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[stackSize  -  1];  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  int[]  pathIndices  =  stack[stackSize  -  1];  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[stackSize  -  1];	  if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	10	None	replace
21	[BUG]  [BUGGY]  while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	10	None	replace
22	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	4	None	replace
23	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	4	None	replace
24	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT;  [CE]  not  a  statement  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT;  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_OBJECT;	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  not  a  statement	4	None	replace
25	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT;  [CE]  not  a  statement  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT;  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT;	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  not  a  statement	4	None	replace
26	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	4	None	replace
27	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  checkLenient();  }  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  'e'  ||  c  ==  'E')  {  checkLenient();  }	  if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  	16	None	replace
28	[BUG]  [BUGGY]  if(c!=  '''  ||  c  ==  '')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c!=  '''  ||  c  ==  '')  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c!=  '''  ||  c  ==  '')  {  checkLenient();  }	  if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	16	None	replace
29	[BUG]  [BUGGY]  if(c  ==  '''  &&  c  ==  '')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  '''  &&  c  ==  '')  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  &&  c  ==  '')  {  checkLenient();  }	  if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	16	None	replace
30	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+')  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  '.'  ||  c  ==  '+')  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  '+')  {  checkLenient();  }	  if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  	16	None	replace
31	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	13	None	replace
32	[BUG]  [BUGGY]  int  stackSize  =  stack[stackSize  -  1];  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  int  stackSize  =  stack[stackSize  -  1];  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stackSize  =  stack[stackSize  -  1];	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	13	None	replace
33	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	13	None	replace
34	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	13	None	replace
35	[BUG]  [BUGGY]  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	13	None	replace
36	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	13	None	replace
37	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	3	None	replace
38	[BUG]  [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	3	None	replace
39	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	3	None	replace
40	[BUG]  [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	3	None	replace
41	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  '')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  empty  character  literal	17	None	replace
42	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	17	None	replace
43	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	9	None	replace
44	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  not  a  statement  [FE]            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  not  a  statement	9	None	replace
45	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  not  a  statement  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  not  a  statement	9	None	replace
46	[BUG]  [BUGGY]  int  c  =  stack[stackSize  -  1];  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  int  c  =  stack[stackSize  -  1];  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =  stack[stackSize  -  1];	      	non-compiled	[CE]  	7	None	replace
47	[BUG]  [BUGGY]  int  c  =  pathIndices[stackSize  -  1];  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  int  c  =  pathIndices[stackSize  -  1];  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =  pathIndices[stackSize  -  1];	      	non-compiled	[CE]  	7	None	replace
48	[BUG]  [BUGGY]  int  pos  =  stack.length();  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  int  pos  =  stack.length();  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.length();	      	non-compiled	[CE]  	7	None	replace
49	[BUG]  [BUGGY]  int  c  =(int)Math.floor(peekStack[stackSize  -  1]);  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  int  c  =(int)Math.floor(peekStack[stackSize  -  1]);  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =(int)Math.floor(peekStack[stackSize  -  1]);	      	non-compiled	[CE]  	7	None	replace
50	[BUG]  [BUGGY]  int  pos  =  stack.size();  [CE]  [FE]                            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  int  pos  =  stack.size();  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.size();	      	non-compiled	[CE]  	7	None	replace
51	[BUG]  [BUGGY]  int  c  =(int)Math.floor(peekedString,  pathNames[stackSize  -  1]);  [CE]  [FE]                              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  int  c  =(int)Math.floor(peekedString,  pathNames[stackSize  -  1]);  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =(int)Math.floor(peekedString,  pathNames[stackSize  -  1]);	      	non-compiled	[CE]  	7	None	replace
52	[BUG]  [BUGGY]  int  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  int  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	12	None	replace
53	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  int  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	12	None	replace
54	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	8	None	replace
55	[BUG]  [BUGGY]  while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	8	None	replace
56	[BUG]  [BUGGY]  if(stack.length()  ==  1)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(stack.length()  ==  1)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack.length()  ==  1)  {  checkLenient();  }	  if(stack.length()    ==    0)    {    checkLenient();    }    	non-compiled	[CE]  	19	None	replace
57	[BUG]  [BUGGY]  int  stackSize  =  stack.length();  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  int  stackSize  =  stack.length();  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stackSize  =  stack.length();	  if(stack.length()    ==    0)    {    checkLenient();    }    	non-compiled	[CE]  	19	None	replace
58	[BUG]  [BUGGY]  while(stack.length()  >  0)  {  checkLenient();  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(stack.length()  >  0)  {  checkLenient();  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  >  0)  {  checkLenient();	  if(stack.length()    ==    0)    {    checkLenient();    }    	non-compiled	[CE]  	19	None	replace
59	[BUG]  [BUGGY]  while(stack.length()  <  =  0)  {  checkLenient();  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(stack.length()  <  =  0)  {  checkLenient();  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  <  =  0)  {  checkLenient();	  if(stack.length()    ==    0)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
60	[BUG]  [BUGGY]  pendency(stack.length()  -  1)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  pendency(stack.length()  -  1)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pendency(stack.length()  -  1)  {  checkLenient();  }	  if(stack.length()    ==    0)    {    checkLenient();    }    	non-compiled	[CE]  	19	None	replace
61	[BUG]  [BUGGY]  luate(stack.length()  -  1))  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  luate(stack.length()  -  1))  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	luate(stack.length()  -  1))  {  checkLenient();  }	  if(stack.length()    ==    0)    {    checkLenient();    }    	non-compiled	[CE]  	19	None	replace
62	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	11	None	replace
63	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	11	None	replace
64	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING;  checkLenient();  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  int[]  pathIndices  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING;  checkLenient();  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING;  checkLenient();	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	11	None	replace
65	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name ");  }  [CE]  empty  character  literal  [FE]          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  '''  ||  c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name ");  }	  if(c    ==    ''')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  empty  character  literal	15	None	replace
66	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  ''')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]        JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  '''  ||  c  ==  ''')  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  ''')  {  checkLenient();  }	  if(c    ==    ''')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	14	None	replace
67	[BUG]  [BUGGY]  if(c!=  ''')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c!=  ''')  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c!=  ''')  {  checkLenient();  }	  if(c    ==    ''')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	14	None	replace
68	[BUG]  [BUGGY]  if(c  ==  '.')  {  checkLenient();  }  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  '.')  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.')  {  checkLenient();  }	  if(c    ==    ''')    {    checkLenient();    }    	non-compiled	[CE]  	14	None	replace
69	[BUG]  [BUGGY]  while(c  ==  ''')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(c  ==  ''')  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  ==  ''')  {  checkLenient();  }	  if(c    ==    ''')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	14	None	replace
70	[BUG]  [BUGGY]  while(c  ==  ''')  {  checkLenient();  [CE]  empty  character  literal  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(c  ==  ''')  {  checkLenient();  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  ==  ''')  {  checkLenient();	  if(c    ==    ''')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	14	None	replace
71	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	2	None	replace
72	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	2	None	replace
73	[BUG]  [BUGGY]  if(stack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(stack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	2	None	replace
74	[BUG]  [BUGGY]  if(isLiteral((  char)c)  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c)  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c)  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	2	None	replace
75	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	8	None	replace
76	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c))  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	8	None	replace
77	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	8	None	replace
78	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c))  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	8	None	replace
79	[BUG]  [BUGGY]  while(stack.length()  ==  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(stack.length()  ==  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  ==  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  if(stack.length()    ==    0)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	18	None	replace
80	[BUG]  [BUGGY]  while(stack.length()  >=  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(stack.length()  >=  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  >=  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  if(stack.length()    ==    0)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	18	None	replace
81	[BUG]  [BUGGY]  while(stack.length()  <  =  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(stack.length()  <  =  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  <  =  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  if(stack.length()    ==    0)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
82	[BUG]  [BUGGY]  while(stack.length()  >=  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(stack.length()  >=  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  >=  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  if(stack.length()    ==    0)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	18	None	replace
83	[BUG]  [BUGGY]  while(stack.length()  ==  0)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(stack.length()  ==  0)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  ==  0)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;	  if(stack.length()    ==    0)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	18	None	replace
84	[BUG]  [BUGGY]  while(stack.length()  ==  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(stack.length()  ==  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  ==  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  if(stack.length()    ==    0)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	18	None	replace
85	[BUG]  [BUGGY]  while(stack.length()  >=  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(stack.length()  >=  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  >=  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  if(stack.length()    ==    0)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	18	None	replace
86	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c)||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c)||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	10	None	replace
87	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	10	None	replace
88	[BUG]  [BUGGY]  if(c  ==  '')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]        JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  '')  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '')  {  checkLenient();  }	  if(c    ==    ''')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	14	None	replace
89	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  'e')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  '''  ||  c  ==  'e')  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  'e')  {  checkLenient();  }	  if(c    ==    ''')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	14	None	replace
90	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  not  a  statement	12	None	replace
91	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  not  a  statement	12	None	replace
92	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  not  a  statement	12	None	replace
93	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  not  a  statement	12	None	replace
94	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(c  ==  '''  ||  c  ==  '')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c))  {  if(c  ==  '''  ||  c  ==  '')  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(c  ==  '''  ||  c  ==  '')  {  checkLenient();  }	  if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  empty  character  literal	17	None	replace
95	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	11	None	replace
96	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	11	None	replace
97	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c))  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	11	None	replace
98	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	11	None	replace
99	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	6	None	replace
100	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(isLiteral((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	6	None	replace
101	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  peekStack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(isLiteral((  char)c))  {  peekStack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  peekStack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	6	None	replace
102	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	6	None	replace
103	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(isLiteral((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	6	None	replace
104	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  [FE]                            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	6	None	replace
105	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	1	None	replace
106	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	1	None	replace
107	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  checkLenient();  }  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  checkLenient();  }	  if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  	16	None	replace
108	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  '.'  ||  c  ==  '')  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  '')  {  checkLenient();  }	  if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	16	None	replace
109	[BUG]  [BUGGY]  if(stack!=  null  ||  stack.length()  ==  0)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(stack!=  null  ||  stack.length()  ==  0)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack!=  null  ||  stack.length()  ==  0)  {  checkLenient();  }	  if(stack.length()    ==    0)    {    checkLenient();    }    	non-compiled	[CE]  	19	None	replace
110	[BUG]  [BUGGY]  if(stack!=  null)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(stack!=  null)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack!=  null)  {  checkLenient();  }	  if(stack.length()    ==    0)    {    checkLenient();    }    	non-compiled	[CE]  	19	None	replace
111	[BUG]  [BUGGY]  if(stack  ==  null)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(stack  ==  null)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack  ==  null)  {  checkLenient();  }	  if(stack.length()    ==    0)    {    checkLenient();    }    	non-compiled	[CE]  	19	None	replace
112	[BUG]  [BUGGY]  peer!=  null  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  peer!=  null  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  null  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    ''')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  not  a  statement	15	None	replace
113	[BUG]  [BUGGY]  if(c  ==  '')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  empty  character  literal  [FE]            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  '')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    ''')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  empty  character  literal	15	None	replace
114	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	3	None	replace
115	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  peekStack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(isLiteral((  char)c))  {  peekStack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  peekStack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	3	None	replace
116	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  not  a  statement	3	None	replace
117	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	3	None	replace
118	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	3	None	replace
119	[BUG]  [BUGGY]  Integer  c  =  stack[stackSize  -  1];  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  Integer  c  =  stack[stackSize  -  1];  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  c  =  stack[stackSize  -  1];	      	non-compiled	[CE]  	7	None	replace
120	[BUG]  [BUGGY]  int  pos  =  stack.indexOf(''');  [CE]  empty  character  literal  [FE]                      JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  int  pos  =  stack.indexOf(''');  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.indexOf(''');	      	non-compiled	[CE]  empty  character  literal	7	None	replace
121	[BUG]  [BUGGY]  int  pos  =  stack.indexOf(''',  stack.length  -  1);  [CE]  empty  character  literal  [FE]                        JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  int  pos  =  stack.indexOf(''',  stack.length  -  1);  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.indexOf(''',  stack.length  -  1);	      	non-compiled	[CE]  empty  character  literal	7	None	replace
122	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	5	None	replace
123	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }	  if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	5	None	replace
124	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	5	None	replace
125	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                      JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  unclosed  string  literal	5	None	replace
126	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_LONG  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                        JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  peer!=  JsonScope.NONEMPTY_LONG  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_LONG  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  not  a  statement	5	None	replace
127	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  not  a  statement  [FE]          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  not  a  statement	9	None	replace
128	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  not  a  statement	9	None	replace
129	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	9	None	replace
130	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  not  a  statement	9	None	replace
131	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	4	None	replace
132	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	4	None	replace
133	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	4	None	replace
134	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  unclosed  string  literal	4	None	replace
135	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(isLiteral((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  not  a  statement	13	None	replace
136	[BUG]  [BUGGY]  while(isLiteral((  char)c)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(isLiteral((  char)c)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	13	None	replace
137	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(isLiteral((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  not  a  statement	13	None	replace
138	[BUG]  [BUGGY]  while(isLiteral((  char)c)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(isLiteral((  char)c)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	13	None	replace
139	[BUG]  [BUGGY]  Integer  pos  =  stack[stackSize  -  1];  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  Integer  pos  =  stack[stackSize  -  1];  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  pos  =  stack[stackSize  -  1];	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	13	None	replace
140	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name. ");  }  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name. ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name. ");  }	  if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	5	None	replace
141	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  unclosed  string  literal	13	None	replace
142	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	13	None	replace
143	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	13	None	replace
144	[BUG]  [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	13	None	replace
145	[BUG]  [BUGGY]  if(c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name. ");  }  [CE]  empty  character  literal  [FE]          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name. ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name. ");  }	  if(c    ==    ''')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  empty  character  literal	15	None	replace
146	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  unclosed  string  literal	9	None	replace
147	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	9	None	replace
148	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   "  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   "  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   "	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	9	None	replace
149	[BUG]  [BUGGY]  if(c  ==  ':')  {  checkLenient();  }  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  ':')  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ':')  {  checkLenient();  }	  if(c    ==    ''')    {    checkLenient();    }    	non-compiled	[CE]  	14	None	replace
150	[BUG]  [BUGGY]  if(c  ==  ',')  {  checkLenient();  }  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  ',')  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ',')  {  checkLenient();  }	  if(c    ==    ''')    {    checkLenient();    }    	non-compiled	[CE]  	14	None	replace
151	[BUG]  [BUGGY]  if(stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	10	None	replace
152	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name. ");  }  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name. ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name. ");  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	3	None	replace
153	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	3	None	replace
154	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  ':')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	17	None	replace
155	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  empty  character  literal  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  empty  character  literal	17	None	replace
156	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	6	None	replace
157	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	6	None	replace
158	[BUG]  [BUGGY]  pendency(stack.length()  -  1,  stack.length())  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  pendency(stack.length()  -  1,  stack.length())  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pendency(stack.length()  -  1,  stack.length())  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(stack.length()    ==    0)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	18	None	replace
159	[BUG]  [BUGGY]  while(stack.hasNext())  {  stack.add(stack.next());  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(stack.hasNext())  {  stack.add(stack.next());  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.hasNext())  {  stack.add(stack.next());	  if(stack.length()    ==    0)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	18	None	replace
160	[BUG]  [BUGGY]  while(stack.length()  <  =  0)  {  checkLenient();  }  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  while(stack.length()  <  =  0)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  <  =  0)  {  checkLenient();  }	  if(stack.length()    ==    0)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
161	[BUG]  [BUGGY]  if(stack.length()  <  =  0)  {  checkLenient();  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(stack.length()  <  =  0)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack.length()  <  =  0)  {  checkLenient();  }	  if(stack.length()    ==    0)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
162	[BUG]  [BUGGY]  if(stack.length()  ==  2)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(stack.length()  ==  2)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack.length()  ==  2)  {  checkLenient();  }	  if(stack.length()    ==    0)    {    checkLenient();    }    	non-compiled	[CE]  	19	None	replace
163	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	1	None	replace
164	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	1	None	replace
165	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	1	None	replace
166	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	11	None	replace
167	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked;  }  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked;  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	11	None	replace
168	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	11	None	replace
169	[BUG]  [BUGGY]  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	11	None	replace
170	[BUG]  [BUGGY]  if(c  ==  '')  {  if(isLenient((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [CE]  empty  character  literal  [FE]                    JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  '')  {  if(isLenient((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '')  {  if(isLenient((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }	      	non-compiled	[CE]  empty  character  literal	7	None	replace
171	[BUG]  [BUGGY]  if(c  ==  '')  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_BUFFERED;  }  [CE]  empty  character  literal  [FE]                      JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  '')  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_BUFFERED;  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '')  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_BUFFERED;  }	      	non-compiled	[CE]  empty  character  literal	7	None	replace
172	[BUG]  [BUGGY]  if(c  ==  '')  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  peeked;  }  [CE]  empty  character  literal  [FE]                        JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  '')  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  peeked;  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '')  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  peeked;  }	      	non-compiled	[CE]  empty  character  literal	7	None	replace
173	[BUG]  [BUGGY]  if(c  ==  '')  {  if(isLiteral((  char)  c))  {  return  peeked;  }  [CE]  empty  character  literal  [FE]                          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  '')  {  if(isLiteral((  char)  c))  {  return  peeked;  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '')  {  if(isLiteral((  char)  c))  {  return  peeked;  }	      	non-compiled	[CE]  empty  character  literal	7	None	replace
174	[BUG]  [BUGGY]  if(c  ==  '')  {  if(isLenient((  char)c))  {  return  peeked;  }  [CE]  empty  character  literal  [FE]                            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  '')  {  if(isLenient((  char)c))  {  return  peeked;  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '')  {  if(isLenient((  char)c))  {  return  peeked;  }	      	non-compiled	[CE]  empty  character  literal	7	None	replace
175	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT;  [CE]  not  a  statement  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT;  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_OBJECT;	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  not  a  statement	4	None	replace
176	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	8	None	replace
177	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	8	None	replace
178	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	8	None	replace
179	[BUG]  [BUGGY]  if(c  ==  '['  ||  c  ==  ']')  {  checkLenient();  }  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  '['  ||  c  ==  ']')  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '['  ||  c  ==  ']')  {  checkLenient();  }	  if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  	16	None	replace
180	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  ':')  {  checkLenient();  }	  if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  	16	None	replace
181	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  return  checkLenient();  }  [CE]  empty  character  literal  [FE]                JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  return  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  '')  {  return  checkLenient();  }	  if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	16	None	replace
182	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	2	None	replace
183	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:    [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }  [BUGGY]    pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	2	None	replace
