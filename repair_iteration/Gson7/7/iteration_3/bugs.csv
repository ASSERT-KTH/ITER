bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	26	None	replace
2	[BUG]  [BUGGY]  while(stack.length!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	26	None	replace
3	[BUG]  [BUGGY]  while(stack.length  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	26	None	replace
4	[BUG]  [BUGGY]  while(stackTop!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stackTop!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stackTop!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	26	None	replace
5	[BUG]  [BUGGY]  while(stack.length  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	26	None	replace
6	[BUG]  [BUGGY]  while(stackSize!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stackSize!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stackSize!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	26	None	replace
7	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  'e')  {  checkLenient();  }	  if(c    ==    '.'    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  	108	None	replace
8	[BUG]  [BUGGY]  if(c  >=  '''  ||  c  ==  '')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  >=  '''  ||  c  ==  '')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  >=  '''  ||  c  ==  '')  {  checkLenient();  }	  if(c!=    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	28	None	replace
9	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '-'  ||  c  ==  '+')  {  checkLenient();  }	  if(c!=    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  	28	None	replace
10	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	97	None	replace
11	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peeked[stackSize  -  1)  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peeked[stackSize  -  1)  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peeked[stackSize  -  1)  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	97	None	replace
12	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	97	None	replace
13	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peeked[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peeked[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peeked[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	97	None	replace
14	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	97	None	replace
15	[BUG]  [BUGGY]  while(stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	17	None	replace
16	[BUG]  [BUGGY]  while(stack[peekStack.length  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[peekStack.length  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[peekStack.length  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	17	None	replace
17	[BUG]  [BUGGY]  while(stack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	17	None	replace
18	[BUG]  [BUGGY]  while(stack[peekSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[peekSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[peekSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	17	None	replace
19	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkEnd();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkEnd();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkEnd();	  while(peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	17	None	replace
20	[BUG]  [BUGGY]  parent  ==  ((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  ((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  ((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	122	None	replace
21	[BUG]  [BUGGY]  parent  ==  ((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  ((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  ((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	122	None	replace
22	[BUG]  [BUGGY]  parent  ==  ((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  ((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  ((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	122	None	replace
23	[BUG]  [BUGGY]  parent  ==  ((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  return  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  ((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  return  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  ((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  return  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	122	None	replace
24	[BUG]  [BUGGY]  parent  ==  ((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  return  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  ((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  return  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  ((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  return  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	122	None	replace
25	[BUG]  [BUGGY]  parent  ==  ((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  return  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [CE]  not  a  statement  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  ((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  return  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  ((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  return  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	122	None	replace
26	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BUFFERED_OBJECT;  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  return  peeked  =  PEEKED_BUFFERED_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	return  peeked  =  PEEKED_BUFFERED_OBJECT;	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_BUFFERED_OBJECT;    }    	non-compiled	[CE]  	183	None	replace
27	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_BUFFERED_OBJECT;    }    	non-compiled	[CE]  	183	None	replace
28	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  peeked  =  PEEKED_BUFFERED_OBJECT;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  peeked  =  PEEKED_BUFFERED_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  peeked  =  PEEKED_BUFFERED_OBJECT;	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_BUFFERED_OBJECT;    }    	non-compiled	[CE]  	183	None	replace
29	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT;  return  peeked  =  PEEKED_BUFFERED_OBJECT;  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT;  return  peeked  =  PEEKED_BUFFERED_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_OBJECT;  return  peeked  =  PEEKED_BUFFERED_OBJECT;	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_BUFFERED_OBJECT;    }    	non-compiled	[CE]  not  a  statement	183	None	replace
30	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_BUFFERED_OBJECT;    }    	non-compiled	[CE]  	183	None	replace
31	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	117	None	replace
32	[BUG]  [BUGGY]  while(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	117	None	replace
33	[BUG]  [BUGGY]  while(isLenient((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	117	None	replace
34	[BUG]  [BUGGY]  while(stack.length  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	2	None	replace
35	[BUG]  [BUGGY]  while(stack.length!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	2	None	replace
36	[BUG]  [BUGGY]  while(stack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	2	None	replace
37	[BUG]  [BUGGY]  while(stack.length  >=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length  >=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length  >=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	2	None	replace
38	[BUG]  [BUGGY]  while(peekStack  >=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  >=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  >=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	2	None	replace
39	[BUG]  [BUGGY]  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  not  a  statement  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	147	None	replace
40	[BUG]  [BUGGY]  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	147	None	replace
41	[BUG]  [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	147	None	replace
42	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	147	None	replace
43	[BUG]  [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	147	None	replace
44	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_LONG  &&  isLiteral((  char)c))  {  checkLenient();  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_LONG  &&  isLiteral((  char)c))  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_LONG  &&  isLiteral((  char)c))  {  checkLenient();	  peer!=    JsonScope.NONEMPTY_LONG    &&    isLiteral((    char)c))    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	126	None	replace
45	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_LONG  &&  isLiteral((  char)c))  {  checkLenient();  }  [CE]  not  a  statement  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_LONG  &&  isLiteral((  char)c))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_LONG  &&  isLiteral((  char)c))  {  checkLenient();  }	  peer!=    JsonScope.NONEMPTY_LONG    &&    isLiteral((    char)c))    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	126	None	replace
46	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_LONG  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  not  a  statement  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_LONG  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_LONG  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }	  peer!=    JsonScope.NONEMPTY_LONG    &&    isLiteral((    char)c))    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	126	None	replace
47	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_LONG  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name. ");  }  [CE]  not  a  statement  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_LONG  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name. ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_LONG  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name. ");  }	  peer!=    JsonScope.NONEMPTY_LONG    &&    isLiteral((    char)c))    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	126	None	replace
48	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_LONG  ||  isLiteral((  char)c))  {  checkLenient();  [CE]  not  a  statement  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_LONG  ||  isLiteral((  char)c))  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_LONG  ||  isLiteral((  char)c))  {  checkLenient();	  peer!=    JsonScope.NONEMPTY_LONG    &&    isLiteral((    char)c))    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	126	None	replace
49	[BUG]  [BUGGY]  pendency(stack.length()  -  1,  stack.length())  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pendency(stack.length()  -  1,  stack.length())  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pendency(stack.length()  -  1,  stack.length())  {  checkLenient();  }	  pendency(stack.length()    -    1,    stack.length())    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	158	None	replace
50	[BUG]  [BUGGY]  pendency(stack.length(),  stack.length())  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pendency(stack.length(),  stack.length())  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pendency(stack.length(),  stack.length())  {  checkLenient();  }	  pendency(stack.length()    -    1,    stack.length())    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	158	None	replace
51	[BUG]  [BUGGY]  pendInt(stack.length())  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pendInt(stack.length())  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pendInt(stack.length())  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  pendInt(stack.length()    -    1)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	16	None	replace
52	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(c    ==    JsonScope.NONEMPTY_LONG    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	157	None	replace
53	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG  ||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG  ||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_LONG  ||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(c    ==    JsonScope.NONEMPTY_LONG    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	157	None	replace
54	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  &&  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  &&  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG  &&  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(c    ==    JsonScope.NONEMPTY_LONG    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	157	None	replace
55	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c!=  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c!=  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(c    ==    JsonScope.NONEMPTY_LONG    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	157	None	replace
56	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(c    ==    JsonScope.NONEMPTY_LONG    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	157	None	replace
57	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG  ||  c!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(c    ==    JsonScope.NONEMPTY_LONG    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	157	None	replace
58	[BUG]  [BUGGY]  while(stack.length()  ==  0)  {  checkLenient();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  ==  0)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  ==  0)  {  checkLenient();	  while(stack.length()    >    0)    {    checkLenient();    	non-compiled	[CE]  	58	None	replace
59	[BUG]  [BUGGY]  while(stack.length()!=  0)  {  checkLenient();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()!=  0)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()!=  0)  {  checkLenient();	  while(stack.length()    >    0)    {    checkLenient();    	non-compiled	[CE]  	58	None	replace
60	[BUG]  [BUGGY]  while(stack.length()  >=  0)  {  checkLenient();  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  >=  0)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  >=  0)  {  checkLenient();	  while(stack.length()    >    0)    {    checkLenient();    	non-compiled	[CE]  	58	None	replace
61	[BUG]  [BUGGY]  while(stack.length()  >  1)  {  checkLenient();  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  >  1)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  >  1)  {  checkLenient();	  while(stack.length()    >    0)    {    checkLenient();    	non-compiled	[CE]  	58	None	replace
62	[BUG]  [BUGGY]  while(stack.length()  <  0)  {  checkLenient();  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  <  0)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  <  0)  {  checkLenient();	  while(stack.length()    >    0)    {    checkLenient();    	non-compiled	[CE]  	58	None	replace
63	[BUG]  [BUGGY]  while(stack.length()  <  1)  {  checkLenient();  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  <  1)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  <  1)  {  checkLenient();	  while(stack.length()    >    0)    {    checkLenient();    	non-compiled	[CE]  	58	None	replace
64	[BUG]  [BUGGY]  if(stack  ==  null  ||  stack.length()  ==  0)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack  ==  null  ||  stack.length()  ==  0)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack  ==  null  ||  stack.length()  ==  0)  {  checkLenient();  }	  if(stack!=    null    ||    stack.length()    ==    0)    {    checkLenient();    }    	non-compiled	[CE]  	109	None	replace
65	[BUG]  [BUGGY]  while(stack!=  null  &&  stack.length()  ==  0)  {  checkLenient();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack!=  null  &&  stack.length()  ==  0)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack!=  null  &&  stack.length()  ==  0)  {  checkLenient();	  if(stack!=    null    ||    stack.length()    ==    0)    {    checkLenient();    }    	non-compiled	[CE]  	109	None	replace
66	[BUG]  [BUGGY]  if(stack  ==  null  ||  stack.length()!=  0)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack  ==  null  ||  stack.length()!=  0)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack  ==  null  ||  stack.length()!=  0)  {  checkLenient();  }	  if(stack!=    null    ||    stack.length()    ==    0)    {    checkLenient();    }    	non-compiled	[CE]  	109	None	replace
67	[BUG]  [BUGGY]  if(peekStack!=  null  ||  stack.length()  ==  0)  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  null  ||  stack.length()  ==  0)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  null  ||  stack.length()  ==  0)  {  checkLenient();  }	  if(stack!=    null    ||    stack.length()    ==    0)    {    checkLenient();    }    	non-compiled	[CE]  	109	None	replace
68	[BUG]  [BUGGY]  while(stack!=  null  &&  stack.length()  ==  0)  {  checkLenient();  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack!=  null  &&  stack.length()  ==  0)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack!=  null  &&  stack.length()  ==  0)  {  checkLenient();  }	  if(stack!=    null    ||    stack.length()    ==    0)    {    checkLenient();    }    	non-compiled	[CE]  	109	None	replace
69	[BUG]  [BUGGY]  if(stack!=  null  ||  stack.length()  ==  1)  {  checkLenient();  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack!=  null  ||  stack.length()  ==  1)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack!=  null  ||  stack.length()  ==  1)  {  checkLenient();  }	  if(stack!=    null    ||    stack.length()    ==    0)    {    checkLenient();    }    	non-compiled	[CE]  	109	None	replace
70	[BUG]  [BUGGY]  while(pos  >=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  not  a  statement  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(pos  >=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(pos  >=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	127	None	replace
71	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	127	None	replace
72	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	127	None	replace
73	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	127	None	replace
74	[BUG]  [BUGGY]  while(pos  >=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(pos  >=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(pos  >=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	127	None	replace
75	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	127	None	replace
76	[BUG]  [BUGGY]  int  stackSize  =  stack[stackSize  -  1]  +  1;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stackSize  =  stack[stackSize  -  1]  +  1;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stackSize  =  stack[stackSize  -  1]  +  1;	  int    stackSize    =    stack[stackSize    -    1];    	non-compiled	[CE]  	32	None	replace
77	[BUG]  [BUGGY]  int  stackSize  =  stack[peekStack.length  -  1];  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stackSize  =  stack[peekStack.length  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stackSize  =  stack[peekStack.length  -  1];	  int    stackSize    =    stack[stackSize    -    1];    	non-compiled	[CE]  	32	None	replace
78	[BUG]  [BUGGY]  int  stackSize  =  stack[stackSize  -  1]  |  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stackSize  =  stack[stackSize  -  1]  |  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stackSize  =  stack[stackSize  -  1]  |  JsonScope.NONEMPTY_OBJECT;	  int    stackSize    =    stack[stackSize    -    1];    	non-compiled	[CE]  	32	None	replace
79	[BUG]  [BUGGY]  int  stackSize  =  stack[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED_NAME;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stackSize  =  stack[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED_NAME;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stackSize  =  stack[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED_NAME;	  int    stackSize    =    stack[stackSize    -    1];    	non-compiled	[CE]  	32	None	replace
80	[BUG]  [BUGGY]  int  stackSize  =  stack[stackSize  -  2];  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stackSize  =  stack[stackSize  -  2];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stackSize  =  stack[stackSize  -  2];	  int    stackSize    =    stack[stackSize    -    1];    	non-compiled	[CE]  	32	None	replace
81	[BUG]  [BUGGY]  int  stackSize  =  stack[stackSize  -  1]  &  0xff;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stackSize  =  stack[stackSize  -  1]  &  0xff;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stackSize  =  stack[stackSize  -  1]  &  0xff;	  int    stackSize    =    stack[stackSize    -    1];    	non-compiled	[CE]  	32	None	replace
82	[BUG]  [BUGGY]  while(stack.length()  >  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  >  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  >  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(stack.length()    >=    1)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	82	None	replace
83	[BUG]  [BUGGY]  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(stack.length()    >=    1)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	82	None	replace
84	[BUG]  [BUGGY]  while(stack.length()  <  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  <  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  <  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(stack.length()    >=    1)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	82	None	replace
85	[BUG]  [BUGGY]  while(stack.length()  ==  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  ==  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  ==  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(stack.length()    >=    1)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	82	None	replace
86	[BUG]  [BUGGY]  while(stack.length()!=  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()!=  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()!=  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(stack.length()    >=    1)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	82	None	replace
87	[BUG]  [BUGGY]  Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(stack.length()    >=    1)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	82	None	replace
88	[BUG]  [BUGGY]  while(stack.hasNext())  {  stack.add(stack.next()  -  1);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.hasNext())  {  stack.add(stack.next()  -  1);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.hasNext())  {  stack.add(stack.next()  -  1);	  while(stack.hasNext())    {    stack.add(stack.next());    	non-compiled	[CE]  	159	None	replace
89	[BUG]  [BUGGY]  while(stack.hasNext()  >  stack.next())  {  stack.add(stack.next());  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.hasNext()  >  stack.next())  {  stack.add(stack.next());  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.hasNext()  >  stack.next())  {  stack.add(stack.next());	  while(stack.hasNext())    {    stack.add(stack.next());    	non-compiled	[CE]  	159	None	replace
90	[BUG]  [BUGGY]  while(stack.hasNext()  <  =  stack.next())  {  stack.add(stack.next());  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.hasNext()  <  =  stack.next())  {  stack.add(stack.next());  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.hasNext()  <  =  stack.next())  {  stack.add(stack.next());	  while(stack.hasNext())    {    stack.add(stack.next());    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
91	[BUG]  [BUGGY]  while(stack.hasNext())  {  stack.add(peekStack.next());  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.hasNext())  {  stack.add(peekStack.next());  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.hasNext())  {  stack.add(peekStack.next());	  while(stack.hasNext())    {    stack.add(stack.next());    	non-compiled	[CE]  	159	None	replace
92	[BUG]  [BUGGY]  while(stack.hasNext())  {  stack.add(stack.next()  +  1);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.hasNext())  {  stack.add(stack.next()  +  1);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.hasNext())  {  stack.add(stack.next()  +  1);	  while(stack.hasNext())    {    stack.add(stack.next());    	non-compiled	[CE]  	159	None	replace
93	[BUG]  [BUGGY]  while(stack.hasNext()  <  =  stack.next());  [CE]  illegal  start  of  expression  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.hasNext()  <  =  stack.next());  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.hasNext()  <  =  stack.next());	  while(stack.hasNext())    {    stack.add(stack.next());    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
94	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  peeked;  }  [CE]  empty  character  literal  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLiteral((    char)stack[stackSize    -    1]))    {    return    peeked;    }    	non-compiled	[CE]  empty  character  literal	172	None	replace
95	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  peeked;  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLiteral((    char)stack[stackSize    -    1]))    {    return    peeked;    }    	non-compiled	[CE]  	172	None	replace
96	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)c))  {  return  peeked;  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)c))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)c))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLiteral((    char)stack[stackSize    -    1]))    {    return    peeked;    }    	non-compiled	[CE]  	172	None	replace
97	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)c))  {  return  peeked;  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)c))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)c))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLiteral((    char)stack[stackSize    -    1]))    {    return    peeked;    }    	non-compiled	[CE]  	172	None	replace
98	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)stack[pos  -  1]))  {  return  peeked;  }  [CE]  empty  character  literal  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)stack[pos  -  1]))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)stack[pos  -  1]))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLiteral((    char)stack[stackSize    -    1]))    {    return    peeked;    }    	non-compiled	[CE]  empty  character  literal	172	None	replace
99	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  if(isLiteral((  char)c))  {  return  peeked;  }  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  if(isLiteral((  char)c))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  if(isLiteral((  char)c))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLiteral((    char)stack[stackSize    -    1]))    {    return    peeked;    }    	non-compiled	[CE]  	172	None	replace
100	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	144	None	replace
101	[BUG]  [BUGGY]  while(stack[peekStack  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[peekStack  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[peekStack  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	144	None	replace
102	[BUG]  [BUGGY]  while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	144	None	replace
103	[BUG]  [BUGGY]  while(stack[pos  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[pos  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[pos  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	144	None	replace
104	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  	132	None	replace
105	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  	132	None	replace
106	[BUG]  [BUGGY]  while(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  	132	None	replace
107	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  	132	None	replace
108	[BUG]  [BUGGY]  while(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  	132	None	replace
109	[BUG]  [BUGGY]  while(stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	19	None	replace
110	[BUG]  [BUGGY]  while(stack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	19	None	replace
111	[BUG]  [BUGGY]  while(stack[peekStack.length  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[peekStack.length  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[peekStack.length  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	19	None	replace
112	[BUG]  [BUGGY]  while(stack[peekSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[peekSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[peekSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	19	None	replace
113	[BUG]  [BUGGY]  bucket[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  bucket[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	bucket[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	19	None	replace
114	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  while(isLiteral((    char)c))    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	135	None	replace
115	[BUG]  [BUGGY]  while(isLenient((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  while(isLiteral((    char)c))    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	135	None	replace
116	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  while(isLiteral((    char)c))    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	135	None	replace
117	[BUG]  [BUGGY]  while(isLong((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLong((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLong((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  while(isLiteral((    char)c))    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	135	None	replace
118	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  stack[pos--  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  stack[pos--  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  stack[pos--  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  while(isLiteral((    char)c))    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	135	None	replace
119	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  stack[size  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  stack[size  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  stack[size  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  while(isLiteral((    char)c))    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	135	None	replace
120	[BUG]  [BUGGY]  while(pos  <  stack.length)  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(pos  <  stack.length)  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(pos  <  stack.length)  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[pos    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	151	None	replace
121	[BUG]  [BUGGY]  pos  =  stack[stackSize  -  1];  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pos  =  stack[stackSize  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pos  =  stack[stackSize  -  1];	  if(stack[pos    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	151	None	replace
122	[BUG]  [BUGGY]  int  c  =(int)Math.floor(stack[stackSize  -  1]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =(int)Math.floor(stack[stackSize  -  1]);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =(int)Math.floor(stack[stackSize  -  1]);	  int    c    =(int)Math.floor(peekStack[stackSize    -    1]);    	non-compiled	[CE]  	49	None	replace
123	[BUG]  [BUGGY]  int  c  =(int)Math.ceil(stack[stackSize  -  1]);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =(int)Math.ceil(stack[stackSize  -  1]);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =(int)Math.ceil(stack[stackSize  -  1]);	  int    c    =(int)Math.floor(peekStack[stackSize    -    1]);    	non-compiled	[CE]  	49	None	replace
124	[BUG]  [BUGGY]  char  c  =(char)Math.floor(peekStack[stackSize  -  1]);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  char  c  =(char)Math.floor(peekStack[stackSize  -  1]);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	char  c  =(char)Math.floor(peekStack[stackSize  -  1]);	  int    c    =(int)Math.floor(peekStack[stackSize    -    1]);    	non-compiled	[CE]  	49	None	replace
125	[BUG]  [BUGGY]  int  c  =(int)Math.ceil(peekStack[stackSize  -  1]);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =(int)Math.ceil(peekStack[stackSize  -  1]);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =(int)Math.ceil(peekStack[stackSize  -  1]);	  int    c    =(int)Math.floor(peekStack[stackSize    -    1]);    	non-compiled	[CE]  	49	None	replace
126	[BUG]  [BUGGY]  char  c  =(char)Math.floor(stack[stackSize  -  1]);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  char  c  =(char)Math.floor(stack[stackSize  -  1]);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	char  c  =(char)Math.floor(stack[stackSize  -  1]);	  int    c    =(int)Math.floor(peekStack[stackSize    -    1]);    	non-compiled	[CE]  	49	None	replace
127	[BUG]  [BUGGY]  int  c  =(int)Math.floor(pathIndices[stackSize  -  1]);  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =(int)Math.floor(pathIndices[stackSize  -  1]);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =(int)Math.floor(pathIndices[stackSize  -  1]);	  int    c    =(int)Math.floor(peekStack[stackSize    -    1]);    	non-compiled	[CE]  	49	None	replace
128	[BUG]  [BUGGY]  int  c  =(int)Math.floor(stack[pos  -  1]);  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =(int)Math.floor(stack[pos  -  1]);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =(int)Math.floor(stack[pos  -  1]);	  int    c    =(int)Math.floor(peekStack[stackSize    -    1]);    	non-compiled	[CE]  	49	None	replace
129	[BUG]  [BUGGY]  while(stack.length()  <  =  1)  {  checkLenient();  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  <  =  1)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  <  =  1)  {  checkLenient();	  while(stack.length()    <    =    0)    {    checkLenient();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
130	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c)||    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	86	None	replace
131	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c)||    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	86	None	replace
132	[BUG]  [BUGGY]  while(isLiteral((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c)||    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	86	None	replace
133	[BUG]  [BUGGY]  while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	177	None	replace
134	[BUG]  [BUGGY]  while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	177	None	replace
135	[BUG]  [BUGGY]  while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	177	None	replace
136	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	177	None	replace
137	[BUG]  [BUGGY]  while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	177	None	replace
138	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	177	None	replace
139	[BUG]  [BUGGY]  return  peeked  =  PEEKED_END_OBJECT;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  return  peeked  =  PEEKED_END_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	return  peeked  =  PEEKED_END_OBJECT;	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	177	None	replace
140	[BUG]  [BUGGY]  while(stack.length  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  while(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    	non-compiled	[CE]  	6	None	replace
141	[BUG]  [BUGGY]  while(stack.length!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  while(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    	non-compiled	[CE]  	6	None	replace
142	[BUG]  [BUGGY]  while(c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  while(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    	non-compiled	[CE]  	6	None	replace
143	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    	non-compiled	[CE]  	6	None	replace
144	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    	non-compiled	[CE]  	6	None	replace
145	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  pos--;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  pos--;	  while(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    	non-compiled	[CE]  	6	None	replace
146	[BUG]  [BUGGY]  while(stack.length  >=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  [FE]                                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length  >=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length  >=  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  while(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    	non-compiled	[CE]  	6	None	replace
147	[BUG]  [BUGGY]  while(stack[peekStack  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[peekStack  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[peekStack  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	38	None	replace
148	[BUG]  [BUGGY]  while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	38	None	replace
149	[BUG]  [BUGGY]  while(stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	38	None	replace
150	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)c))  {  return  peeked;  }  [CE]  empty  character  literal  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)c))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLenient((  char)c))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    peeked;    }    	non-compiled	[CE]  empty  character  literal	174	None	replace
151	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  return  peeked;  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    peeked;    }    	non-compiled	[CE]  	174	None	replace
152	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  peeked;  }  [CE]  empty  character  literal  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    peeked;    }    	non-compiled	[CE]  empty  character  literal	174	None	replace
153	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  char)c))  {  return  peeked;  }  [CE]  not  a  statement  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  char)c))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  char)c))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    peeked;    }    	non-compiled	[CE]  not  a  statement	174	None	replace
154	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  char)c))  {  return  peeked;  [CE]  not  a  statement  [FE]                                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  char)c))  {  return  peeked;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  char)c))  {  return  peeked;	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    peeked;    }    	non-compiled	[CE]  not  a  statement	174	None	replace
155	[BUG]  [BUGGY]  Integer  pos  =  stack[stackSize  -  1]  +  1;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  pos  =  stack[stackSize  -  1]  +  1;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  pos  =  stack[stackSize  -  1]  +  1;	  Integer    pos    =    stack[stackSize    -    1];    	non-compiled	[CE]  	139	None	replace
156	[BUG]  [BUGGY]  Integer  pos  =  stack[peekStack.length  -  1];  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  pos  =  stack[peekStack.length  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  pos  =  stack[peekStack.length  -  1];	  Integer    pos    =    stack[stackSize    -    1];    	non-compiled	[CE]  	139	None	replace
157	[BUG]  [BUGGY]  Integer  pos  =  pathIndices[stackSize  -  1];  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  pos  =  pathIndices[stackSize  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  pos  =  pathIndices[stackSize  -  1];	  Integer    pos    =    stack[stackSize    -    1];    	non-compiled	[CE]  	139	None	replace
158	[BUG]  [BUGGY]  Integer  pos  =  stack[stackSize  -  1]  &  0xff;  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  pos  =  stack[stackSize  -  1]  &  0xff;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  pos  =  stack[stackSize  -  1]  &  0xff;	  Integer    pos    =    stack[stackSize    -    1];    	non-compiled	[CE]  	139	None	replace
159	[BUG]  [BUGGY]  if(stack.length()!=  0)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack.length()!=  0)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack.length()!=  0)  {  checkLenient();  }	  if(stack.length()    <    =    0)    {    checkLenient();    }    	non-compiled	[CE]  	161	None	replace
160	[BUG]  [BUGGY]  if(stack.length()  >=  0)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack.length()  >=  0)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack.length()  >=  0)  {  checkLenient();  }	  if(stack.length()    <    =    0)    {    checkLenient();    }    	non-compiled	[CE]  	161	None	replace
161	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	91	None	replace
162	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	91	None	replace
163	[BUG]  [BUGGY]  while(stack.length  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	91	None	replace
164	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	98	None	replace
165	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  if(isLiteral((  char)  c))  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  if(isLiteral((  char)  c))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  if(isLiteral((  char)  c))  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	98	None	replace
166	[BUG]  [BUGGY]  while(pos  <  stack.length)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_STRING;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(pos  <  stack.length)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_STRING;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(pos  <  stack.length)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_STRING;	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	98	None	replace
167	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	98	None	replace
168	[BUG]  [BUGGY]  parent  ==  '.')  {  checkLenient();  }  [CE]  not  a  statement  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  '.')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  '.')  {  checkLenient();  }	  if(c    ==    '.')    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	68	None	replace
169	[BUG]  [BUGGY]  int  pos  =  stack.size()  -  1;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.size()  -  1;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.size()  -  1;	  int    pos    =    stack.size();    	non-compiled	[CE]  	50	None	replace
170	[BUG]  [BUGGY]  int  pos  =  stack.size()  -  2;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.size()  -  2;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.size()  -  2;	  int    pos    =    stack.size();    	non-compiled	[CE]  	50	None	replace
171	[BUG]  [BUGGY]  int  pos  =  stack.size()  +  1;  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.size()  +  1;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.size()  +  1;	  int    pos    =    stack.size();    	non-compiled	[CE]  	50	None	replace
172	[BUG]  [BUGGY]  int  pos  =  stack.size()  -  4;  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.size()  -  4;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.size()  -  4;	  int    pos    =    stack.size();    	non-compiled	[CE]  	50	None	replace
173	[BUG]  [BUGGY]  int  pos  =  pathIndices.size();  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  pathIndices.size();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  pathIndices.size();	  int    pos    =    stack.size();    	non-compiled	[CE]  	50	None	replace
174	[BUG]  [BUGGY]  int  pos  =  stack.size()  -  3;  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.size()  -  3;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.size()  -  3;	  int    pos    =    stack.size();    	non-compiled	[CE]  	50	None	replace
175	[BUG]  [BUGGY]  if(c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  empty  character  literal	41	None	replace
176	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  	41	None	replace
177	[BUG]  [BUGGY]  if(c  ==  '.')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  	41	None	replace
178	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  throw  syntaxError( "Expected  name: ");  }  [CE]  empty  character  literal  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  '')  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  empty  character  literal	41	None	replace
179	[BUG]  [BUGGY]  if(c!=  '''  ||  c  ==  ''')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c!=  '''  ||  c  ==  ''')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c!=  '''  ||  c  ==  ''')  {  checkLenient();  }	  if(c    ==    '''    ||    c    ==    ''')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	66	None	replace
180	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	142	None	replace
181	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	142	None	replace
182	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	142	None	replace
183	[BUG]  [BUGGY]  while(peekStack  >=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  >=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  >=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	142	None	replace
184	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();	  if(peekStack!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	142	None	replace
185	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_STRING;  [CE]  not  a  statement  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_STRING;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_STRING;	  if(peekStack!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	142	None	replace
186	[BUG]  [BUGGY]  while(isLiteral((  char)c)||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  while(isLiteral((    char)c)&&    peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	103	None	replace
187	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peekStack  <  =  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  illegal  start  of  expression  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peekStack  <  =  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peekStack  <  =  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  while(isLiteral((    char)c)&&    peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
188	[BUG]  [BUGGY]  while(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	21	None	replace
189	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	21	None	replace
190	[BUG]  [BUGGY]  while(stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	21	None	replace
191	[BUG]  [BUGGY]  while(stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	9	None	replace
192	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  'e'  ||  c  ==  'E')  {  return  checkLenient();  }	  if(c    ==    '''    ||    c    ==    '')    {    return    checkLenient();    }    	non-compiled	[CE]  	181	None	replace
193	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  return  checkLenient();  }	  if(c    ==    '''    ||    c    ==    '')    {    return    checkLenient();    }    	non-compiled	[CE]  	181	None	replace
194	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+')  {  return  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  '+')  {  return  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  '+')  {  return  checkLenient();  }	  if(c    ==    '''    ||    c    ==    '')    {    return    checkLenient();    }    	non-compiled	[CE]  	181	None	replace
195	[BUG]  [BUGGY]  if(c  ==  ''')  {  return  checkLenient();  }  [CE]  empty  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  return  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  return  checkLenient();  }	  if(c    ==    '''    ||    c    ==    '')    {    return    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	181	None	replace
196	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  'e')  {  return  checkLenient();  }  [CE]  empty  character  literal  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  'e')  {  return  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  'e')  {  return  checkLenient();  }	  if(c    ==    '''    ||    c    ==    '')    {    return    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	181	None	replace
197	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_LONG  ||  parent  ==  JsonScope.NONEMPTY_OBJECT;  [CE]  not  a  statement  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_LONG  ||  parent  ==  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_LONG  ||  parent  ==  JsonScope.NONEMPTY_OBJECT;	  parent    ==    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  not  a  statement	5	None	replace
198	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(c  ==  '''  ||  c  ==  '')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(c  ==  '''  ||  c  ==  '')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(c  ==  '''  ||  c  ==  '')  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	94	None	replace
199	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  if(c  ==  '''  ||  c  ==  '')  {  checkLenient();  }  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  if(c  ==  '''  ||  c  ==  '')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  if(c  ==  '''  ||  c  ==  '')  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	94	None	replace
200	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	94	None	replace
201	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(c  ==  '''  ||  c!=  '')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(c  ==  '''  ||  c!=  '')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(c  ==  '''  ||  c!=  '')  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	94	None	replace
202	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  int    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	52	None	replace
203	[BUG]  [BUGGY]  int  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  int    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	52	None	replace
204	[BUG]  [BUGGY]  int  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  int    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	52	None	replace
205	[BUG]  [BUGGY]  int  c  =  pathNames[stackSize  -  1];  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =  pathNames[stackSize  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =  pathNames[stackSize  -  1];	  int    c    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  	47	None	replace
206	[BUG]  [BUGGY]  int  c  =  pathIndices[stackSize  -  1]  +  1;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =  pathIndices[stackSize  -  1]  +  1;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =  pathIndices[stackSize  -  1]  +  1;	  int    c    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  	47	None	replace
207	[BUG]  [BUGGY]  int  c  =  pathIndices[stackSize  -  1]  +  stack.length;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =  pathIndices[stackSize  -  1]  +  stack.length;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =  pathIndices[stackSize  -  1]  +  stack.length;	  int    c    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  	47	None	replace
208	[BUG]  [BUGGY]  int  c  =  pathIndices[stackSize  -  2];  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =  pathIndices[stackSize  -  2];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =  pathIndices[stackSize  -  2];	  int    c    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  	47	None	replace
209	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	124	None	replace
210	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	124	None	replace
211	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	124	None	replace
212	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack!=  JSONScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack!=  JSONScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack!=  JSONScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	124	None	replace
213	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack  >=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack  >=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack  >=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	124	None	replace
214	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  'E')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  'E')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  'E')  {  checkLenient();  }	  if(c    ==    'e'    ||    c    ==    'E')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	27	None	replace
215	[BUG]  [BUGGY]  if(c  ==  'E'  ||  c  ==  'E')  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  'E'  ||  c  ==  'E')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  'E'  ||  c  ==  'E')  {  checkLenient();  }	  if(c    ==    'e'    ||    c    ==    'E')    {    checkLenient();    }    	non-compiled	[CE]  	27	None	replace
216	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  'e'  ||  c  ==  'E')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  'e'  ||  c  ==  'E')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  'e'  ||  c  ==  'E')  {  checkLenient();  }	  if(c    ==    'e'    ||    c    ==    'E')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	27	None	replace
217	[BUG]  [BUGGY]  parent  ==  'e'  ||  parent  ==  'E')  {  checkLenient();  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  'e'  ||  parent  ==  'E')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  'e'  ||  parent  ==  'E')  {  checkLenient();  }	  if(c    ==    'e'    ||    c    ==    'E')    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	27	None	replace
218	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	31	None	replace
219	[BUG]  [BUGGY]  int  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	31	None	replace
220	[BUG]  [BUGGY]  int  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	31	None	replace
221	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	90	None	replace
222	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	90	None	replace
223	[BUG]  [BUGGY]  while(stack.length  -  1  <  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length  -  1  <  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length  -  1  <  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	90	None	replace
224	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_BUFFERED_OBJECT;    }    	non-compiled	[CE]  	163	None	replace
225	[BUG]  [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_BUFFERED_OBJECT;    }    	non-compiled	[CE]  	163	None	replace
226	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT;  return  peeked  =  PEEKED_BUFFERED_OBJECT;  [CE]  not  a  statement  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT;  return  peeked  =  PEEKED_BUFFERED_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT;  return  peeked  =  PEEKED_BUFFERED_OBJECT;	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_BUFFERED_OBJECT;    }    	non-compiled	[CE]  not  a  statement	163	None	replace
227	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	165	None	replace
228	[BUG]  [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	165	None	replace
229	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  'e')  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ','  ||  c  ==  'e')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ','  ||  c  ==  'e')  {  checkLenient();  }	  if(c    ==    '''    ||    c    ==    'e')    {    checkLenient();    }    	non-compiled	[CE]  	89	None	replace
230	[BUG]  [BUGGY]  if(c  ==  '''  &&  c  ==  'e')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  &&  c  ==  'e')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  &&  c  ==  'e')  {  checkLenient();  }	  if(c    ==    '''    ||    c    ==    'e')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	89	None	replace
231	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'e')  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  'e'  ||  c  ==  'e')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  'e'  ||  c  ==  'e')  {  checkLenient();  }	  if(c    ==    '''    ||    c    ==    'e')    {    checkLenient();    }    	non-compiled	[CE]  	89	None	replace
232	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  '')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  'e'  ||  c  ==  '')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  'e'  ||  c  ==  '')  {  checkLenient();  }	  if(c    ==    '''    ||    c    ==    'e')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	89	None	replace
233	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  not  a  statement  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	128	None	replace
234	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	128	None	replace
235	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	128	None	replace
236	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	128	None	replace
237	[BUG]  [BUGGY]  while(stack.length  >  0)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length  >  0)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length  >  0)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	128	None	replace
238	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(isLiteral((    char)c))    {    peekStack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	115	None	replace
239	[BUG]  [BUGGY]  while(isLenient((  char)c))  {  peekStack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c))  {  peekStack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c))  {  peekStack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(isLiteral((    char)c))    {    peekStack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	115	None	replace
240	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  stack[peekStack.length  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  stack[peekStack.length  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  stack[peekStack.length  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(isLiteral((    char)c))    {    peekStack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	115	None	replace
241	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(isLiteral((    char)c))    {    peekStack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	115	None	replace
242	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  peekStack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  peekStack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  peekStack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(isLiteral((    char)c))    {    peekStack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	115	None	replace
243	[BUG]  [BUGGY]  peakStack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peakStack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peakStack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(isLiteral((    char)c))    {    peekStack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	115	None	replace
244	[BUG]  [BUGGY]  Integer  c  =  stack[stackSize  -  1]  +  1;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  c  =  stack[stackSize  -  1]  +  1;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  c  =  stack[stackSize  -  1]  +  1;	  Integer    c    =    stack[stackSize    -    1];    	non-compiled	[CE]  	119	None	replace
245	[BUG]  [BUGGY]  Integer  c  =  pathIndices[stackSize  -  1];  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  c  =  pathIndices[stackSize  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  c  =  pathIndices[stackSize  -  1];	  Integer    c    =    stack[stackSize    -    1];    	non-compiled	[CE]  	119	None	replace
246	[BUG]  [BUGGY]  Integer  c  =  stack[peekStack.length  -  1];  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  c  =  stack[peekStack.length  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  c  =  stack[peekStack.length  -  1];	  Integer    c    =    stack[stackSize    -    1];    	non-compiled	[CE]  	119	None	replace
247	[BUG]  [BUGGY]  Integer  c  =  stack[pos  -  1];  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  c  =  stack[pos  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  c  =  stack[pos  -  1];	  Integer    c    =    stack[stackSize    -    1];    	non-compiled	[CE]  	119	None	replace
248	[BUG]  [BUGGY]  Integer  c  =  stack[peekStackSize  -  1];  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  c  =  stack[peekStackSize  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  c  =  stack[peekStackSize  -  1];	  Integer    c    =    stack[stackSize    -    1];    	non-compiled	[CE]  	119	None	replace
249	[BUG]  [BUGGY]  while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	168	None	replace
250	[BUG]  [BUGGY]  while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	168	None	replace
251	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	168	None	replace
252	[BUG]  [BUGGY]  while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	168	None	replace
253	[BUG]  [BUGGY]  while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	168	None	replace
254	[BUG]  [BUGGY]  peaked[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  not  a  statement  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peaked[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peaked[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  not  a  statement	168	None	replace
255	[BUG]  [BUGGY]  while(isLiteral((  char)c)  ||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)  ||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)  ||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c)&&    peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	100	None	replace
256	[BUG]  [BUGGY]  int  c  =(int)Math.floor(pathNames[stackSize  -  1]);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =(int)Math.floor(pathNames[stackSize  -  1]);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =(int)Math.floor(pathNames[stackSize  -  1]);	  int    c    =(int)Math.floor(peekedString,    pathNames[stackSize    -    1]);    	non-compiled	[CE]  	51	None	replace
257	[BUG]  [BUGGY]  int  c  =(int)Math.floor(pathNames,  stack[stackSize  -  1]);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =(int)Math.floor(pathNames,  stack[stackSize  -  1]);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =(int)Math.floor(pathNames,  stack[stackSize  -  1]);	  int    c    =(int)Math.floor(peekedString,    pathNames[stackSize    -    1]);    	non-compiled	[CE]  	51	None	replace
258	[BUG]  [BUGGY]  int  c  =(int)Math.ceil(pathNames[stackSize  -  1]);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =(int)Math.ceil(pathNames[stackSize  -  1]);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =(int)Math.ceil(pathNames[stackSize  -  1]);	  int    c    =(int)Math.floor(peekedString,    pathNames[stackSize    -    1]);    	non-compiled	[CE]  	51	None	replace
259	[BUG]  [BUGGY]  char  c  =(char)Math.floor(peekedString,  pathNames[stackSize  -  1]);  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  char  c  =(char)Math.floor(peekedString,  pathNames[stackSize  -  1]);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	char  c  =(char)Math.floor(peekedString,  pathNames[stackSize  -  1]);	  int    c    =(int)Math.floor(peekedString,    pathNames[stackSize    -    1]);    	non-compiled	[CE]  	51	None	replace
260	[BUG]  [BUGGY]  int  c  =(int)Math.floor(stack,  pathNames[stackSize  -  1]);  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =(int)Math.floor(stack,  pathNames[stackSize  -  1]);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =(int)Math.floor(stack,  pathNames[stackSize  -  1]);	  int    c    =(int)Math.floor(peekedString,    pathNames[stackSize    -    1]);    	non-compiled	[CE]  	51	None	replace
261	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  	152	None	replace
262	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  not  a  statement	152	None	replace
263	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  	152	None	replace
264	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  not  a  statement	152	None	replace
265	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_OBJECT;  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_OBJECT;	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  not  a  statement	152	None	replace
266	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  int    stack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	53	None	replace
267	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  <  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]  <  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  <  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  int    stack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	53	None	replace
268	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    '''    ||    c    ==    ''')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  empty  character  literal	65	None	replace
269	[BUG]  [BUGGY]  while(stack.length()  ==  0)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  ==  0)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  ==  0)  {  checkLenient();  }	  while(stack.length()    <    =    0)    {    checkLenient();    }    	non-compiled	[CE]  	160	None	replace
270	[BUG]  [BUGGY]  while(stack.length()!=  0)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()!=  0)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()!=  0)  {  checkLenient();  }	  while(stack.length()    <    =    0)    {    checkLenient();    }    	non-compiled	[CE]  	160	None	replace
271	[BUG]  [BUGGY]  while(stack.length()  >=  0)  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  >=  0)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  >=  0)  {  checkLenient();  }	  while(stack.length()    <    =    0)    {    checkLenient();    }    	non-compiled	[CE]  	160	None	replace
272	[BUG]  [BUGGY]  while(stack.length()  <  =  1)  {  checkLenient();  }  [CE]  illegal  start  of  expression  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  <  =  1)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  <  =  1)  {  checkLenient();  }	  while(stack.length()    <    =    0)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
273	[BUG]  [BUGGY]  while(stack.length()  <  0)  {  checkLenient();  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  <  0)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  <  0)  {  checkLenient();  }	  while(stack.length()    <    =    0)    {    checkLenient();    }    	non-compiled	[CE]  	160	None	replace
274	[BUG]  [BUGGY]  while(stack.length()  >  0)  {  checkLenient();  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  >  0)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  >  0)  {  checkLenient();  }	  while(stack.length()    <    =    0)    {    checkLenient();    }    	non-compiled	[CE]  	160	None	replace
275	[BUG]  [BUGGY]  while(isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c)||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	96	None	replace
276	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_STRING  &&  isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_STRING  &&  isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_STRING  &&  isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c)||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	96	None	replace
277	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c)||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	96	None	replace
278	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c)||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	96	None	replace
279	[BUG]  [BUGGY]  int  stackSize  =  stack.length()  -  1;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stackSize  =  stack.length()  -  1;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stackSize  =  stack.length()  -  1;	  int    stackSize    =    stack.length();    	non-compiled	[CE]  	57	None	replace
280	[BUG]  [BUGGY]  int  stackSize  =  stack.length()  +  1;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stackSize  =  stack.length()  +  1;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stackSize  =  stack.length()  +  1;	  int    stackSize    =    stack.length();    	non-compiled	[CE]  	57	None	replace
281	[BUG]  [BUGGY]  int  stackSize  =  stack.length()  -  2;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stackSize  =  stack.length()  -  2;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stackSize  =  stack.length()  -  2;	  int    stackSize    =    stack.length();    	non-compiled	[CE]  	57	None	replace
282	[BUG]  [BUGGY]  int  stackSize  =  stack.length  -  1;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stackSize  =  stack.length  -  1;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stackSize  =  stack.length  -  1;	  int    stackSize    =    stack.length();    	non-compiled	[CE]  	57	None	replace
283	[BUG]  [BUGGY]  int  stackSize  =  stack.length()  -  4;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stackSize  =  stack.length()  -  4;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stackSize  =  stack.length()  -  4;	  int    stackSize    =    stack.length();    	non-compiled	[CE]  	57	None	replace
284	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	43	None	replace
285	[BUG]  [BUGGY]  int  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	43	None	replace
286	[BUG]  [BUGGY]  while(c!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  while(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    	non-compiled	[CE]  	4	None	replace
287	[BUG]  [BUGGY]  while(stackTop!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stackTop!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stackTop!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  while(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    	non-compiled	[CE]  	4	None	replace
288	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	23	None	replace
289	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	23	None	replace
290	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	23	None	replace
291	[BUG]  [BUGGY]  int  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	36	None	replace
292	[BUG]  [BUGGY]  int  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	36	None	replace
293	[BUG]  [BUGGY]  int  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	36	None	replace
294	[BUG]  [BUGGY]  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  while(stack.length()    >=    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	85	None	replace
295	[BUG]  [BUGGY]  while(stack.length()  >  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  >  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  >  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  while(stack.length()    >=    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	85	None	replace
296	[BUG]  [BUGGY]  Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  while(stack.length()    >=    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	85	None	replace
297	[BUG]  [BUGGY]  while(stack.length()!=  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()!=  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()!=  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  while(stack.length()    >=    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	85	None	replace
298	[BUG]  [BUGGY]  while(stack.length()  <  =  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  illegal  start  of  expression  [FE]                                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  <  =  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  <  =  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  while(stack.length()    >=    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
299	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_BUFFERED;  }  [CE]  empty  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_BUFFERED;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_BUFFERED;  }	  if(c    ==    '')    {    if(isLiteral((    char)    c))    {    return    peeked    =    PEEKED_BUFFERED;    }    	non-compiled	[CE]  empty  character  literal	171	None	replace
300	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_BUFFERED;  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.')  {  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_BUFFERED;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.')  {  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_BUFFERED;  }	  if(c    ==    '')    {    if(isLiteral((    char)    c))    {    return    peeked    =    PEEKED_BUFFERED;    }    	non-compiled	[CE]  	171	None	replace
301	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  return  peeked  =  PEEKED_BUFFERED;  }  [CE]  not  a  statement  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  return  peeked  =  PEEKED_BUFFERED;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  return  peeked  =  PEEKED_BUFFERED;  }	  if(c    ==    '')    {    if(isLiteral((    char)    c))    {    return    peeked    =    PEEKED_BUFFERED;    }    	non-compiled	[CE]  not  a  statement	171	None	replace
302	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  return  peeked  =  PEEKED_BUFFERED;  }  [CE]  not  a  statement  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  return  peeked  =  PEEKED_BUFFERED;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  return  peeked  =  PEEKED_BUFFERED;  }	  if(c    ==    '')    {    if(isLiteral((    char)    c))    {    return    peeked    =    PEEKED_BUFFERED;    }    	non-compiled	[CE]  not  a  statement	171	None	replace
303	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_DOUBLE_QUOTED_NAME;  }  [CE]  empty  character  literal  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_DOUBLE_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_DOUBLE_QUOTED_NAME;  }	  if(c    ==    '')    {    if(isLiteral((    char)    c))    {    return    peeked    =    PEEKED_BUFFERED;    }    	non-compiled	[CE]  empty  character  literal	171	None	replace
304	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	166	None	replace
305	[BUG]  [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	166	None	replace
306	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	166	None	replace
307	[BUG]  [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	166	None	replace
308	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	166	None	replace
309	[BUG]  [BUGGY]  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	166	None	replace
310	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	3	None	replace
311	[BUG]  [BUGGY]  while(c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	3	None	replace
312	[BUG]  [BUGGY]  pendency(stack.length())  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pendency(stack.length())  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pendency(stack.length())  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  pendency(stack.length()    -    1)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	15	None	replace
313	[BUG]  [BUGGY]  Pendency(stack.length())  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Pendency(stack.length())  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Pendency(stack.length())  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  pendency(stack.length()    -    1)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	15	None	replace
314	[BUG]  [BUGGY]  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	141	None	replace
315	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	141	None	replace
316	[BUG]  [BUGGY]  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  unclosed  string  literal	141	None	replace
317	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING  ||  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING  ||  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_STRING  ||  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	141	None	replace
318	[BUG]  [BUGGY]  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	141	None	replace
319	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	62	None	replace
320	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();	  if(peekStack    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	62	None	replace
321	[BUG]  [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();	  if(peekStack    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	62	None	replace
322	[BUG]  [BUGGY]  while(stack.length  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	22	None	replace
323	[BUG]  [BUGGY]  while(stack.length!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	22	None	replace
324	[BUG]  [BUGGY]  while(stack.length  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	22	None	replace
325	[BUG]  [BUGGY]  while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	22	None	replace
326	[BUG]  [BUGGY]  while(stackTop!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stackTop!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stackTop!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	22	None	replace
327	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	78	None	replace
328	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	78	None	replace
329	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peeked[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peeked[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peeked[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	78	None	replace
330	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	78	None	replace
331	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peeked[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peeked[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peeked[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	78	None	replace
332	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	78	None	replace
333	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	78	None	replace
334	[BUG]  [BUGGY]  while(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	71	None	replace
335	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	71	None	replace
336	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peeked!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peeked!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peeked!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	71	None	replace
337	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_STRING)  {  checkLenient();	  if(peekStack!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	63	None	replace
338	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c)  ||  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c)  ||  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c)||    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	72	None	replace
339	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c)||    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	72	None	replace
340	[BUG]  [BUGGY]  if(isLenient((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c)||    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	72	None	replace
341	[BUG]  [BUGGY]  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	45	None	replace
342	[BUG]  [BUGGY]  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	45	None	replace
343	[BUG]  [BUGGY]  Stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	45	None	replace
344	[BUG]  [BUGGY]  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	45	None	replace
345	[BUG]  [BUGGY]  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_SINGLE_QUOTED_NAME;  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_SINGLE_QUOTED_NAME;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_SINGLE_QUOTED_NAME;	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	45	None	replace
346	[BUG]  [BUGGY]  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	45	None	replace
347	[BUG]  [BUGGY]  parent  ==  '['  ||  c  ==  ']')  {  checkLenient();  }  [CE]  not  a  statement  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  '['  ||  c  ==  ']')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  '['  ||  c  ==  ']')  {  checkLenient();  }	  if(c    ==    '['    ||    c    ==    ']')    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	179	None	replace
348	[BUG]  [BUGGY]  while(c  ==  '['  &&  c  ==  ']')  {  checkLenient();  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c  ==  '['  &&  c  ==  ']')  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  ==  '['  &&  c  ==  ']')  {  checkLenient();	  if(c    ==    '['    ||    c    ==    ']')    {    checkLenient();    }    	non-compiled	[CE]  	179	None	replace
349	[BUG]  [BUGGY]  if(c  ==  '['  ||  c!=  ']')  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '['  ||  c!=  ']')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '['  ||  c!=  ']')  {  checkLenient();  }	  if(c    ==    '['    ||    c    ==    ']')    {    checkLenient();    }    	non-compiled	[CE]  	179	None	replace
350	[BUG]  [BUGGY]  while(c  ==  '['  &&  c  ==  ']')  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c  ==  '['  &&  c  ==  ']')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  ==  '['  &&  c  ==  ']')  {  checkLenient();  }	  if(c    ==    '['    ||    c    ==    ']')    {    checkLenient();    }    	non-compiled	[CE]  	179	None	replace
351	[BUG]  [BUGGY]  parent  ==  c  ||  c  ==  ']')  {  checkLenient();  }  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  c  ||  c  ==  ']')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  c  ||  c  ==  ']')  {  checkLenient();  }	  if(c    ==    '['    ||    c    ==    ']')    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	179	None	replace
352	[BUG]  [BUGGY]  int  c  =  stack[stackSize  -  1]  +  1;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =  stack[stackSize  -  1]  +  1;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =  stack[stackSize  -  1]  +  1;	  int    c    =    stack[stackSize    -    1];    	non-compiled	[CE]  	46	None	replace
353	[BUG]  [BUGGY]  int  c  =  stack[peekStack.length  -  1];  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =  stack[peekStack.length  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =  stack[peekStack.length  -  1];	  int    c    =    stack[stackSize    -    1];    	non-compiled	[CE]  	46	None	replace
354	[BUG]  [BUGGY]  int  c  =  stack[pos  -  1];  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =  stack[pos  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =  stack[pos  -  1];	  int    c    =    stack[stackSize    -    1];    	non-compiled	[CE]  	46	None	replace
355	[BUG]  [BUGGY]  int  c  =  stack[stackSize  -  2];  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =  stack[stackSize  -  2];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =  stack[stackSize  -  2];	  int    c    =    stack[stackSize    -    1];    	non-compiled	[CE]  	46	None	replace
356	[BUG]  [BUGGY]  int  c  =  stack[peekStackSize  -  1];  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =  stack[peekStackSize  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =  stack[peekStackSize  -  1];	  int    c    =    stack[stackSize    -    1];    	non-compiled	[CE]  	46	None	replace
357	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  ':')  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ','  ||  c  ==  ':')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ','  ||  c  ==  ':')  {  checkLenient();  }	  if(c    ==    '.'    ||    c    ==    ':')    {    checkLenient();    }    	non-compiled	[CE]  	180	None	replace
358	[BUG]  [BUGGY]  if(c  ==  '.'  &&  c  ==  ':')  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  &&  c  ==  ':')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  &&  c  ==  ':')  {  checkLenient();  }	  if(c    ==    '.'    ||    c    ==    ':')    {    checkLenient();    }    	non-compiled	[CE]  	180	None	replace
359	[BUG]  [BUGGY]  while(c  ==  '.'  &&  c  ==  ':')  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c  ==  '.'  &&  c  ==  ':')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  ==  '.'  &&  c  ==  ':')  {  checkLenient();  }	  if(c    ==    '.'    ||    c    ==    ':')    {    checkLenient();    }    	non-compiled	[CE]  	180	None	replace
360	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  ':')  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c!=  '.'  ||  c  ==  ':')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c!=  '.'  ||  c  ==  ':')  {  checkLenient();  }	  if(c    ==    '.'    ||    c    ==    ':')    {    checkLenient();    }    	non-compiled	[CE]  	180	None	replace
361	[BUG]  [BUGGY]  parent  ==  '.'  ||  c  ==  ':')  {  checkLenient();  }  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  '.'  ||  c  ==  ':')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  '.'  ||  c  ==  ':')  {  checkLenient();  }	  if(c    ==    '.'    ||    c    ==    ':')    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	180	None	replace
362	[BUG]  [BUGGY]  while(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	55	None	replace
363	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	55	None	replace
364	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	55	None	replace
365	[BUG]  [BUGGY]  while(stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	39	None	replace
366	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_LONG  ||  parent  ==  JsonScope.NONEMPTY_OBJECT;  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_LONG  ||  parent  ==  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_LONG  ||  parent  ==  JsonScope.NONEMPTY_OBJECT;	  parent!=    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  not  a  statement	12	None	replace
367	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_LONG  ||  parent  ==  JsonScope.NONEMPTY_LONG;  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_LONG  ||  parent  ==  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_LONG  ||  parent  ==  JsonScope.NONEMPTY_LONG;	  parent!=    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  not  a  statement	12	None	replace
368	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_LONG  ||  parent!=  JsonScope.NONEMPTY_OBJECT;  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_LONG  ||  parent!=  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_LONG  ||  parent!=  JsonScope.NONEMPTY_OBJECT;	  parent!=    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  not  a  statement	12	None	replace
369	[BUG]  [BUGGY]  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [CE]  not  a  statement  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  not  a  statement	178	None	replace
370	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  	178	None	replace
371	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  	178	None	replace
372	[BUG]  [BUGGY]  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  not  a  statement	178	None	replace
373	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  	178	None	replace
374	[BUG]  [BUGGY]  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED;  }  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  not  a  statement	178	None	replace
375	[BUG]  [BUGGY]  while(stackSize!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stackSize!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stackSize!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(stack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	73	None	replace
376	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	73	None	replace
377	[BUG]  [BUGGY]  while(stackSize  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stackSize  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stackSize  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(stack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	73	None	replace
378	[BUG]  [BUGGY]  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       "    	non-compiled	[CE]  	148	None	replace
379	[BUG]  [BUGGY]  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       "    	non-compiled	[CE]  unclosed  string  literal	148	None	replace
380	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       "    	non-compiled	[CE]  unclosed  string  literal	148	None	replace
381	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       "    	non-compiled	[CE]  	148	None	replace
382	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   "  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   "  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   "	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       "    	non-compiled	[CE]  	148	None	replace
383	[BUG]  [BUGGY]  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   "  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   "  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   "	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       "    	non-compiled	[CE]  	148	None	replace
384	[BUG]  [BUGGY]  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       "    	non-compiled	[CE]  unclosed  string  literal	148	None	replace
385	[BUG]  [BUGGY]  while(isLiteral((  char)c)  <  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)  <  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)  <  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	138	None	replace
386	[BUG]  [BUGGY]  while(isLiteral((  char)c)  <  stack.length)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)  <  stack.length)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)  <  stack.length)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	138	None	replace
387	[BUG]  [BUGGY]  while(isLenient((  char)c)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	138	None	replace
388	[BUG]  [BUGGY]  while(isLenient((  char)c)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  while(isLiteral((    char)c)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	138	None	replace
389	[BUG]  [BUGGY]  while(isLong((  char)c)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLong((  char)c)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLong((  char)c)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	138	None	replace
390	[BUG]  [BUGGY]  while(isLiteral((  char)c)  <  stack.length)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)  <  stack.length)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)  <  stack.length)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  while(isLiteral((    char)c)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	138	None	replace
391	[BUG]  [BUGGY]  while(stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	37	None	replace
392	[BUG]  [BUGGY]  while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	37	None	replace
393	[BUG]  [BUGGY]  while(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	37	None	replace
394	[BUG]  [BUGGY]  while(stack.length()  ==  1)  {  checkLenient();  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  ==  1)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  ==  1)  {  checkLenient();	  if(stack.length()    ==    1)    {    checkLenient();    }    	non-compiled	[CE]  	56	None	replace
395	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  c  ==  ''')  {  checkLenient();  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  c  ==  ''')  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  &&  c  ==  ''')  {  checkLenient();	  parent    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    ''')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  empty  character  literal	155	None	replace
396	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  ''')  {  checkLenient();  [CE]  empty  character  literal  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  ''')  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  ''')  {  checkLenient();	  parent    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    ''')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  empty  character  literal	155	None	replace
397	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  c  ==  ''')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  c  ==  ''')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  &&  c  ==  ''')  {  checkLenient();  }	  parent    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    ''')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  empty  character  literal	155	None	replace
398	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  ''')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  ''')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  ''')  {  checkLenient();  }	  parent    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    ''')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  empty  character  literal	155	None	replace
399	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	176	None	replace
400	[BUG]  [BUGGY]  while(stack[peekStack  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[peekStack  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[peekStack  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(stack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	10	None	replace
401	[BUG]  [BUGGY]  while(stack[pos  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[pos  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[pos  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(stack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	10	None	replace
402	[BUG]  [BUGGY]  while(stack[peekStack  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[peekStack  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[peekStack  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(stack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	10	None	replace
403	[BUG]  [BUGGY]  while(peekStack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(stack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	10	None	replace
404	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[peekSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[peekSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[peekSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	129	None	replace
405	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[peekSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[peekSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[peekSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	129	None	replace
406	[BUG]  [BUGGY]  while(stack.length()  ==  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  ==  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  ==  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  while(stack.length()    ==    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	84	None	replace
407	[BUG]  [BUGGY]  while(stack.length()  ==  2)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  ==  2)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  ==  2)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  while(stack.length()    ==    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	84	None	replace
408	[BUG]  [BUGGY]  if(c  ==  '''  &&  peeked!=  '')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  &&  peeked!=  '')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  &&  peeked!=  '')  {  checkLenient();  }	  if(c    ==    '''    &&    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	29	None	replace
409	[BUG]  [BUGGY]  if(c  ==  '''  &&  peeked  >=  '')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  &&  peeked  >=  '')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  &&  peeked  >=  '')  {  checkLenient();  }	  if(c    ==    '''    &&    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	29	None	replace
410	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	7	None	replace
411	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	7	None	replace
412	[BUG]  [BUGGY]  while(stack.length()!=  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()!=  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()!=  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(stack.length()    <    =    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	81	None	replace
413	[BUG]  [BUGGY]  while(stack.length()  <  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  <  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  <  0)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(stack.length()    <    =    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	81	None	replace
414	[BUG]  [BUGGY]  Context.checkState(c  ==  '.'  ||  c  ==  ',')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Context.checkState(c  ==  '.'  ||  c  ==  ',')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Context.checkState(c  ==  '.'  ||  c  ==  ',')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    '.'    ||    c    ==    ',')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	42	None	replace
415	[BUG]  [BUGGY]  Context.checkState(c  ==  '.'  ||  c  ==  ',')  {  throw  syntaxError( "Expected  name ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Context.checkState(c  ==  '.'  ||  c  ==  ',')  {  throw  syntaxError( "Expected  name ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Context.checkState(c  ==  '.'  ||  c  ==  ',')  {  throw  syntaxError( "Expected  name ");  }	  if(c    ==    '.'    ||    c    ==    ',')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	42	None	replace
416	[BUG]  [BUGGY]  Context.checkState(c  ==  '.'  ||  c  ==  ',')  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Context.checkState(c  ==  '.'  ||  c  ==  ',')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Context.checkState(c  ==  '.'  ||  c  ==  ',')  {  checkLenient();  }	  if(c    ==    '.'    ||    c    ==    ',')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	42	None	replace
417	[BUG]  [BUGGY]  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name!=  pos--;  [CE]  not  a  statement  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name!=  pos--;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name!=  pos--;	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	44	None	replace
418	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	146	None	replace
419	[BUG]  [BUGGY]  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	146	None	replace
420	[BUG]  [BUGGY]  while(isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c)||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	87	None	replace
421	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c)||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	87	None	replace
422	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c)||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	87	None	replace
423	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c))    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	137	None	replace
424	[BUG]  [BUGGY]  while(isLenient((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c))    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	137	None	replace
425	[BUG]  [BUGGY]  while(isLong((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLong((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLong((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c))    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	137	None	replace
426	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c))    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	137	None	replace
427	[BUG]  [BUGGY]  int  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    	non-compiled	[CE]  	33	None	replace
428	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    	non-compiled	[CE]  	33	None	replace
429	[BUG]  [BUGGY]  int  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	54	None	replace
430	[BUG]  [BUGGY]  int  stack[size  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[size  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[size  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	54	None	replace
431	[BUG]  [BUGGY]  int  pos  =  stack.length()  -  1;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.length()  -  1;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.length()  -  1;	  int    pos    =    stack.length();    	non-compiled	[CE]  	48	None	replace
432	[BUG]  [BUGGY]  int  pos  =  stack.length()  -  2;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.length()  -  2;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.length()  -  2;	  int    pos    =    stack.length();    	non-compiled	[CE]  	48	None	replace
433	[BUG]  [BUGGY]  int  pos  =  stack.length()  +  1;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.length()  +  1;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.length()  +  1;	  int    pos    =    stack.length();    	non-compiled	[CE]  	48	None	replace
434	[BUG]  [BUGGY]  int  pos  =  pathIndices.length;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  pathIndices.length;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  pathIndices.length;	  int    pos    =    stack.length();    	non-compiled	[CE]  	48	None	replace
435	[BUG]  [BUGGY]  int  pos  =  stack.length()  -  4;  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.length()  -  4;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.length()  -  4;	  int    pos    =    stack.length();    	non-compiled	[CE]  	48	None	replace
436	[BUG]  [BUGGY]  int  pos  =  pathIndices.length();  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  pathIndices.length();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  pathIndices.length();	  int    pos    =    stack.length();    	non-compiled	[CE]  	48	None	replace
437	[BUG]  [BUGGY]  while(c!=  ''')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c!=  ''')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c!=  ''')  {  checkLenient();  }	  while(c    ==    ''')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	69	None	replace
438	[BUG]  [BUGGY]  while(c  >=  ''')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c  >=  ''')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  >=  ''')  {  checkLenient();  }	  while(c    ==    ''')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	69	None	replace
439	[BUG]  [BUGGY]  while(c  ==  '.')  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c  ==  '.')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  ==  '.')  {  checkLenient();  }	  while(c    ==    ''')    {    checkLenient();    }    	non-compiled	[CE]  	69	None	replace
440	[BUG]  [BUGGY]  while(c  <  ''')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c  <  ''')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  <  ''')  {  checkLenient();  }	  while(c    ==    ''')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	69	None	replace
441	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(c!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	182	None	replace
442	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	118	None	replace
443	[BUG]  [BUGGY]  while(isLenient((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	118	None	replace
444	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  checkLenient();  }  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  checkLenient();  }	  peer!=    JsonScope.NONEMPTY_OBJECT    &&    isLiteral((    char)c))    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	116	None	replace
445	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  checkLenient();  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  checkLenient();	  peer!=    JsonScope.NONEMPTY_OBJECT    &&    isLiteral((    char)c))    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	116	None	replace
446	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  ||  isLiteral((  char)c))  {  checkLenient();  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  ||  isLiteral((  char)c))  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_OBJECT  ||  isLiteral((  char)c))  {  checkLenient();	  peer!=    JsonScope.NONEMPTY_OBJECT    &&    isLiteral((    char)c))    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	116	None	replace
447	[BUG]  [BUGGY]  peer  ==  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name ");  }  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer  ==  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer  ==  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name ");  }	  peer!=    JsonScope.NONEMPTY_OBJECT    &&    isLiteral((    char)c))    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	116	None	replace
448	[BUG]  [BUGGY]  int  pos  =  stack[stackSize  -  1]  +  1;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack[stackSize  -  1]  +  1;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack[stackSize  -  1]  +  1;	  int    pos    =    stack[stackSize    -    1];    	non-compiled	[CE]  	18	None	replace
449	[BUG]  [BUGGY]  int  pos  =  stack[stackSize  -  1]  |  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack[stackSize  -  1]  |  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack[stackSize  -  1]  |  JsonScope.NONEMPTY_OBJECT;	  int    pos    =    stack[stackSize    -    1];    	non-compiled	[CE]  	18	None	replace
450	[BUG]  [BUGGY]  int  pos  =  stack[peekStack.length  -  1];  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack[peekStack.length  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack[peekStack.length  -  1];	  int    pos    =    stack[stackSize    -    1];    	non-compiled	[CE]  	18	None	replace
451	[BUG]  [BUGGY]  int  pos  =  stack[stackSize  -  1]  &  0xff;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack[stackSize  -  1]  &  0xff;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack[stackSize  -  1]  &  0xff;	  int    pos    =    stack[stackSize    -    1];    	non-compiled	[CE]  	18	None	replace
452	[BUG]  [BUGGY]  int  pos  =  stack[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED_NAME;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED_NAME;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED_NAME;	  int    pos    =    stack[stackSize    -    1];    	non-compiled	[CE]  	18	None	replace
453	[BUG]  [BUGGY]  int  pos  =  stack[stackSize  -  2];  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack[stackSize  -  2];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack[stackSize  -  2];	  int    pos    =    stack[stackSize    -    1];    	non-compiled	[CE]  	18	None	replace
454	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[peekStackSize  -  1];  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int[]  pathIndices  =  stack[peekStackSize  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[peekStackSize  -  1];	  int[]    pathIndices    =    stack[stackSize    -    1];    	non-compiled	[CE]  	20	None	replace
455	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[peekStack.length  -  1];  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int[]  pathIndices  =  stack[peekStack.length  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[peekStack.length  -  1];	  int[]    pathIndices    =    stack[stackSize    -    1];    	non-compiled	[CE]  	20	None	replace
456	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[pathNames.length  -  1];  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int[]  pathIndices  =  stack[pathNames.length  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[pathNames.length  -  1];	  int[]    pathIndices    =    stack[stackSize    -    1];    	non-compiled	[CE]  	20	None	replace
457	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[stackSize  -  2];  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int[]  pathIndices  =  stack[stackSize  -  2];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[stackSize  -  2];	  int[]    pathIndices    =    stack[stackSize    -    1];    	non-compiled	[CE]  	20	None	replace
458	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[stack.length  -  1];  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int[]  pathIndices  =  stack[stack.length  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[stack.length  -  1];	  int[]    pathIndices    =    stack[stackSize    -    1];    	non-compiled	[CE]  	20	None	replace
459	[BUG]  [BUGGY]  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked;    }    	non-compiled	[CE]  	167	None	replace
460	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked;    }    	non-compiled	[CE]  	167	None	replace
461	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked;    }    	non-compiled	[CE]  	167	None	replace
462	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_STRING)  {  return  peeked;  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_STRING)  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_STRING)  {  return  peeked;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked;    }    	non-compiled	[CE]  	167	None	replace
463	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked;    }    	non-compiled	[CE]  	167	None	replace
464	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  return  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING;  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  return  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  return  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked;    }    	non-compiled	[CE]  	167	None	replace
465	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	77	None	replace
466	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	77	None	replace
467	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	77	None	replace
468	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	77	None	replace
469	[BUG]  [BUGGY]  while(pos  <  stack.length)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(pos  <  stack.length)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(pos  <  stack.length)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	77	None	replace
470	[BUG]  [BUGGY]  Stack  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Stack  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Stack  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(stack.length()    ==    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	79	None	replace
471	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  not  a  statement	153	None	replace
472	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  	153	None	replace
473	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  not  a  statement	153	None	replace
474	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  not  a  statement	153	None	replace
475	[BUG]  [BUGGY]  peer!=  null  &&  isLiteral((  char)c))  {  checkLenient();  }  [CE]  not  a  statement  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  null  &&  isLiteral((  char)c))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  null  &&  isLiteral((  char)c))  {  checkLenient();  }	  peer!=    null    &&    isLiteral((    char)c))    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	112	None	replace
476	[BUG]  [BUGGY]  reader!=  null  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name ");  }  [CE]  not  a  statement  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  reader!=  null  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	reader!=  null  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name ");  }	  peer!=    null    &&    isLiteral((    char)c))    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	112	None	replace
477	[BUG]  [BUGGY]  reader!=  null  &&  isLiteral((  char)c))  {  checkLenient();  }  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  reader!=  null  &&  isLiteral((  char)c))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	reader!=  null  &&  isLiteral((  char)c))  {  checkLenient();  }	  peer!=    null    &&    isLiteral((    char)c))    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	112	None	replace
478	[BUG]  [BUGGY]  peer!=  null  &&  isLiteral((  char)c))  {  checkLenient();  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  null  &&  isLiteral((  char)c))  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  null  &&  isLiteral((  char)c))  {  checkLenient();	  peer!=    null    &&    isLiteral((    char)c))    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	112	None	replace
479	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    PEEKED_DOUBLE_QUOTED_NAME;    }    	non-compiled	[CE]  	170	None	replace
480	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    PEEKED_DOUBLE_QUOTED_NAME;    }    	non-compiled	[CE]  not  a  statement	170	None	replace
481	[BUG]  [BUGGY]  if(isLenient((  char)c)||  isLiteral((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c)||  isLiteral((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c)||  isLiteral((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    PEEKED_DOUBLE_QUOTED_NAME;    }    	non-compiled	[CE]  	170	None	replace
482	[BUG]  [BUGGY]  allowLenient((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  allowLenient((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	allowLenient((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    PEEKED_DOUBLE_QUOTED_NAME;    }    	non-compiled	[CE]  	170	None	replace
483	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  [CE]  not  a  statement  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    PEEKED_DOUBLE_QUOTED_NAME;    }    	non-compiled	[CE]  not  a  statement	170	None	replace
484	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  String)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [CE]  not  a  statement  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  String)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  String)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    PEEKED_DOUBLE_QUOTED_NAME;    }    	non-compiled	[CE]  not  a  statement	170	None	replace
485	[BUG]  [BUGGY]  pendency(stack.length())  {  checkLenient();  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pendency(stack.length())  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pendency(stack.length())  {  checkLenient();  }	  pendency(stack.length()    -    1)    {    checkLenient();    }    	non-compiled	[CE]  	60	None	replace
486	[BUG]  [BUGGY]  Pendency(stack.length())  {  checkLenient();  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Pendency(stack.length())  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Pendency(stack.length())  {  checkLenient();  }	  pendency(stack.length()    -    1)    {    checkLenient();    }    	non-compiled	[CE]  	60	None	replace
487	[BUG]  [BUGGY]  Pendency(stack.length()  -  1)  {  checkLenient();  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Pendency(stack.length()  -  1)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Pendency(stack.length()  -  1)  {  checkLenient();  }	  pendency(stack.length()    -    1)    {    checkLenient();    }    	non-compiled	[CE]  	60	None	replace
488	[BUG]  [BUGGY]  pendency(stack.length()  +  1)  {  checkLenient();  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pendency(stack.length()  +  1)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pendency(stack.length()  +  1)  {  checkLenient();  }	  pendency(stack.length()    -    1)    {    checkLenient();    }    	non-compiled	[CE]  	60	None	replace
489	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    ''')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  empty  character  literal	145	None	replace
490	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  '')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    ''')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  empty  character  literal	145	None	replace
491	[BUG]  [BUGGY]  if(c  ==  '.')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    ''')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  	145	None	replace
492	[BUG]  [BUGGY]  if(c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.. ");  }  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.. ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.. ");  }	  if(c    ==    ''')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  empty  character  literal	145	None	replace
493	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	130	None	replace
494	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	130	None	replace
495	[BUG]  [BUGGY]  while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	130	None	replace
496	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	130	None	replace
497	[BUG]  [BUGGY]  while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	130	None	replace
498	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  '+')  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ','  ||  c  ==  '+')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ','  ||  c  ==  '+')  {  checkLenient();  }	  if(c    ==    '.'    ||    c    ==    '+')    {    checkLenient();    }    	non-compiled	[CE]  	30	None	replace
499	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  '+')  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c!=  '.'  ||  c  ==  '+')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c!=  '.'  ||  c  ==  '+')  {  checkLenient();  }	  if(c    ==    '.'    ||    c    ==    '+')    {    checkLenient();    }    	non-compiled	[CE]  	30	None	replace
500	[BUG]  [BUGGY]  while(c  ==  '.'  &&  c  ==  '+')  {  checkLenient();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c  ==  '.'  &&  c  ==  '+')  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  ==  '.'  &&  c  ==  '+')  {  checkLenient();	  if(c    ==    '.'    ||    c    ==    '+')    {    checkLenient();    }    	non-compiled	[CE]  	30	None	replace
501	[BUG]  [BUGGY]  if(c  ==  '.'  &&  c  ==  '+')  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  &&  c  ==  '+')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  &&  c  ==  '+')  {  checkLenient();  }	  if(c    ==    '.'    ||    c    ==    '+')    {    checkLenient();    }    	non-compiled	[CE]  	30	None	replace
502	[BUG]  [BUGGY]  while(c  ==  '.'  &&  c  ==  '+')  {  checkLenient();  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c  ==  '.'  &&  c  ==  '+')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  ==  '.'  &&  c  ==  '+')  {  checkLenient();  }	  if(c    ==    '.'    ||    c    ==    '+')    {    checkLenient();    }    	non-compiled	[CE]  	30	None	replace
503	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  '')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ','  ||  c  ==  '')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ','  ||  c  ==  '')  {  checkLenient();  }	  if(c    ==    ',')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	150	None	replace
504	[BUG]  [BUGGY]  parent  ==  ',')  {  checkLenient();  }  [CE]  not  a  statement  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  ',')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  ',')  {  checkLenient();  }	  if(c    ==    ',')    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	150	None	replace
505	[BUG]  [BUGGY]  while(stack.length()  <  2)  {  checkLenient();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  <  2)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  <  2)  {  checkLenient();	  if(stack.length()    ==    2)    {    checkLenient();    }    	non-compiled	[CE]  	162	None	replace
506	[BUG]  [BUGGY]  while(stack.length()  >  2)  {  checkLenient();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  >  2)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  >  2)  {  checkLenient();	  if(stack.length()    ==    2)    {    checkLenient();    }    	non-compiled	[CE]  	162	None	replace
507	[BUG]  [BUGGY]  while(stack.length()  ==  2)  {  checkLenient();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  ==  2)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  ==  2)  {  checkLenient();	  if(stack.length()    ==    2)    {    checkLenient();    }    	non-compiled	[CE]  	162	None	replace
508	[BUG]  [BUGGY]  int  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  pos    =    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	35	None	replace
509	[BUG]  [BUGGY]  pos  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pos  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pos  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  pos    =    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	35	None	replace
510	[BUG]  [BUGGY]  int  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  pos    =    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	35	None	replace
511	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  empty  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  empty  character  literal	125	None	replace
512	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	125	None	replace
513	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  unclosed  string  literal	125	None	replace
514	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  return  peeked;  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  return  peeked;  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	125	None	replace
515	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	125	None	replace
516	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	125	None	replace
517	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  	164	None	replace
518	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  	164	None	replace
519	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED;  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED;  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  	164	None	replace
520	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFER;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFER;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFER;  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  	164	None	replace
521	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  peeked  =  stack[stackSize  -  1];  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  peeked  =  stack[stackSize  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  peeked  =  stack[stackSize  -  1];	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  	164	None	replace
522	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED;  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  	164	None	replace
523	[BUG]  [BUGGY]  luate(stack.length()))  {  checkLenient();  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  luate(stack.length()))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	luate(stack.length()))  {  checkLenient();  }	  luate(stack.length()    -    1))    {    checkLenient();    }    	non-compiled	[CE]  	61	None	replace
524	[BUG]  [BUGGY]  luate(stack.length()))  {  checkLenient();  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  luate(stack.length()))  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	luate(stack.length()))  {  checkLenient();	  luate(stack.length()    -    1))    {    checkLenient();    }    	non-compiled	[CE]  	61	None	replace
525	[BUG]  [BUGGY]  luate(stack.size()  -  1))  {  checkLenient();  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  luate(stack.size()  -  1))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	luate(stack.size()  -  1))  {  checkLenient();  }	  luate(stack.length()    -    1))    {    checkLenient();    }    	non-compiled	[CE]  	61	None	replace
526	[BUG]  [BUGGY]  luate(stack.length()  +  1))  {  checkLenient();  }  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  luate(stack.length()  +  1))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	luate(stack.length()  +  1))  {  checkLenient();  }	  luate(stack.length()    -    1))    {    checkLenient();    }    	non-compiled	[CE]  	61	None	replace
527	[BUG]  [BUGGY]  luate(stack.size()))  {  checkLenient();  }  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  luate(stack.size()))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	luate(stack.size()))  {  checkLenient();  }	  luate(stack.length()    -    1))    {    checkLenient();    }    	non-compiled	[CE]  	61	None	replace
528	[BUG]  [BUGGY]  luate(0))  {  checkLenient();  }  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  luate(0))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	luate(0))  {  checkLenient();  }	  luate(stack.length()    -    1))    {    checkLenient();    }    	non-compiled	[CE]  	61	None	replace
529	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_OBJECT;  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_OBJECT;	  parent!=    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  not  a  statement	24	None	replace
530	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_LONG;  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_LONG;	  parent!=    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  not  a  statement	24	None	replace
531	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_ARRAY)    {    checkLenient();    }    	non-compiled	[CE]  	106	None	replace
532	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();	  if(peekStack    ==    JsonScope.NONEMPTY_ARRAY)    {    checkLenient();    }    	non-compiled	[CE]  	106	None	replace
533	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();	  if(peekStack    ==    JsonScope.NONEMPTY_ARRAY)    {    checkLenient();    }    	non-compiled	[CE]  	106	None	replace
534	[BUG]  [BUGGY]  int  pos  =  stack.lastIndexOf(''');  [CE]  empty  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.lastIndexOf(''');  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.lastIndexOf(''');	  int    pos    =    stack.indexOf(''');    	non-compiled	[CE]  empty  character  literal	120	None	replace
535	[BUG]  [BUGGY]  int  pos  =  stack.indexOf(''',  peekedLong);  [CE]  empty  character  literal  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.indexOf(''',  peekedLong);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.indexOf(''',  peekedLong);	  int    pos    =    stack.indexOf(''');    	non-compiled	[CE]  empty  character  literal	120	None	replace
536	[BUG]  [BUGGY]  int  pos  =  stack.indexOf(''',  peekedString);  [CE]  empty  character  literal  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.indexOf(''',  peekedString);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.indexOf(''',  peekedString);	  int    pos    =    stack.indexOf(''');    	non-compiled	[CE]  empty  character  literal	120	None	replace
537	[BUG]  [BUGGY]  int  pos  =  pathIndices.indexOf(''');  [CE]  empty  character  literal  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  pathIndices.indexOf(''');  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  pathIndices.indexOf(''');	  int    pos    =    stack.indexOf(''');    	non-compiled	[CE]  empty  character  literal	120	None	replace
538	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peeked[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peeked[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peeked[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	95	None	replace
539	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  while(isLiteral((    char)c))    {    peekStack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	101	None	replace
540	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  peekStack[pos  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  peekStack[pos  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  peekStack[pos  -  1]  =  JsonScope.NONEMPTY_LONG;	  while(isLiteral((    char)c))    {    peekStack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	101	None	replace
541	[BUG]  [BUGGY]  while(isLenient((  char)c))  {  peekStack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c))  {  peekStack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c))  {  peekStack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  while(isLiteral((    char)c))    {    peekStack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	101	None	replace
542	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  peekStack[peekStack.length  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  peekStack[peekStack.length  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  peekStack[peekStack.length  -  1]  =  JsonScope.NONEMPTY_LONG;	  while(isLiteral((    char)c))    {    peekStack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	101	None	replace
543	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(isLiteral((  char)c))  {  return  peeked;  }  [CE]  empty  character  literal  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(isLiteral((  char)c))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  '')  {  if(isLiteral((  char)c))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLiteral((    char)    c))    {    return    peeked;    }    	non-compiled	[CE]  empty  character  literal	173	None	replace
544	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(isLiteral((  char)c))  {  return  peeked;  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.')  {  if(isLiteral((  char)c))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.')  {  if(isLiteral((  char)c))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLiteral((    char)    c))    {    return    peeked;    }    	non-compiled	[CE]  	173	None	replace
545	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  PEEKED_BUFFERED;  }  [CE]  empty  character  literal  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  PEEKED_BUFFERED;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  PEEKED_BUFFERED;  }	  if(c    ==    '')    {    if(isLiteral((    char)    c))    {    return    peeked;    }    	non-compiled	[CE]  empty  character  literal	173	None	replace
546	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isString((  char)c))  {  return  peeked;  }  [CE]  empty  character  literal  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isString((  char)c))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isString((  char)c))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLiteral((    char)    c))    {    return    peeked;    }    	non-compiled	[CE]  empty  character  literal	173	None	replace
547	[BUG]  [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	143	None	replace
548	[BUG]  [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	143	None	replace
549	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	143	None	replace
550	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  unclosed  string  literal	143	None	replace
551	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	143	None	replace
552	[BUG]  [BUGGY]  int  pos  =  stack.indexOf(''',  stackSize  -  1);  [CE]  empty  character  literal  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.indexOf(''',  stackSize  -  1);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.indexOf(''',  stackSize  -  1);	  int    pos    =    stack.indexOf(''',    stack.length    -    1);    	non-compiled	[CE]  empty  character  literal	121	None	replace
553	[BUG]  [BUGGY]  int  pos  =  stack.lastIndexOf(''',  stack.length  -  1);  [CE]  empty  character  literal  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.lastIndexOf(''',  stack.length  -  1);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.lastIndexOf(''',  stack.length  -  1);	  int    pos    =    stack.indexOf(''',    stack.length    -    1);    	non-compiled	[CE]  empty  character  literal	121	None	replace
554	[BUG]  [BUGGY]  int  pos  =  stackSize.indexOf(''',  stack.length  -  1);  [CE]  empty  character  literal  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stackSize.indexOf(''',  stack.length  -  1);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stackSize.indexOf(''',  stack.length  -  1);	  int    pos    =    stack.indexOf(''',    stack.length    -    1);    	non-compiled	[CE]  empty  character  literal	121	None	replace
555	[BUG]  [BUGGY]  int  pos  =  stack[stackSize  -  1].indexOf(''',  stack.length  -  1);  [CE]  empty  character  literal  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack[stackSize  -  1].indexOf(''',  stack.length  -  1);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack[stackSize  -  1].indexOf(''',  stack.length  -  1);	  int    pos    =    stack.indexOf(''',    stack.length    -    1);    	non-compiled	[CE]  empty  character  literal	121	None	replace
556	[BUG]  [BUGGY]  int  pos  =  stack.indexOf(''',  stack.length  -  2);  [CE]  empty  character  literal  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.indexOf(''',  stack.length  -  2);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.indexOf(''',  stack.length  -  2);	  int    pos    =    stack.indexOf(''',    stack.length    -    1);    	non-compiled	[CE]  empty  character  literal	121	None	replace
557	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent!=  JsonScope.NONEMPTY_OBJECT;  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent!=  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent!=  JsonScope.NONEMPTY_OBJECT;	  parent    ==    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  not  a  statement	25	None	replace
558	[BUG]  [BUGGY]  while(isLiteral((  char)c)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	76	None	replace
559	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	76	None	replace
560	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	76	None	replace
561	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peeked[stackSize  -  1)  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peeked[stackSize  -  1)  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peeked[stackSize  -  1)  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	76	None	replace
562	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	76	None	replace
563	[BUG]  [BUGGY]  while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  	123	None	replace
564	[BUG]  [BUGGY]  while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  	123	None	replace
565	[BUG]  [BUGGY]  while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  	123	None	replace
566	[BUG]  [BUGGY]  while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  unclosed  string  literal	123	None	replace
567	[BUG]  [BUGGY]  while(isLenient((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  	123	None	replace
568	[BUG]  [BUGGY]  while(isLenient((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  	123	None	replace
569	[BUG]  [BUGGY]  while(isLenient((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  	123	None	replace
570	[BUG]  [BUGGY]  while(pos  <  stack.length)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(pos  <  stack.length)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(pos  <  stack.length)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	169	None	replace
571	[BUG]  [BUGGY]  while(pos  <  stack.length  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(pos  <  stack.length  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(pos  <  stack.length  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();	  if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	169	None	replace
572	[BUG]  [BUGGY]  while(pos  <  stack.length  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(pos  <  stack.length  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(pos  <  stack.length  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	169	None	replace
573	[BUG]  [BUGGY]  while(stack[pos  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[pos  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[pos  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();	  if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	169	None	replace
574	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c)||    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	133	None	replace
575	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c)||    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	133	None	replace
576	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c)||    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	133	None	replace
577	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c)||    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	133	None	replace
578	[BUG]  [BUGGY]  while(isLiteral((  char)c)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  while(isLiteral((    char)c)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	136	None	replace
579	[BUG]  [BUGGY]  while(isLiteral((  char)c)  <  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)  <  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)  <  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  while(isLiteral((    char)c)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	136	None	replace
580	[BUG]  [BUGGY]  while(isLiteral((  char)c)  {  stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)  {  stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)  {  stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  while(isLiteral((    char)c)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	136	None	replace
581	[BUG]  [BUGGY]  while(isLiteral((  char)c)  <  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  illegal  start  of  expression  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)  <  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)  <  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  while(isLiteral((    char)c)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
582	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  	140	None	replace
583	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  	140	None	replace
584	[BUG]  [BUGGY]  while(c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  	140	None	replace
585	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  throw  syntaxError( "Expected  name ");  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  throw  syntaxError( "Expected  name ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  ':')  {  throw  syntaxError( "Expected  name ");  }	  if(c    ==    '.'    ||    c    ==    ':')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	154	None	replace
586	[BUG]  [BUGGY]  if(c  ==  '.')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    '.'    ||    c    ==    ':')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	154	None	replace
587	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name. ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name. ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  ':')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name. ");  }	  if(c    ==    '.'    ||    c    ==    ':')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	154	None	replace
588	[BUG]  [BUGGY]  while(c  ==  '.'  &&  c  ==  ',')  {  checkLenient();  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c  ==  '.'  &&  c  ==  ',')  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  ==  '.'  &&  c  ==  ',')  {  checkLenient();	  if(c    ==    '.'    ||    c    ==    ',')    {    checkLenient();    }    	non-compiled	[CE]  	107	None	replace
589	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  ',')  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c!=  '.'  ||  c  ==  ',')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c!=  '.'  ||  c  ==  ',')  {  checkLenient();  }	  if(c    ==    '.'    ||    c    ==    ',')    {    checkLenient();    }    	non-compiled	[CE]  	107	None	replace
590	[BUG]  [BUGGY]  if(c  ==  '.'  &&  c  ==  ',')  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  &&  c  ==  ',')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  &&  c  ==  ',')  {  checkLenient();  }	  if(c    ==    '.'    ||    c    ==    ',')    {    checkLenient();    }    	non-compiled	[CE]  	107	None	replace
591	[BUG]  [BUGGY]  parent  ==  '.'  ||  c  ==  ',')  {  checkLenient();  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  '.'  ||  c  ==  ',')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  '.'  ||  c  ==  ',')  {  checkLenient();  }	  if(c    ==    '.'    ||    c    ==    ',')    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	107	None	replace
592	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    	non-compiled	[CE]  	104	None	replace
593	[BUG]  [BUGGY]  while(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    	non-compiled	[CE]  	104	None	replace
594	[BUG]  [BUGGY]  while(isLenient((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    	non-compiled	[CE]  	104	None	replace
595	[BUG]  [BUGGY]  while(stack.length  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    >>    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	92	None	replace
596	[BUG]  [BUGGY]  while(stack.length  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    >>    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	92	None	replace
597	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING;  checkLenient();  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int[]  pathIndices  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING;  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING;  checkLenient();	  int[]    pathIndices    =    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_STRING;    checkLenient();    	non-compiled	[CE]  	64	None	replace
598	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[peekStack.length  -  1]  {  JsonScope.NONEMPTY_STRING;  checkLenient();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int[]  pathIndices  =  stack[peekStack.length  -  1]  {  JsonScope.NONEMPTY_STRING;  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[peekStack.length  -  1]  {  JsonScope.NONEMPTY_STRING;  checkLenient();	  int[]    pathIndices    =    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_STRING;    checkLenient();    	non-compiled	[CE]  	64	None	replace
599	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[peekStackSize  -  1]  {  JsonScope.NONEMPTY_STRING;  checkLenient();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int[]  pathIndices  =  stack[peekStackSize  -  1]  {  JsonScope.NONEMPTY_STRING;  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[peekStackSize  -  1]  {  JsonScope.NONEMPTY_STRING;  checkLenient();	  int[]    pathIndices    =    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_STRING;    checkLenient();    	non-compiled	[CE]  	64	None	replace
600	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_STRING;  checkLenient();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int[]  pathIndices  =  stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_STRING;  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_STRING;  checkLenient();	  int[]    pathIndices    =    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_STRING;    checkLenient();    	non-compiled	[CE]  	64	None	replace
601	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING;  checkLenient();  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int[]  pathIndices  =  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING;  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING;  checkLenient();	  int[]    pathIndices    =    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_STRING;    checkLenient();    	non-compiled	[CE]  	64	None	replace
602	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[pathNames.length  -  1]  {  JsonScope.NONEMPTY_STRING;  checkLenient();  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int[]  pathIndices  =  stack[pathNames.length  -  1]  {  JsonScope.NONEMPTY_STRING;  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[pathNames.length  -  1]  {  JsonScope.NONEMPTY_STRING;  checkLenient();	  int[]    pathIndices    =    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_STRING;    checkLenient();    	non-compiled	[CE]  	64	None	replace
603	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG  ||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG  ||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_LONG  ||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	156	None	replace
604	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	156	None	replace
605	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_LONG  ||  parent  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_LONG  ||  parent  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_LONG  ||  parent  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(c    ==    JsonScope.NONEMPTY_LONG    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	156	None	replace
606	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_LONG  ||  parent  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_LONG  ||  parent  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_LONG  ||  parent  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  if(c    ==    JsonScope.NONEMPTY_LONG    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	156	None	replace
607	[BUG]  [BUGGY]  while(isLiteral((  char)c)||  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)||  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)||  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(isLiteral((    char)c))    {    if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	105	None	replace
608	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	131	None	replace
609	[BUG]  [BUGGY]  parent  ==  ((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  ((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  ((  char)c)||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	131	None	replace
610	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	131	None	replace
611	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	131	None	replace
612	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  if(peekStack!=  JSONScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  if(peekStack!=  JSONScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  if(peekStack!=  JSONScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	131	None	replace
613	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	131	None	replace
614	[BUG]  [BUGGY]  while(isLiteral((  char)c)  ||  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)  ||  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)  ||  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	102	None	replace
615	[BUG]  [BUGGY]  while(isLenient((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	102	None	replace
616	[BUG]  [BUGGY]  while(stack.length!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	11	None	replace
617	[BUG]  [BUGGY]  while(stack.length  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	11	None	replace
618	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	11	None	replace
619	[BUG]  [BUGGY]  while(stack.length  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	11	None	replace
620	[BUG]  [BUGGY]  while(stackTop!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stackTop!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stackTop!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	11	None	replace
621	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	34	None	replace
622	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_STRING)  {  checkLenient();	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	34	None	replace
623	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  empty  character  literal	134	None	replace
624	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  empty  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  empty  character  literal	134	None	replace
625	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  [CE]  empty  character  literal  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  empty  character  literal	134	None	replace
626	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Exp  [CE]  empty  character  literal  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Exp  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Exp	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  empty  character  literal	134	None	replace
627	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  =='<  ')  {  checkLenient();  }  [CE]  unclosed  character  literal  [FE]            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ':'  ||  c  =='<  ')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ':'  ||  c  =='<  ')  {  checkLenient();  }	  if(c    ==    ':')    {    checkLenient();    }    	non-compiled	[CE]  unclosed  character  literal	149	None	replace
628	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ':'  ||  c  ==  '')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ':'  ||  c  ==  '')  {  checkLenient();  }	  if(c    ==    ':')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	149	None	replace
629	[BUG]  [BUGGY]  while(c  ==  ':')  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c  ==  ':')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  ==  ':')  {  checkLenient();  }	  if(c    ==    ':')    {    checkLenient();    }    	non-compiled	[CE]  	149	None	replace
630	[BUG]  [BUGGY]  while(c!=  ''')  {  checkLenient();  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c!=  ''')  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c!=  ''')  {  checkLenient();	  while(c    ==    ''')    {    checkLenient();    	non-compiled	[CE]  empty  character  literal	70	None	replace
631	[BUG]  [BUGGY]  while(c  >=  ''')  {  checkLenient();  [CE]  empty  character  literal  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c  >=  ''')  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  >=  ''')  {  checkLenient();	  while(c    ==    ''')    {    checkLenient();    	non-compiled	[CE]  empty  character  literal	70	None	replace
632	[BUG]  [BUGGY]  while(c  ==  '.')  {  checkLenient();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c  ==  '.')  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  ==  '.')  {  checkLenient();	  while(c    ==    ''')    {    checkLenient();    	non-compiled	[CE]  	70	None	replace
633	[BUG]  [BUGGY]  while(c  <  ''')  {  checkLenient();  [CE]  empty  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c  <  ''')  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  <  ''')  {  checkLenient();	  while(c    ==    ''')    {    checkLenient();    	non-compiled	[CE]  empty  character  literal	70	None	replace
634	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	93	None	replace
635	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	93	None	replace
636	[BUG]  [BUGGY]  while(stack.length  -  1  <  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length  -  1  <  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length  -  1  <  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	93	None	replace
637	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	93	None	replace
638	[BUG]  [BUGGY]  while(pathIndices[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(pathIndices[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(pathIndices[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	8	None	replace
639	[BUG]  [BUGGY]  while(stack[peekStack  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[peekStack  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[peekStack  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	40	None	replace
640	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(isLiteral((    char)c)    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	74	None	replace
641	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(isLiteral((    char)c)    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	74	None	replace
642	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(isLiteral((    char)c)    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	74	None	replace
643	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_BLOCK)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_BLOCK)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_BLOCK)  {  checkLenient();  }	  if(isLiteral((    char)c)    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	74	None	replace
644	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_BLOCK)  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_BLOCK)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  peekStack  ==  JsonScope.NONEMPTY_BLOCK)  {  checkLenient();  }	  if(isLiteral((    char)c)    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	74	None	replace
645	[BUG]  [BUGGY]  peer  ==  JsonScope.NONEMPTY_OBJECT;  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer  ==  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer  ==  JsonScope.NONEMPTY_OBJECT;	  peer!=    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  not  a  statement	175	None	replace
646	[BUG]  [BUGGY]  peek!=  JsonScope.NONEMPTY_OBJECT;  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peek!=  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peek!=  JsonScope.NONEMPTY_OBJECT;	  peer!=    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  not  a  statement	175	None	replace
647	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_DOUBLE_QUOTED_NAME;  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_DOUBLE_QUOTED_NAME;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_DOUBLE_QUOTED_NAME;	  peer!=    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  not  a  statement	175	None	replace
648	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_QUOTED_NAME;  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_QUOTED_NAME;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_QUOTED_NAME;	  peer!=    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  not  a  statement	175	None	replace
649	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;	  peer!=    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  not  a  statement	175	None	replace
650	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_ARRAY;  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_ARRAY;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_ARRAY;	  peer!=    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  not  a  statement	175	None	replace
651	[BUG]  [BUGGY]  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;	  while(stack.length()    ==    0)    {    stack[stackSize    -    1]    =    JsonScope.UNQUOTED_NAME;    	non-compiled	[CE]  	83	None	replace
652	[BUG]  [BUGGY]  while(stack.length()  >  0)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  >  0)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  >  0)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;	  while(stack.length()    ==    0)    {    stack[stackSize    -    1]    =    JsonScope.UNQUOTED_NAME;    	non-compiled	[CE]  	83	None	replace
653	[BUG]  [BUGGY]  Stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;	  while(stack.length()    ==    0)    {    stack[stackSize    -    1]    =    JsonScope.UNQUOTED_NAME;    	non-compiled	[CE]  	83	None	replace
654	[BUG]  [BUGGY]  while(stack.length()  ==  1)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  ==  1)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  ==  1)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;	  while(stack.length()    ==    0)    {    stack[stackSize    -    1]    =    JsonScope.UNQUOTED_NAME;    	non-compiled	[CE]  	83	None	replace
655	[BUG]  [BUGGY]  while(stack.length()  ==  2)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  ==  2)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  ==  2)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;	  while(stack.length()    ==    0)    {    stack[stackSize    -    1]    =    JsonScope.UNQUOTED_NAME;    	non-compiled	[CE]  	83	None	replace
656	[BUG]  [BUGGY]  int  stackSize  =  stack[pathIndices.length  -  1];  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stackSize  =  stack[pathIndices.length  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stackSize  =  stack[pathIndices.length  -  1];	  int    stackSize    =    stack[stackSize    -    1];    	non-compiled	[CE]  	32	None	replace
657	[BUG]  [BUGGY]  int  stackSize  =  pathIndices[stackSize  -  1];  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stackSize  =  pathIndices[stackSize  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stackSize  =  pathIndices[stackSize  -  1];	  int    stackSize    =    stack[stackSize    -    1];    	non-compiled	[CE]  	32	None	replace
658	[BUG]  [BUGGY]  if(isLenient((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c)||    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	86	None	replace
659	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c)||    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	86	None	replace
660	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c)  ||  stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c)  ||  stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c)||    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	86	None	replace
661	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	114	None	replace
662	[BUG]  [BUGGY]  while(isLenient((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	114	None	replace
663	[BUG]  [BUGGY]  while(isLong((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLong((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLong((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	114	None	replace
664	[BUG]  [BUGGY]  if(isLenient((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c)||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	96	None	replace
665	[BUG]  [BUGGY]  pied((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pied((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pied((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c)||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	96	None	replace
666	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c)||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	96	None	replace
667	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c)||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	96	None	replace
668	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	93	None	replace
669	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	93	None	replace
670	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	93	None	replace
671	[BUG]  [BUGGY]  while(isLenient((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  while(isLiteral((    char)c)&&    peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	103	None	replace
672	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [CE]  empty  character  literal  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLenient((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    PEEKED_DOUBLE_QUOTED_NAME;    }    	non-compiled	[CE]  empty  character  literal	170	None	replace
673	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [CE]  empty  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    PEEKED_DOUBLE_QUOTED_NAME;    }    	non-compiled	[CE]  empty  character  literal	170	None	replace
674	[BUG]  [BUGGY]  parent  ==  ((  char)c)  {  if(isLenient((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  ((  char)c)  {  if(isLenient((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  ((  char)c)  {  if(isLenient((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    PEEKED_DOUBLE_QUOTED_NAME;    }    	non-compiled	[CE]  not  a  statement	170	None	replace
675	[BUG]  [BUGGY]  if(c  ==  '')  {  if(isLiteral((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [CE]  empty  character  literal  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '')  {  if(isLiteral((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '')  {  if(isLiteral((  char)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    PEEKED_DOUBLE_QUOTED_NAME;    }    	non-compiled	[CE]  empty  character  literal	170	None	replace
676	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLenient((  int)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [CE]  empty  character  literal  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLenient((  int)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLenient((  int)c))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    PEEKED_DOUBLE_QUOTED_NAME;    }    	non-compiled	[CE]  empty  character  literal	170	None	replace
677	[BUG]  [BUGGY]  while(peekStack  <  =  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  <  =  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  <  =  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
678	[BUG]  [BUGGY]  int  pos  =  stack.getLength();  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.getLength();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.getLength();	  int    pos    =    stack.size();    	non-compiled	[CE]  	50	None	replace
679	[BUG]  [BUGGY]  while(stackSize!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stackSize!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stackSize!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  while(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    	non-compiled	[CE]  	4	None	replace
680	[BUG]  [BUGGY]  while(stack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  while(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    	non-compiled	[CE]  	4	None	replace
681	[BUG]  [BUGGY]  while(peekStack  >=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  >=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  >=  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  while(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    	non-compiled	[CE]  	4	None	replace
682	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	141	None	replace
683	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  unclosed  string  literal	141	None	replace
684	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	141	None	replace
685	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	141	None	replace
686	[BUG]  [BUGGY]  while(isString((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isString((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isString((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  while(isLiteral((    char)c))    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	135	None	replace
687	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  stack[0]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  stack[0]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  stack[0]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  while(isLiteral((    char)c))    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	135	None	replace
688	[BUG]  [BUGGY]  int  pos  =  pathIndices.size();  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  pathIndices.size();  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  pathIndices.size();  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	44	None	replace
689	[BUG]  [BUGGY]  int  pos  =  pathIndices[stackSize  -  1];  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  pathIndices[stackSize  -  1];  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  pathIndices[stackSize  -  1];  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	44	None	replace
690	[BUG]  [BUGGY]  int  pos  =  pathIndices[stackSize  -  1];  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  pathIndices[stackSize  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  pathIndices[stackSize  -  1];	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	44	None	replace
691	[BUG]  [BUGGY]  int  pos  =  stack.length  -  1;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.length  -  1;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.length  -  1;	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	44	None	replace
692	[BUG]  [BUGGY]  int  c  =(int)Math.log(pathNames[stackSize  -  1]);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =(int)Math.log(pathNames[stackSize  -  1]);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =(int)Math.log(pathNames[stackSize  -  1]);	  int    c    =(int)Math.floor(peekedString,    pathNames[stackSize    -    1]);    	non-compiled	[CE]  	51	None	replace
693	[BUG]  [BUGGY]  pied((  char)c)  ||  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pied((  char)c)  ||  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pied((  char)c)  ||  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c)||    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	133	None	replace
694	[BUG]  [BUGGY]  pied((  char)c)  ||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pied((  char)c)  ||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pied((  char)c)  ||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c)||    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	133	None	replace
695	[BUG]  [BUGGY]  pied((  char)c)  ||  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pied((  char)c)  ||  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pied((  char)c)  ||  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c)||    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	133	None	replace
696	[BUG]  [BUGGY]  pied((  char)c)  ||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pied((  char)c)  ||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pied((  char)c)  ||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c)||    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	133	None	replace
697	[BUG]  [BUGGY]  while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	21	None	replace
698	[BUG]  [BUGGY]  while(stack[0]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[0]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[0]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	21	None	replace
699	[BUG]  [BUGGY]  while(peekStack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	21	None	replace
700	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	165	None	replace
701	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c)||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c)||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	165	None	replace
702	[BUG]  [BUGGY]  if(c  ==  ''')  {  peer!=  null  &&  isLiteral((  char)c))  {  checkLenient();  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  peer!=  null  &&  isLiteral((  char)c))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  peer!=  null  &&  isLiteral((  char)c))  {  checkLenient();  }	  peer!=    null    &&    isLiteral((    char)c))    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  empty  character  literal	112	None	replace
703	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_BUFFERED_OBJECT;    }    	non-compiled	[CE]  	183	None	replace
704	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED_OBJECT;  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED_OBJECT;  }	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_BUFFERED_OBJECT;    }    	non-compiled	[CE]  	183	None	replace
705	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED_OBJECT;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED_OBJECT;  }	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_BUFFERED_OBJECT;    }    	non-compiled	[CE]  	183	None	replace
706	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peekStack  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peekStack  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peekStack  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	117	None	replace
707	[BUG]  [BUGGY]  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	176	None	replace
708	[BUG]  [BUGGY]  int  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	176	None	replace
709	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  2]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  2]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  2]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	176	None	replace
710	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  '')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  '')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  empty  character  literal	41	None	replace
711	[BUG]  [BUGGY]  PendInt(stack.length()  -  1)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  PendInt(stack.length()  -  1)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	PendInt(stack.length()  -  1)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  pendInt(stack.length()    -    1)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	16	None	replace
712	[BUG]  [BUGGY]  while(isLenient((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	99	None	replace
713	[BUG]  [BUGGY]  while(isLong((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLong((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLong((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	99	None	replace
714	[BUG]  [BUGGY]  while(isLong((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLong((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLong((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	99	None	replace
715	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  '-')  {  checkLenient();  }	  if(c    ==    '.'    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  	108	None	replace
716	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  '-')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  '-')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  '-')  {  checkLenient();  }	  if(c!=    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	28	None	replace
717	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  '.')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  '.')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  '.')  {  checkLenient();  }	  if(c!=    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	28	None	replace
718	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	124	None	replace
719	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)ch))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)ch))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)ch))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	124	None	replace
720	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	124	None	replace
721	[BUG]  [BUGGY]  parent  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    ''')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  empty  character  literal	145	None	replace
722	[BUG]  [BUGGY]  if(c  ==  '')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    ''')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  empty  character  literal	145	None	replace
723	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  	164	None	replace
724	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  	164	None	replace
725	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  	164	None	replace
726	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  	164	None	replace
727	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  unclosed  string  literal	164	None	replace
728	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_STRING  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	156	None	replace
729	[BUG]  [BUGGY]  if(c  ==  '')  {  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_DOUBLE_QUOTED_NAME;  }  [CE]  empty  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '')  {  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_DOUBLE_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '')  {  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_DOUBLE_QUOTED_NAME;  }	  if(c    ==    '')    {    if(isLiteral((    char)    c))    {    return    peeked    =    PEEKED_BUFFERED;    }    	non-compiled	[CE]  empty  character  literal	171	None	replace
730	[BUG]  [BUGGY]  peer!=  null  &&  isLiteral((  char)c))  {  return  peeked  =  PEEKED_BUFFERED;  }  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  null  &&  isLiteral((  char)c))  {  return  peeked  =  PEEKED_BUFFERED;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  null  &&  isLiteral((  char)c))  {  return  peeked  =  PEEKED_BUFFERED;  }	  if(c    ==    '')    {    if(isLiteral((    char)    c))    {    return    peeked    =    PEEKED_BUFFERED;    }    	non-compiled	[CE]  not  a  statement	171	None	replace
731	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  [CE]  empty  character  literal  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }	  if(c    ==    '')    {    if(isLiteral((    char)    c))    {    return    peeked    =    PEEKED_BUFFERED;    }    	non-compiled	[CE]  empty  character  literal	171	None	replace
732	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_BOOLEAN_QUOTED;  }  [CE]  empty  character  literal  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_BOOLEAN_QUOTED;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_BOOLEAN_QUOTED;  }	  if(c    ==    '')    {    if(isLiteral((    char)    c))    {    return    peeked    =    PEEKED_BUFFERED;    }    	non-compiled	[CE]  empty  character  literal	171	None	replace
733	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  not  a  statement  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	127	None	replace
734	[BUG]  [BUGGY]  while(pos!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  not  a  statement  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(pos!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(pos!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	127	None	replace
735	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	127	None	replace
736	[BUG]  [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	127	None	replace
737	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_ARRAY)    {    checkLenient();    }    	non-compiled	[CE]  	106	None	replace
738	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peekStack  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c)||  peekStack  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c)||  peekStack  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_ARRAY)    {    checkLenient();    }    	non-compiled	[CE]  	106	None	replace
739	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_ARRAY)    {    checkLenient();    }    	non-compiled	[CE]  	106	None	replace
740	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	76	None	replace
741	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	76	None	replace
742	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	76	None	replace
743	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	76	None	replace
744	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack[stackSize  -  1)  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack[stackSize  -  1)  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack[stackSize  -  1)  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	76	None	replace
745	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	13	None	replace
746	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  checkLenient();  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	13	None	replace
747	[BUG]  [BUGGY]  luate(pathNames.length  -  1))  {  checkLenient();  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  luate(pathNames.length  -  1))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	luate(pathNames.length  -  1))  {  checkLenient();  }	  luate(stack.length()    -    1))    {    checkLenient();    }    	non-compiled	[CE]  	61	None	replace
748	[BUG]  [BUGGY]  validate(stack.length()))  {  checkLenient();  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  validate(stack.length()))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	validate(stack.length()))  {  checkLenient();  }	  luate(stack.length()    -    1))    {    checkLenient();    }    	non-compiled	[CE]  	61	None	replace
749	[BUG]  [BUGGY]  luate(paths.length  -  1))  {  checkLenient();  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  luate(paths.length  -  1))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	luate(paths.length  -  1))  {  checkLenient();  }	  luate(stack.length()    -    1))    {    checkLenient();    }    	non-compiled	[CE]  	61	None	replace
750	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_STRING;  checkLenient();  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int[]  pathIndices  =  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_STRING;  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_STRING;  checkLenient();	  int[]    pathIndices    =    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_STRING;    checkLenient();    	non-compiled	[CE]  	64	None	replace
751	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[pathNames.length  -  1]  ==  JsonScope.NONEMPTY_STRING;  checkLenient();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int[]  pathIndices  =  stack[pathNames.length  -  1]  ==  JsonScope.NONEMPTY_STRING;  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[pathNames.length  -  1]  ==  JsonScope.NONEMPTY_STRING;  checkLenient();	  int[]    pathIndices    =    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_STRING;    checkLenient();    	non-compiled	[CE]  	64	None	replace
752	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[stack.length  -  1]  ==  JsonScope.NONEMPTY_STRING;  checkLenient();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int[]  pathIndices  =  stack[stack.length  -  1]  ==  JsonScope.NONEMPTY_STRING;  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[stack.length  -  1]  ==  JsonScope.NONEMPTY_STRING;  checkLenient();	  int[]    pathIndices    =    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_STRING;    checkLenient();    	non-compiled	[CE]  	64	None	replace
753	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[pathNames  -  1]  ==  JsonScope.NONEMPTY_STRING;  checkLenient();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int[]  pathIndices  =  stack[pathNames  -  1]  ==  JsonScope.NONEMPTY_STRING;  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[pathNames  -  1]  ==  JsonScope.NONEMPTY_STRING;  checkLenient();	  int[]    pathIndices    =    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_STRING;    checkLenient();    	non-compiled	[CE]  	64	None	replace
754	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	143	None	replace
755	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	143	None	replace
756	[BUG]  [BUGGY]  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	143	None	replace
757	[BUG]  [BUGGY]  while(stack[0]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[0]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[0]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	17	None	replace
758	[BUG]  [BUGGY]  parent  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    '')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  empty  character  literal	113	None	replace
759	[BUG]  [BUGGY]  while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  	132	None	replace
760	[BUG]  [BUGGY]  while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  	132	None	replace
761	[BUG]  [BUGGY]  while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  unclosed  string  literal	132	None	replace
762	[BUG]  [BUGGY]  while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  	132	None	replace
763	[BUG]  [BUGGY]  while(isLenient((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  	132	None	replace
764	[BUG]  [BUGGY]  if(isLenient((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c)||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	87	None	replace
765	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c)||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	87	None	replace
766	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c)||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	87	None	replace
767	[BUG]  [BUGGY]  Pendency(stack.length()  -  1)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Pendency(stack.length()  -  1)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Pendency(stack.length()  -  1)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  pendency(stack.length()    -    1)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	15	None	replace
768	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(peekStack!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	63	None	replace
769	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c)||  peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(peekStack!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	63	None	replace
770	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(peekStack!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	63	None	replace
771	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c)||    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	72	None	replace
772	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(isLiteral((    char)c)||    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	72	None	replace
773	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c)    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	74	None	replace
774	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c)    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	74	None	replace
775	[BUG]  [BUGGY]  if(isLenient((  char)c)  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c)  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c)  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c)    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	74	None	replace
776	[BUG]  [BUGGY]  if(isLenient((  char)c)  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c)  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c)  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c)    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	74	None	replace
777	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	147	None	replace
778	[BUG]  [BUGGY]  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	147	None	replace
779	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	147	None	replace
780	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  unclosed  string  literal	147	None	replace
781	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  ''')  {  return  checkLenient();  }  [CE]  empty  character  literal  [FE]            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  ''')  {  return  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  ''')  {  return  checkLenient();  }	  if(c    ==    '''    ||    c    ==    ''')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	66	None	replace
782	[BUG]  [BUGGY]  int  pos  =  stack[pathIndices.length  -  1];  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack[pathIndices.length  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack[pathIndices.length  -  1];	  int    pos    =    stack[stackSize    -    1];    	non-compiled	[CE]  	18	None	replace
783	[BUG]  [BUGGY]  int  pos  =  stack[pathNames.length  -  1];  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack[pathNames.length  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack[pathNames.length  -  1];	  int    pos    =    stack[stackSize    -    1];    	non-compiled	[CE]  	18	None	replace
784	[BUG]  [BUGGY]  while(stack.length()  >  0)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  >  0)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  >  0)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(stack.length()    >    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	14	None	replace
785	[BUG]  [BUGGY]  while(stack.length()  >  0)  {  stack[peekStack  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  >  0)  {  stack[peekStack  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  >  0)  {  stack[peekStack  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(stack.length()    >    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	14	None	replace
786	[BUG]  [BUGGY]  Integer  pos  =  stack[stackSize  -  1].intValue();  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  pos  =  stack[stackSize  -  1].intValue();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  pos  =  stack[stackSize  -  1].intValue();	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	131	None	replace
787	[BUG]  [BUGGY]  parent  =(parent  ==  null)?  null  :  parent.parent;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  =(parent  ==  null)?  null  :  parent.parent;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  =(parent  ==  null)?  null  :  parent.parent;	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	131	None	replace
788	[BUG]  [BUGGY]  Integer  pos  =  stack[stackSize  -  1].getIntValue();  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  pos  =  stack[stackSize  -  1].getIntValue();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  pos  =  stack[stackSize  -  1].getIntValue();	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	131	None	replace
789	[BUG]  [BUGGY]  Integer  pos  =  stack.size();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  pos  =  stack.size();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  pos  =  stack.size();	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	131	None	replace
790	[BUG]  [BUGGY]  parent  =  parent.getParent();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  =  parent.getParent();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  =  parent.getParent();	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	131	None	replace
791	[BUG]  [BUGGY]  parent  =(parent  ==  null)?  null  :  parent.getParent();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  =(parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  =(parent  ==  null)?  null  :  parent.getParent();	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	131	None	replace
792	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peekStack  >=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peekStack  >=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peekStack  >=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	102	None	replace
793	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(stack!=  null)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(stack!=  null)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(stack!=  null)  {  checkLenient();  }	  if(stack!=    null)    {    checkLenient();    }    	non-compiled	[CE]  	110	None	replace
794	[BUG]  [BUGGY]  while(isLiteral((  char)c)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	138	None	replace
795	[BUG]  [BUGGY]  while(isLiteral((  char)c)  <  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  illegal  start  of  expression  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)  <  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)  <  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
796	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	91	None	replace
797	[BUG]  [BUGGY]  while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	91	None	replace
798	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[pos    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	151	None	replace
799	[BUG]  [BUGGY]  pos  =  stack[stackSize  -  1]  -  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pos  =  stack[stackSize  -  1]  -  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pos  =  stack[stackSize  -  1]  -  JsonScope.NONEMPTY_OBJECT;	  if(stack[pos    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	151	None	replace
800	[BUG]  [BUGGY]  int  stack[pos  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[pos  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[pos  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  int    stack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	53	None	replace
801	[BUG]  [BUGGY]  int  stack[peekStack  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[peekStack  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[peekStack  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  int    stack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	53	None	replace
802	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  int    stack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	53	None	replace
803	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  <  =  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]  <  =  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  <  =  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  int    stack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	53	None	replace
804	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  int    stack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	53	None	replace
805	[BUG]  [BUGGY]  Integer  c  =  stack[pathIndices.length  -  1];  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  c  =  stack[pathIndices.length  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  c  =  stack[pathIndices.length  -  1];	  Integer    c    =    stack[stackSize    -    1];    	non-compiled	[CE]  	119	None	replace
806	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  '')  {  checkLenient();  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  '')  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  '')  {  checkLenient();	  parent    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    ''')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  empty  character  literal	155	None	replace
807	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  '')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  '')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  '')  {  checkLenient();  }	  parent    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    ''')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  empty  character  literal	155	None	replace
808	[BUG]  [BUGGY]  int  c  =  stack[pathIndices.length  -  1];  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =  stack[pathIndices.length  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =  stack[pathIndices.length  -  1];	  int    c    =    stack[stackSize    -    1];    	non-compiled	[CE]  	46	None	replace
809	[BUG]  [BUGGY]  int  c  =  stack[peekStack  -  1];  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =  stack[peekStack  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =  stack[peekStack  -  1];	  int    c    =    stack[stackSize    -    1];    	non-compiled	[CE]  	46	None	replace
810	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	90	None	replace
811	[BUG]  [BUGGY]  while(stack.length()  >=  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  >=  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  >=  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  while(stack.length()    >=    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	85	None	replace
812	[BUG]  [BUGGY]  while(stack.length()!=  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()!=  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()!=  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  while(stack.length()    >=    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	85	None	replace
813	[BUG]  [BUGGY]  while(stack.length()  >=  2)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  >=  2)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  >=  2)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  while(stack.length()    >=    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	85	None	replace
814	[BUG]  [BUGGY]  Pendency(stack.length()  -  1,  stack.length())  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Pendency(stack.length()  -  1,  stack.length())  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Pendency(stack.length()  -  1,  stack.length())  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  pendency(stack.length()    -    1,    stack.length())    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	158	None	replace
815	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_BLOCK  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_BLOCK  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_BLOCK  ||  c  ==  JsonScope.NONEMPTY_BLOCK)  {  checkLenient();  }	  if(c    ==    JsonScope.NONEMPTY_LONG    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	157	None	replace
816	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_DECIMAL  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_DECIMAL  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_DECIMAL  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(c    ==    JsonScope.NONEMPTY_LONG    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	157	None	replace
817	[BUG]  [BUGGY]  int  stack[size  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[size  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[size  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	31	None	replace
818	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  	153	None	replace
819	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  not  a  statement	153	None	replace
820	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  	153	None	replace
821	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  	153	None	replace
822	[BUG]  [BUGGY]  while(stack.length()  <  1)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  <  1)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  <  1)  {  checkLenient();  }	  while(stack.length()    <    =    0)    {    checkLenient();    }    	non-compiled	[CE]  	160	None	replace
823	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  '')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  empty  character  literal	134	None	replace
824	[BUG]  [BUGGY]  while(isLenient((  char)c)||  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c)||  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c)||  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  	123	None	replace
825	[BUG]  [BUGGY]  while(isLenient((  char)c)||  peekStack!=  JsonScope.NONEMPTY_LONG)  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c)||  peekStack!=  JsonScope.NONEMPTY_LONG)  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c)||  peekStack!=  JsonScope.NONEMPTY_LONG)  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  	123	None	replace
826	[BUG]  [BUGGY]  if(c  ==  ']'  ||  c  ==  '[')  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ']'  ||  c  ==  '[')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ']'  ||  c  ==  '[')  {  checkLenient();  }	  if(c    ==    '['    ||    c    ==    ']')    {    checkLenient();    }    	non-compiled	[CE]  	179	None	replace
827	[BUG]  [BUGGY]  if(c  ==  ']')  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ']')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ']')  {  checkLenient();  }	  if(c    ==    '['    ||    c    ==    ']')    {    checkLenient();    }    	non-compiled	[CE]  	179	None	replace
828	[BUG]  [BUGGY]  if(c  ==  '[')  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '[')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '[')  {  checkLenient();  }	  if(c    ==    '['    ||    c    ==    ']')    {    checkLenient();    }    	non-compiled	[CE]  	179	None	replace
829	[BUG]  [BUGGY]  while(stack.length()  >  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_STRING;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  >  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_STRING;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  >  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_STRING;	  if(stack.length()    ==    1)    {    checkLenient();    }    	non-compiled	[CE]  	56	None	replace
830	[BUG]  [BUGGY]  while(stack.length()  >  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  >  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  >  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  if(stack.length()    ==    1)    {    checkLenient();    }    	non-compiled	[CE]  	56	None	replace
831	[BUG]  [BUGGY]  pendency(stack.length())  ==  checkLenient();  [CE]  not  a  statement  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pendency(stack.length())  ==  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pendency(stack.length())  ==  checkLenient();	  pendency(stack.length()    -    1)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	60	None	replace
832	[BUG]  [BUGGY]  while(stack.hasNext())  {  stack.add(stack.getValue());  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.hasNext())  {  stack.add(stack.getValue());  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.hasNext())  {  stack.add(stack.getValue());	  while(stack.hasNext())    {    stack.add(stack.next());    	non-compiled	[CE]  	159	None	replace
833	[BUG]  [BUGGY]  while(stack.hasNext())  {  stack.add(stack.next()  -  1,  peeked);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.hasNext())  {  stack.add(stack.next()  -  1,  peeked);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.hasNext())  {  stack.add(stack.next()  -  1,  peeked);	  while(stack.hasNext())    {    stack.add(stack.next());    	non-compiled	[CE]  	159	None	replace
834	[BUG]  [BUGGY]  while(stack.hasNext())  {  stack.add(stack.next()  -  1,  null);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.hasNext())  {  stack.add(stack.next()  -  1,  null);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.hasNext())  {  stack.add(stack.next()  -  1,  null);	  while(stack.hasNext())    {    stack.add(stack.next());    	non-compiled	[CE]  	159	None	replace
835	[BUG]  [BUGGY]  while(pathIndices[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(pathIndices[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(pathIndices[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	40	None	replace
836	[BUG]  [BUGGY]  if(c!=  ''')  {  if(isLiteral((  char)c))  {  return  peeked;  }  [CE]  empty  character  literal  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c!=  ''')  {  if(isLiteral((  char)c))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c!=  ''')  {  if(isLiteral((  char)c))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLiteral((    char)    c))    {    return    peeked;    }    	non-compiled	[CE]  empty  character  literal	173	None	replace
837	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  PEEKED_UNQUOTED_NAME;  }  [CE]  empty  character  literal  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  PEEKED_UNQUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  PEEKED_UNQUOTED_NAME;  }	  if(c    ==    '')    {    if(isLiteral((    char)    c))    {    return    peeked;    }    	non-compiled	[CE]  empty  character  literal	173	None	replace
838	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  empty  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  empty  character  literal	125	None	replace
839	[BUG]  [BUGGY]  int  c  =  pathIndices[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED_NAME;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =  pathIndices[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED_NAME;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =  pathIndices[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED_NAME;	  int    c    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  	47	None	replace
840	[BUG]  [BUGGY]  while(stack.length()  <  =  0)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  <  =  0)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  <  =  0)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(stack.length()    <    =    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
841	[BUG]  [BUGGY]  if(stack!=  null  ||  stack.length()  <  =  0)  {  checkLenient();  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack!=  null  ||  stack.length()  <  =  0)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack!=  null  ||  stack.length()  <  =  0)  {  checkLenient();  }	  if(stack.length()    <    =    0)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
842	[BUG]  [BUGGY]  while(c  <  =  ''')  {  checkLenient();  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c  <  =  ''')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  <  =  ''')  {  checkLenient();  }	  while(c    ==    ''')    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
843	[BUG]  [BUGGY]  while(c  ==  '''  &&  isLiteral((  char)c))  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c  ==  '''  &&  isLiteral((  char)c))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  ==  '''  &&  isLiteral((  char)c))  {  checkLenient();  }	  while(c    ==    ''')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	69	None	replace
844	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_STRING  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_STRING  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_STRING  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	142	None	replace
845	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	142	None	replace
846	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_STRING  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_STRING  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_STRING  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(peekStack!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	142	None	replace
847	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	129	None	replace
848	[BUG]  [BUGGY]  while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	129	None	replace
849	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[0]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[0]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[0]  =  JsonScope.NONEMPTY_OBJECT;	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	129	None	replace
850	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)c))  {  return  PEEKED_BUFFERED;  }  [CE]  empty  character  literal  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)c))  {  return  PEEKED_BUFFERED;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLenient((  char)c))  {  return  PEEKED_BUFFERED;  }	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    peeked;    }    	non-compiled	[CE]  empty  character  literal	174	None	replace
851	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(isLenient((  char)c))  {  return  peeked;  }  [CE]  empty  character  literal  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(isLenient((  char)c))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  '')  {  if(isLenient((  char)c))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    peeked;    }    	non-compiled	[CE]  empty  character  literal	174	None	replace
852	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)c))  {  return  PEEKED_UNQUOTED_NAME;  }  [CE]  empty  character  literal  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)c))  {  return  PEEKED_UNQUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLenient((  char)c))  {  return  PEEKED_UNQUOTED_NAME;  }	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    peeked;    }    	non-compiled	[CE]  empty  character  literal	174	None	replace
853	[BUG]  [BUGGY]  while(stack.length()  ==  0)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  ==  0)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  ==  0)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_LONG;	  while(stack.length()    ==    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	84	None	replace
854	[BUG]  [BUGGY]  while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	26	None	replace
855	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	26	None	replace
856	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	26	None	replace
857	[BUG]  [BUGGY]  while(c!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	26	None	replace
858	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(c  ==  '''  ||  c  ==  ''')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(c  ==  '''  ||  c  ==  ''')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(c  ==  '''  ||  c  ==  ''')  {  checkLenient();  }	  if(c    ==    '''    ||    c    ==    ''')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  empty  character  literal	65	None	replace
859	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked;    }    	non-compiled	[CE]  	167	None	replace
860	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  PEEKED_END_OBJECT;  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked;    }    	non-compiled	[CE]  	167	None	replace
861	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked;    }    	non-compiled	[CE]  	167	None	replace
862	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  PEEKED_BUFFERED;  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  PEEKED_BUFFERED;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  PEEKED_BUFFERED;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked;    }    	non-compiled	[CE]  	167	None	replace
863	[BUG]  [BUGGY]  while(stack.length()  <  =  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  <  =  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  <  =  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(stack.length()    >=    1)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
864	[BUG]  [BUGGY]  while(stack.length()  >=  1)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  >=  1)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  >=  1)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(stack.length()    >=    1)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	82	None	replace
865	[BUG]  [BUGGY]  if(c  ==  '''  &&  c!=  '')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  &&  c!=  '')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  &&  c!=  '')  {  checkLenient();  }	  if(c    ==    '''    &&    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	29	None	replace
866	[BUG]  [BUGGY]  if(c  ==  '''  &&  c  <  =  '')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  &&  c  <  =  '')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  &&  c  <  =  '')  {  checkLenient();  }	  if(c    ==    '''    &&    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	29	None	replace
867	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.END_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	23	None	replace
868	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	23	None	replace
869	[BUG]  [BUGGY]  while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  not  a  statement  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	128	None	replace
870	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '>')  {  checkLenient();  }  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ':'  ||  c  ==  '>')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ':'  ||  c  ==  '>')  {  checkLenient();  }	  if(c    ==    ':')    {    checkLenient();    }    	non-compiled	[CE]  	149	None	replace
871	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  ':')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  ':')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  ':')  {  checkLenient();  }	  if(c    ==    ':')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	149	None	replace
872	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_STRING)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_STRING)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_STRING)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	168	None	replace
873	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	168	None	replace
874	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_STRING  &&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_STRING  &&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_STRING  &&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	168	None	replace
875	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  not  a  statement	168	None	replace
876	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  not  a  statement  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  not  a  statement	168	None	replace
877	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_STRING  &&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_STRING  &&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_STRING  &&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	168	None	replace
878	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  ')')  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ','  ||  c  ==  ')')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ','  ||  c  ==  ')')  {  checkLenient();  }	  if(c    ==    ',')    {    checkLenient();    }    	non-compiled	[CE]  	150	None	replace
879	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  ''')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  'e'  ||  c  ==  ''')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  'e'  ||  c  ==  ''')  {  checkLenient();  }	  if(c    ==    '''    ||    c    ==    'e')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	89	None	replace
880	[BUG]  [BUGGY]  parent  =  parent.createParent(peekedString,  stack[stackSize  -  1])?  JsonScope.NONEMPTY_OBJECT  :  null;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  =  parent.createParent(peekedString,  stack[stackSize  -  1])?  JsonScope.NONEMPTY_OBJECT  :  null;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  =  parent.createParent(peekedString,  stack[stackSize  -  1])?  JsonScope.NONEMPTY_OBJECT  :  null;	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	78	None	replace
881	[BUG]  [BUGGY]  parent  =  parent.createParent(peekedString,  stack[stackSize  -  1])?  JsonScope.NONEMPTY_OBJECT  :  PEEKED_END_OBJECT;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  =  parent.createParent(peekedString,  stack[stackSize  -  1])?  JsonScope.NONEMPTY_OBJECT  :  PEEKED_END_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  =  parent.createParent(peekedString,  stack[stackSize  -  1])?  JsonScope.NONEMPTY_OBJECT  :  PEEKED_END_OBJECT;	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	78	None	replace
882	[BUG]  [BUGGY]  parent  =  parent.createParent(peekedString,  stack[stackSize  -  1])?  JsonScope.NONEMPTY_OBJECT  :  NONEMPTY_OBJECT;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  =  parent.createParent(peekedString,  stack[stackSize  -  1])?  JsonScope.NONEMPTY_OBJECT  :  NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  =  parent.createParent(peekedString,  stack[stackSize  -  1])?  JsonScope.NONEMPTY_OBJECT  :  NONEMPTY_OBJECT;	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	78	None	replace
883	[BUG]  [BUGGY]  parent  =  parent.createParent(peekedString,  stack[stackSize  -  1])?  JsonScope.NONEMPTY_OBJECT  :  Integer.MAX_VALUE;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  =  parent.createParent(peekedString,  stack[stackSize  -  1])?  JsonScope.NONEMPTY_OBJECT  :  Integer.MAX_VALUE;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  =  parent.createParent(peekedString,  stack[stackSize  -  1])?  JsonScope.NONEMPTY_OBJECT  :  Integer.MAX_VALUE;	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	78	None	replace
884	[BUG]  [BUGGY]  parent  =  parent.createParent(peekedString,  stack[stackSize  -  1])?  JsonScope.NONEMPTY_OBJECT  :  Integer.MIN_VALUE;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  =  parent.createParent(peekedString,  stack[stackSize  -  1])?  JsonScope.NONEMPTY_OBJECT  :  Integer.MIN_VALUE;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  =  parent.createParent(peekedString,  stack[stackSize  -  1])?  JsonScope.NONEMPTY_OBJECT  :  Integer.MIN_VALUE;	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	78	None	replace
885	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_LONG  ||  parent!=  JsonScope.NONEMPTY_OBJECT;  [CE]  not  a  statement  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_LONG  ||  parent!=  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_LONG  ||  parent!=  JsonScope.NONEMPTY_OBJECT;	  parent    ==    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  not  a  statement	5	None	replace
886	[BUG]  [BUGGY]  parent  =  parent.createParent(peekedString,  stack[stackSize  -  1]);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  =  parent.createParent(peekedString,  stack[stackSize  -  1]);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  =  parent.createParent(peekedString,  stack[stackSize  -  1]);	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	97	None	replace
887	[BUG]  [BUGGY]  parent  =  parent.createParent(peekedString,  stack[stackSize  -  1));  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  =  parent.createParent(peekedString,  stack[stackSize  -  1));  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  =  parent.createParent(peekedString,  stack[stackSize  -  1));	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	97	None	replace
888	[BUG]  [BUGGY]  parent  =  parent.createParent(peekedString,  pathNames[pos  -  1]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  =  parent.createParent(peekedString,  pathNames[pos  -  1]);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  =  parent.createParent(peekedString,  pathNames[pos  -  1]);	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	97	None	replace
889	[BUG]  [BUGGY]  parent  =  parent.createParent(peekedString,  stack[stackSize  -  1);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  =  parent.createParent(peekedString,  stack[stackSize  -  1);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  =  parent.createParent(peekedString,  stack[stackSize  -  1);	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	97	None	replace
890	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  :  stack[stackSize  -  1];  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  :  stack[stackSize  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_OBJECT  :  stack[stackSize  -  1];	  parent!=    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  not  a  statement	24	None	replace
891	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[peekStack  -  1];  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int[]  pathIndices  =  stack[peekStack  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[peekStack  -  1];	  int[]    pathIndices    =    stack[stackSize    -    1];    	non-compiled	[CE]  	20	None	replace
892	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[peekSize  -  1];  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int[]  pathIndices  =  stack[peekSize  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[peekSize  -  1];	  int[]    pathIndices    =    stack[stackSize    -    1];    	non-compiled	[CE]  	20	None	replace
893	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[pathNames  -  1];  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int[]  pathIndices  =  stack[pathNames  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[pathNames  -  1];	  int[]    pathIndices    =    stack[stackSize    -    1];    	non-compiled	[CE]  	20	None	replace
894	[BUG]  [BUGGY]  reader!=  JsonScope.NONEMPTY_OBJECT;  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  reader!=  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	reader!=  JsonScope.NONEMPTY_OBJECT;	  peer!=    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  not  a  statement	175	None	replace
895	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c));  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c));  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c));	  peer!=    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  not  a  statement	175	None	replace
896	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  :  stack[stackSize  -  1];  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  :  stack[stackSize  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_OBJECT  :  stack[stackSize  -  1];	  peer!=    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  not  a  statement	175	None	replace
897	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	62	None	replace
898	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peekStack  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c)||  peekStack  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c)||  peekStack  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	62	None	replace
899	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	62	None	replace
900	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING  ||  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING  ||  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_STRING  ||  peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	62	None	replace
901	[BUG]  [BUGGY]  while(pathIndices[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(pathIndices[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(pathIndices[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(stack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	10	None	replace
902	[BUG]  [BUGGY]  while(isLong((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLong((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLong((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	118	None	replace
903	[BUG]  [BUGGY]  while(isLiteral((  char)c)&&  peekStack  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)&&  peekStack  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)&&  peekStack  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	118	None	replace
904	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	2	None	replace
905	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }	  if(c    ==    '.'    ||    c    ==    ',')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	42	None	replace
906	[BUG]  [BUGGY]  int  c  =(int)Math.floor(stack[peekSize  -  1]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =(int)Math.floor(stack[peekSize  -  1]);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =(int)Math.floor(stack[peekSize  -  1]);	  int    c    =(int)Math.floor(peekStack[stackSize    -    1]);    	non-compiled	[CE]  	49	None	replace
907	[BUG]  [BUGGY]  if(c  ==  '')  {  if(isLiteral((  char)stack[pos  -  1]))  {  return  peeked;  }  [CE]  empty  character  literal  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '')  {  if(isLiteral((  char)stack[pos  -  1]))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '')  {  if(isLiteral((  char)stack[pos  -  1]))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLiteral((    char)stack[stackSize    -    1]))    {    return    peeked;    }    	non-compiled	[CE]  empty  character  literal	172	None	replace
908	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  PEEKED_BUFFERED;  }  [CE]  empty  character  literal  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  PEEKED_BUFFERED;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  PEEKED_BUFFERED;  }	  if(c    ==    '')    {    if(isLiteral((    char)stack[stackSize    -    1]))    {    return    peeked;    }    	non-compiled	[CE]  empty  character  literal	172	None	replace
909	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)stack[peekSize  -  1]))  {  return  peeked;  }  [CE]  empty  character  literal  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)stack[peekSize  -  1]))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)stack[peekSize  -  1]))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLiteral((    char)stack[stackSize    -    1]))    {    return    peeked;    }    	non-compiled	[CE]  empty  character  literal	172	None	replace
910	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  peek;  }  [CE]  empty  character  literal  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  peek;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  peek;  }	  if(c    ==    '')    {    if(isLiteral((    char)stack[stackSize    -    1]))    {    return    peeked;    }    	non-compiled	[CE]  empty  character  literal	172	None	replace
911	[BUG]  [BUGGY]  while(stack[0]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[0]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[0]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	55	None	replace
912	[BUG]  [BUGGY]  while(stack[0]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[0]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[0]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	19	None	replace
913	[BUG]  [BUGGY]  int  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	43	None	replace
914	[BUG]  [BUGGY]  int  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	43	None	replace
915	[BUG]  [BUGGY]  int  stack[size  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[size  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[size  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	43	None	replace
916	[BUG]  [BUGGY]  while(c  <  =  ''')  {  checkLenient();  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c  <  =  ''')  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  <  =  ''')  {  checkLenient();	  while(c    ==    ''')    {    checkLenient();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
917	[BUG]  [BUGGY]  while(c  ==  '''  &&  isLiteral((  char)c))  {  checkLenient();  [CE]  empty  character  literal  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c  ==  '''  &&  isLiteral((  char)c))  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  ==  '''  &&  isLiteral((  char)c))  {  checkLenient();	  while(c    ==    ''')    {    checkLenient();    	non-compiled	[CE]  empty  character  literal	70	None	replace
918	[BUG]  [BUGGY]  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  	178	None	replace
919	[BUG]  [BUGGY]  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  not  a  statement	178	None	replace
920	[BUG]  [BUGGY]  while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	130	None	replace
921	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(c!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	182	None	replace
922	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  return  peeked  =  JsonScope.NONEMPTY_OBJECT;  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  return  peeked  =  JsonScope.NONEMPTY_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  return  peeked  =  JsonScope.NONEMPTY_OBJECT;  }	  if(c!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	182	None	replace
923	[BUG]  [BUGGY]  int  stack[peekStack  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[peekStack  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[peekStack  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  int    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	52	None	replace
924	[BUG]  [BUGGY]  int  stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  int    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	52	None	replace
925	[BUG]  [BUGGY]  int  stack[pos  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[pos  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[pos  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  int    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	52	None	replace
926	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  }  [CE]  empty  character  literal  [FE]            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	75	None	replace
927	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	75	None	replace
928	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	75	None	replace
929	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	77	None	replace
930	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	77	None	replace
931	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	77	None	replace
932	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)ch))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)ch))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)ch))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	77	None	replace
933	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  }  [CE]  empty  character  literal  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	77	None	replace
934	[BUG]  [BUGGY]  Integer  pos  =  stack[pathIndices.length  -  1];  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  pos  =  stack[pathIndices.length  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  pos  =  stack[pathIndices.length  -  1];	  Integer    pos    =    stack[stackSize    -    1];    	non-compiled	[CE]  	139	None	replace
935	[BUG]  [BUGGY]  Integer  pos  =  stack[pathNames.length  -  1];  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  pos  =  stack[pathNames.length  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  pos  =  stack[pathNames.length  -  1];	  Integer    pos    =    stack[stackSize    -    1];    	non-compiled	[CE]  	139	None	replace
936	[BUG]  [BUGGY]  while(isLiteral((  char)c)  <  stack[stackSize  -  1])  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)  <  stack[stackSize  -  1])  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)  <  stack[stackSize  -  1])  {  checkLenient();  }	  while(isLiteral((    char)c)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	136	None	replace
937	[BUG]  [BUGGY]  while(isLong((  char)c)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLong((  char)c)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLong((  char)c)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  while(isLiteral((    char)c)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	136	None	replace
938	[BUG]  [BUGGY]  while(isLiteral((  char)c)  {  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)  {  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)  {  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  while(isLiteral((    char)c)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	136	None	replace
939	[BUG]  [BUGGY]  while(stack.length()  ==  0)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  ==  0)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  ==  0)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(stack.length()    ==    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	79	None	replace
940	[BUG]  [BUGGY]  while(stack.length()  ==  2)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  ==  2)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  ==  2)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(stack.length()    ==    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	79	None	replace
941	[BUG]  [BUGGY]  while(stack.length()  ==  0)  {  stack[peekStack  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  ==  0)  {  stack[peekStack  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  ==  0)  {  stack[peekStack  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(stack.length()    ==    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	79	None	replace
942	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  :  stack[stackSize  -  1];  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  :  stack[stackSize  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  :  stack[stackSize  -  1];	  parent    ==    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  not  a  statement	25	None	replace
943	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_DOUBLE_QUOTED_NAME;  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_DOUBLE_QUOTED_NAME;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_DOUBLE_QUOTED_NAME;	  parent    ==    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  not  a  statement	25	None	replace
944	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_LONG;  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_LONG;	  parent    ==    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  not  a  statement	25	None	replace
945	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_ARRAY;  [CE]  not  a  statement  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_ARRAY;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  ||  parent  ==  JsonScope.NONEMPTY_ARRAY;	  parent    ==    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  not  a  statement	25	None	replace
946	[BUG]  [BUGGY]  while(stack!=  null)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack!=  null)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack!=  null)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  if(stack    ==    null)    {    checkLenient();    }    	non-compiled	[CE]  	111	None	replace
947	[BUG]  [BUGGY]  while(stack!=  null)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack!=  null)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack!=  null)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  if(stack    ==    null)    {    checkLenient();    }    	non-compiled	[CE]  	111	None	replace
948	[BUG]  [BUGGY]  while(stack!=  null)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_ARRAY;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack!=  null)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_ARRAY;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack!=  null)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_ARRAY;	  if(stack    ==    null)    {    checkLenient();    }    	non-compiled	[CE]  	111	None	replace
949	[BUG]  [BUGGY]  while(stack!=  null)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_STRING;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack!=  null)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_STRING;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack!=  null)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_STRING;	  if(stack    ==    null)    {    checkLenient();    }    	non-compiled	[CE]  	111	None	replace
950	[BUG]  [BUGGY]  while(stackSize  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stackSize  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stackSize  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  while(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    	non-compiled	[CE]  	6	None	replace
951	[BUG]  [BUGGY]  while(pathIndices[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(pathIndices[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(pathIndices[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	9	None	replace
952	[BUG]  [BUGGY]  while(isLiteral((  char)c)  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	9	None	replace
953	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_LONG  :  stack[stackSize  -  1];  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_LONG  :  stack[stackSize  -  1];  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_LONG  :  stack[stackSize  -  1];	  parent!=    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  not  a  statement	12	None	replace
954	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_LONG  &&  isString((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name ");  }  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_LONG  &&  isString((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_LONG  &&  isString((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name ");  }	  peer!=    JsonScope.NONEMPTY_LONG    &&    isLiteral((    char)c))    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	126	None	replace
955	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	105	None	replace
956	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	105	None	replace
957	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLenient((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	105	None	replace
958	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)ch))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)ch))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)ch))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	105	None	replace
959	[BUG]  [BUGGY]  int  pos  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();	  pos    =    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	35	None	replace
960	[BUG]  [BUGGY]  pos  =  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pos  =  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pos  =  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();	  pos    =    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	35	None	replace
961	[BUG]  [BUGGY]  pos  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pos  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pos  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();	  pos    =    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	35	None	replace
962	[BUG]  [BUGGY]  int  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();	  pos    =    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	35	None	replace
963	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  	152	None	replace
964	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  	152	None	replace
965	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  not  a  statement	152	None	replace
966	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  not  a  statement	152	None	replace
967	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	146	None	replace
968	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	146	None	replace
969	[BUG]  [BUGGY]  while(peekStack  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	22	None	replace
970	[BUG]  [BUGGY]  int  stack[size  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[size  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[size  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	36	None	replace
971	[BUG]  [BUGGY]  while(stack.length()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  <  =  0)  {  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  <  =  0)  {	  while(stack.length()    <    =    0)    {    checkLenient();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
972	[BUG]  [BUGGY]  int  pos  =  stack.indexOf(''',  0);  [CE]  empty  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.indexOf(''',  0);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.indexOf(''',  0);	  int    pos    =    stack.indexOf(''');    	non-compiled	[CE]  empty  character  literal	120	None	replace
973	[BUG]  [BUGGY]  int  pos  =  stack.indexOf(''',  -1);  [CE]  empty  character  literal  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.indexOf(''',  -1);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.indexOf(''',  -1);	  int    pos    =    stack.indexOf(''');    	non-compiled	[CE]  empty  character  literal	120	None	replace
974	[BUG]  [BUGGY]  int  pos  =  stack.indexOf(''',  stackSize);  [CE]  empty  character  literal  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.indexOf(''',  stackSize);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.indexOf(''',  stackSize);	  int    pos    =    stack.indexOf(''');    	non-compiled	[CE]  empty  character  literal	120	None	replace
975	[BUG]  [BUGGY]  while(stack.length()  >=  2)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  >=  2)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  >=  2)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(stack.length()    >=    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	80	None	replace
976	[BUG]  [BUGGY]  int  stackSize  =  stack.size()  -  1;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stackSize  =  stack.size()  -  1;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stackSize  =  stack.size()  -  1;	  int    stackSize    =    stack.length();    	non-compiled	[CE]  	57	None	replace
977	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	98	None	replace
978	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	98	None	replace
979	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(stack[pos  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(stack[pos  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(stack[pos  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	98	None	replace
980	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	98	None	replace
981	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(stack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(stack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(stack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	73	None	replace
982	[BUG]  [BUGGY]  if(isLiteral((  char)c)  {  if(stack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c)  {  if(stack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c)  {  if(stack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	73	None	replace
983	[BUG]  [BUGGY]  while(pathIndices[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(pathIndices[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(pathIndices[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	39	None	replace
984	[BUG]  [BUGGY]  while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	11	None	replace
985	[BUG]  [BUGGY]  while(c!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	11	None	replace
986	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_BUFFERED_OBJECT;    }    	non-compiled	[CE]  	163	None	replace
987	[BUG]  [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED_OBJECT;  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c))  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED_OBJECT;  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_BUFFERED_OBJECT;    }    	non-compiled	[CE]  	163	None	replace
988	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED_OBJECT;  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED_OBJECT;  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_BUFFERED_OBJECT;    }    	non-compiled	[CE]  	163	None	replace
989	[BUG]  [BUGGY]  while(isLenient((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c)&&  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c)&&    peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	100	None	replace
990	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)c))  {  if(c  ==  '''  ||  c  ==  '')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)c))  {  if(c  ==  '''  ||  c  ==  '')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLenient((  char)c))  {  if(c  ==  '''  ||  c  ==  '')  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	94	None	replace
991	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(c  ==  '''  ||  c  ==  '')  {  checkLenient();  }  }  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(c  ==  '''  ||  c  ==  '')  {  checkLenient();  }  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(c  ==  '''  ||  c  ==  '')  {  checkLenient();  }  }	  if(isLiteral((    char)c))    {    if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	94	None	replace
992	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(c  ==  '''  ||  c  ==  '/')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(c  ==  '''  ||  c  ==  '/')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(c  ==  '''  ||  c  ==  '/')  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	94	None	replace
993	[BUG]  [BUGGY]  while(stack.length()  ==  0)  {  stack[pos  -  1]  =  JsonScope.UNQUOTED_NAME;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  ==  0)  {  stack[pos  -  1]  =  JsonScope.UNQUOTED_NAME;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  ==  0)  {  stack[pos  -  1]  =  JsonScope.UNQUOTED_NAME;	  while(stack.length()    ==    0)    {    stack[stackSize    -    1]    =    JsonScope.UNQUOTED_NAME;    	non-compiled	[CE]  	83	None	replace
994	[BUG]  [BUGGY]  while(stack.length()  >=  1)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  >=  1)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  >=  1)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;	  while(stack.length()    ==    0)    {    stack[stackSize    -    1]    =    JsonScope.UNQUOTED_NAME;    	non-compiled	[CE]  	83	None	replace
995	[BUG]  [BUGGY]  while(stack.length()!=  1)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()!=  1)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()!=  1)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;	  while(stack.length()    ==    0)    {    stack[stackSize    -    1]    =    JsonScope.UNQUOTED_NAME;    	non-compiled	[CE]  	83	None	replace
996	[BUG]  [BUGGY]  parent  =(parent  ==  null)?  JsonScope.NONEMPTY_LONG  :  parent.getParent();  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  =(parent  ==  null)?  JsonScope.NONEMPTY_LONG  :  parent.getParent();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  =(parent  ==  null)?  JsonScope.NONEMPTY_LONG  :  parent.getParent();	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	122	None	replace
997	[BUG]  [BUGGY]  parent  =(parent  ==  null)?  JsonScope.NONEMPTY_LONG  :  parent.getValue();  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  =(parent  ==  null)?  JsonScope.NONEMPTY_LONG  :  parent.getValue();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  =(parent  ==  null)?  JsonScope.NONEMPTY_LONG  :  parent.getValue();	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	122	None	replace
998	[BUG]  [BUGGY]  parent  =(parent  ==  null)?  JsonScope.NONEMPTY_LONG  :  parent;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  =(parent  ==  null)?  JsonScope.NONEMPTY_LONG  :  parent;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  =(parent  ==  null)?  JsonScope.NONEMPTY_LONG  :  parent;	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	122	None	replace
999	[BUG]  [BUGGY]  parent  =(parent  ==  null)?  JsonScope.NONEMPTY_OBJECT  :  parent.getParent();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  =(parent  ==  null)?  JsonScope.NONEMPTY_OBJECT  :  parent.getParent();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  =(parent  ==  null)?  JsonScope.NONEMPTY_OBJECT  :  parent.getParent();	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	122	None	replace
1000	[BUG]  [BUGGY]  parent  =(parent  ==  null)?  JsonScope.NONEMPTY_LONG  :  parent.getTypeDesc();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  =(parent  ==  null)?  JsonScope.NONEMPTY_LONG  :  parent.getTypeDesc();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  =(parent  ==  null)?  JsonScope.NONEMPTY_LONG  :  parent.getTypeDesc();	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	122	None	replace
1001	[BUG]  [BUGGY]  parent  =(parent  ==  null)?  JsonNull.NONEMPTY_LONG  :  parent.getValue();  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  =(parent  ==  null)?  JsonNull.NONEMPTY_LONG  :  parent.getValue();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  =(parent  ==  null)?  JsonNull.NONEMPTY_LONG  :  parent.getValue();	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	122	None	replace
1002	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	95	None	replace
1003	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	95	None	replace
1004	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	95	None	replace
1005	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	95	None	replace
1006	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  char)c))  {  checkLenient();  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  char)c))  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  char)c))  {  checkLenient();	  peer!=    JsonScope.NONEMPTY_OBJECT    &&    isLiteral((    char)c))    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	116	None	replace
1007	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  peer!=    JsonScope.NONEMPTY_OBJECT    &&    isLiteral((    char)c))    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	116	None	replace
1008	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '')  {  return  checkLenient();  }  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  '')  {  return  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  '')  {  return  checkLenient();  }	  if(c    ==    '''    ||    c    ==    '')    {    return    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	181	None	replace
1009	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  return  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  return  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  '-')  {  return  checkLenient();  }	  if(c    ==    '''    ||    c    ==    '')    {    return    checkLenient();    }    	non-compiled	[CE]  	181	None	replace
1010	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	1	None	replace
1011	[BUG]  [BUGGY]  parent!=  ''')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  ''')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  ''')  {  checkLenient();  }	  if(c!=    ''')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	67	None	replace
1012	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLenient((  char)c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	71	None	replace
1013	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)ch))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)ch))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)ch))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	71	None	replace
1014	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	71	None	replace
1015	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack!=  JSONScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack!=  JSONScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  if(peekStack!=  JSONScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	71	None	replace
1016	[BUG]  [BUGGY]  while(isLenient((  char)c))  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c))  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c))  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(isLiteral((    char)c))    {    peekStack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	115	None	replace
1017	[BUG]  [BUGGY]  while(isLong((  char)c))  {  peekStack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLong((  char)c))  {  peekStack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLong((  char)c))  {  peekStack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(isLiteral((    char)c))    {    peekStack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	115	None	replace
1018	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  stack[0]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  stack[0]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  stack[0]  =  JsonScope.NONEMPTY_OBJECT;	  while(isLiteral((    char)c))    {    peekStack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	115	None	replace
1019	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT  &&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT  &&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT  &&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	177	None	replace
1020	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  not  a  statement  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  not  a  statement	177	None	replace
1021	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT  &&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT  &&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT  &&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	177	None	replace
1022	[BUG]  [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  return  peeked  =  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	177	None	replace
1023	[BUG]  [BUGGY]  while(isLenient((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  while(isLiteral((    char)c))    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	137	None	replace
1024	[BUG]  [BUGGY]  while(isString((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isString((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isString((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c))    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	137	None	replace
1025	[BUG]  [BUGGY]  while(isDelimiter((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isDelimiter((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isDelimiter((  char)c))  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c))    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	137	None	replace
1026	[BUG]  [BUGGY]  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	166	None	replace
1027	[BUG]  [BUGGY]  int  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	166	None	replace
1028	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	166	None	replace
1029	[BUG]  [BUGGY]  while(stack[pos  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[pos  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[pos  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  while(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	144	None	replace
1030	[BUG]  [BUGGY]  while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	144	None	replace
1031	[BUG]  [BUGGY]  while(isLong((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLong((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLong((  char)c)&&  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    	non-compiled	[CE]  	104	None	replace
1032	[BUG]  [BUGGY]  if(isLiteral((  char)c)  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)c)  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)c)  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	169	None	replace
1033	[BUG]  [BUGGY]  while(pos  <  stack.length)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_STRING;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(pos  <  stack.length)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_STRING;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(pos  <  stack.length)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_STRING;	  if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	169	None	replace
1034	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_LONG;	  while(isLiteral((    char)c))    {    peekStack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	101	None	replace
1035	[BUG]  [BUGGY]  while(isLiteral((  char)c))  {  stack[peekStack.length  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c))  {  stack[peekStack.length  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c))  {  stack[peekStack.length  -  1]  =  JsonScope.NONEMPTY_LONG;	  while(isLiteral((    char)c))    {    peekStack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	101	None	replace
1036	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  	140	None	replace
1037	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  	140	None	replace
1038	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  not  a  statement	140	None	replace
1039	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DIGIT)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DIGIT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DIGIT)  {  checkLenient();  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	7	None	replace
1040	[BUG]  [BUGGY]  parent  ==  ''')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  ''')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  ''')  {  checkLenient();  }	  if(c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	88	None	replace
1041	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;	  while(peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	21	None	replace
1042	[BUG]  [BUGGY]  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	166	None	replace
1043	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  2]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  2]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  2]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	166	None	replace
1044	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  <  =  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]  <  =  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  <  =  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  int    stack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	53	None	replace
1045	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  int    stack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	53	None	replace
1046	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	77	None	replace
1047	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  '')  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	77	None	replace
1048	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  ''')  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  ''')  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  ''')  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	77	None	replace
1049	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	77	None	replace
1050	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c))  {  if(stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c))  {  if(stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	77	None	replace
1051	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  '')  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	71	None	replace
1052	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  ''')  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  ''')  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  ''')  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	71	None	replace
1053	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	71	None	replace
1054	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_LONG  &&  isLenient((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_LONG  &&  isLenient((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_LONG  &&  isLenient((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  peer!=    JsonScope.NONEMPTY_LONG    &&    isLiteral((    char)c))    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	126	None	replace
1055	[BUG]  [BUGGY]  if(c  ==  ';'  ||  c  ==  ',')  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ';'  ||  c  ==  ',')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ';'  ||  c  ==  ',')  {  checkLenient();  }	  if(c    ==    '.'    ||    c    ==    ',')    {    checkLenient();    }    	non-compiled	[CE]  	107	None	replace
1056	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  peeked;  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  return  peeked;  }	  if(c    ==    '.'    ||    c    ==    ',')    {    checkLenient();    }    	non-compiled	[CE]  	107	None	replace
1057	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_BUFFERED;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_BUFFERED;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_BUFFERED;  }	  if(c    ==    '.'    ||    c    ==    ',')    {    checkLenient();    }    	non-compiled	[CE]  	107	None	replace
1058	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  break;  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  break;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  break;  }	  if(c    ==    '.'    ||    c    ==    ',')    {    checkLenient();    }    	non-compiled	[CE]  	107	None	replace
1059	[BUG]  [BUGGY]  while(stackTopLevel!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stackTopLevel!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stackTopLevel!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	90	None	replace
1060	[BUG]  [BUGGY]  while(stack.length  >=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length  >=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length  >=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	90	None	replace
1061	[BUG]  [BUGGY]  while(stack.length  >  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length  >  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length  >  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    >=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	93	None	replace
1062	[BUG]  [BUGGY]  if(c!=  '.')  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c!=  '.')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c!=  '.')  {  checkLenient();  }	  if(c    ==    '.')    {    checkLenient();    }    	non-compiled	[CE]  	68	None	replace
1063	[BUG]  [BUGGY]  while(pathIndices[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(pathIndices[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(pathIndices[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	37	None	replace
1064	[BUG]  [BUGGY]  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[pos    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	151	None	replace
1065	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	23	None	replace
1066	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	23	None	replace
1067	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  ')  {  checkLenient();  }  [CE]  unclosed  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ','  ||  c  ==  ')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ','  ||  c  ==  ')  {  checkLenient();  }	  if(c    ==    '''    &&    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  unclosed  character  literal	29	None	replace
1068	[BUG]  [BUGGY]  if(c  ==  '>')  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '>')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '>')  {  checkLenient();  }	  if(c    ==    ',')    {    checkLenient();    }    	non-compiled	[CE]  	150	None	replace
1069	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c));  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c));  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c));	  parent!=    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  not  a  statement	24	None	replace
1070	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  ||  parent!=  JsonScope.NONEMPTY_OBJECT;  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  ||  parent!=  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_OBJECT  ||  parent!=  JsonScope.NONEMPTY_OBJECT;	  parent!=    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  not  a  statement	24	None	replace
1071	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_BOOLEAN_QUOTED_NAME;  }  [CE]  empty  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_BOOLEAN_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)c))  {  return  peeked  =  PEEKED_BOOLEAN_QUOTED_NAME;  }	  if(c    ==    '')    {    if(isLiteral((    char)    c))    {    return    peeked    =    PEEKED_BUFFERED;    }    	non-compiled	[CE]  empty  character  literal	171	None	replace
1072	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  PEEKED_BUFFERED;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  PEEKED_BUFFERED;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  PEEKED_BUFFERED;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked;    }    	non-compiled	[CE]  	167	None	replace
1073	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  PEEKED_END_OBJECT;  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked;    }    	non-compiled	[CE]  	167	None	replace
1074	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked;    }    	non-compiled	[CE]  	167	None	replace
1075	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  PEEKED_BOOLEAN_QUOTED_NAME;  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  PEEKED_BOOLEAN_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  PEEKED_BOOLEAN_QUOTED_NAME;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked;    }    	non-compiled	[CE]  	167	None	replace
1076	[BUG]  [BUGGY]  if(c  ==  '['  ||  c  ==  ']')  {  return  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '['  ||  c  ==  ']')  {  return  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '['  ||  c  ==  ']')  {  return  checkLenient();  }	  if(c    ==    '''    ||    c    ==    '')    {    return    checkLenient();    }    	non-compiled	[CE]  	181	None	replace
1077	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  return  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  return  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  ':')  {  return  checkLenient();  }	  if(c    ==    '''    ||    c    ==    '')    {    return    checkLenient();    }    	non-compiled	[CE]  	181	None	replace
1078	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  '>')  {  return  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ','  ||  c  ==  '>')  {  return  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ','  ||  c  ==  '>')  {  return  checkLenient();  }	  if(c    ==    '''    ||    c    ==    '')    {    return    checkLenient();    }    	non-compiled	[CE]  	181	None	replace
1079	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  ')  {  return  checkLenient();  }  [CE]  unclosed  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ','  ||  c  ==  ')  {  return  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ','  ||  c  ==  ')  {  return  checkLenient();  }	  if(c    ==    '''    ||    c    ==    '')    {    return    checkLenient();    }    	non-compiled	[CE]  unclosed  character  literal	181	None	replace
1080	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  '')return  checkLenient();  }  [CE]  empty  character  literal  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  '')return  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  '')return  checkLenient();  }	  if(c    ==    '''    ||    c    ==    '')    {    return    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	181	None	replace
1081	[BUG]  [BUGGY]  parent  ==  null  &&  parent!=  JsonScope.NONEMPTY_LONG;  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  null  &&  parent!=  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  null  &&  parent!=  JsonScope.NONEMPTY_LONG;	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	122	None	replace
1082	[BUG]  [BUGGY]  Integer  pos  =  stack.size()  >  1?  stack.get(c):  0;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  pos  =  stack.size()  >  1?  stack.get(c):  0;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  pos  =  stack.size()  >  1?  stack.get(c):  0;	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	122	None	replace
1083	[BUG]  [BUGGY]  Integer  pos  =  stack.size()  >  1?  stack.size()  :  0;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  pos  =  stack.size()  >  1?  stack.size()  :  0;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  pos  =  stack.size()  >  1?  stack.size()  :  0;	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	122	None	replace
1084	[BUG]  [BUGGY]  Integer  pos  =  stack.size()  >  1?  stack.peek()  :  0;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  pos  =  stack.size()  >  1?  stack.peek()  :  0;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  pos  =  stack.size()  >  1?  stack.peek()  :  0;	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	122	None	replace
1085	[BUG]  [BUGGY]  Integer  pos  =  stack.size()  >  0?  stack.size()  :  0;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  pos  =  stack.size()  >  0?  stack.size()  :  0;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  pos  =  stack.size()  >  0?  stack.size()  :  0;	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	122	None	replace
1086	[BUG]  [BUGGY]  pendChildren(c,  peekedString);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pendChildren(c,  peekedString);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pendChildren(c,  peekedString);	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	122	None	replace
1087	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;	  while(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    	non-compiled	[CE]  	9	None	replace
1088	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(c!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	182	None	replace
1089	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }	  if(c!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	182	None	replace
1090	[BUG]  [BUGGY]  while(stack.length()  <  2)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  <  2)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  <  2)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  while(stack.length()    >=    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	85	None	replace
1091	[BUG]  [BUGGY]  int  pos  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  pos    =    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	35	None	replace
1092	[BUG]  [BUGGY]  pos  =  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pos  =  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pos  =  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  pos    =    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	35	None	replace
1093	[BUG]  [BUGGY]  if(c  ==  ';'  ||  c  ==  '+')  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ';'  ||  c  ==  '+')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ';'  ||  c  ==  '+')  {  checkLenient();  }	  if(c    ==    '.'    ||    c    ==    '+')    {    checkLenient();    }    	non-compiled	[CE]  	30	None	replace
1094	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+')  {  return  peeked;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  '+')  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  '+')  {  return  peeked;  }	  if(c    ==    '.'    ||    c    ==    '+')    {    checkLenient();    }    	non-compiled	[CE]  	30	None	replace
1095	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+')  {  break;  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  '+')  {  break;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  '+')  {  break;  }	  if(c    ==    '.'    ||    c    ==    '+')    {    checkLenient();    }    	non-compiled	[CE]  	30	None	replace
1096	[BUG]  [BUGGY]  int  pos  =  stack[stackSize  -  1]  -  1;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack[stackSize  -  1]  -  1;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack[stackSize  -  1]  -  1;	  int    pos    =    stack[stackSize    -    1];    	non-compiled	[CE]  	18	None	replace
1097	[BUG]  [BUGGY]  int  pos  =  stack[stackSize  -  1]  &  0xFF;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack[stackSize  -  1]  &  0xFF;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack[stackSize  -  1]  &  0xFF;	  int    pos    =    stack[stackSize    -    1];    	non-compiled	[CE]  	18	None	replace
1098	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  &&  c  ==  ''')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  parent    ==    JsonScope.NONEMPTY_OBJECT    ||    c    ==    ''')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  empty  character  literal	155	None	replace
1099	[BUG]  [BUGGY]  while(isLenient((  char)c)  <  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c)  <  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c)  <  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	138	None	replace
1100	[BUG]  [BUGGY]  while(isLong((  char)c)  <  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLong((  char)c)  <  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLong((  char)c)  <  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	138	None	replace
1101	[BUG]  [BUGGY]  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	176	None	replace
1102	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	176	None	replace
1103	[BUG]  [BUGGY]  int  pos  =  stack.get(stackSize  -  1);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.get(stackSize  -  1);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.get(stackSize  -  1);	  int    pos    =    stack.size();    	non-compiled	[CE]  	50	None	replace
1104	[BUG]  [BUGGY]  int  pos  =  stack.lastIndexOf('.');  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.lastIndexOf('.');  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.lastIndexOf('.');	  int    pos    =    stack.size();    	non-compiled	[CE]  	50	None	replace
1105	[BUG]  [BUGGY]  int  pos  =  stack.getSize();  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.getSize();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.getSize();	  int    pos    =    stack.size();    	non-compiled	[CE]  	50	None	replace
1106	[BUG]  [BUGGY]  while(stack.length()  <  2)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  <  2)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  <  2)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(stack.length()    >    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	14	None	replace
1107	[BUG]  [BUGGY]  if(c  ==  '>')  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  peeked;  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '>')  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '>')  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLiteral((    char)stack[stackSize    -    1]))    {    return    peeked;    }    	non-compiled	[CE]  	172	None	replace
1108	[BUG]  [BUGGY]  if(c  ==  ':')  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  peeked;  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ':')  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ':')  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLiteral((    char)stack[stackSize    -    1]))    {    return    peeked;    }    	non-compiled	[CE]  	172	None	replace
1109	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  peeked;  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c))  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c))  {  if(isLiteral((  char)stack[stackSize  -  1]))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLiteral((    char)stack[stackSize    -    1]))    {    return    peeked;    }    	non-compiled	[CE]  	172	None	replace
1110	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)stack[stackSize  -  1]))  {  return  peeked;  }  [CE]  empty  character  literal  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)stack[stackSize  -  1]))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLenient((  char)stack[stackSize  -  1]))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLiteral((    char)stack[stackSize    -    1]))    {    return    peeked;    }    	non-compiled	[CE]  empty  character  literal	172	None	replace
1111	[BUG]  [BUGGY]  while(stackTopLevel!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stackTopLevel!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stackTopLevel!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  >>  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    >>    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	92	None	replace
1112	[BUG]  [BUGGY]  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  not  a  statement  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  not  a  statement	177	None	replace
1113	[BUG]  [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	177	None	replace
1114	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	177	None	replace
1115	[BUG]  [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	177	None	replace
1116	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_ARRAY)    {    checkLenient();    }    	non-compiled	[CE]  	106	None	replace
1117	[BUG]  [BUGGY]  if(c  ==  ';'  ||  c  ==  'e')  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ';'  ||  c  ==  'e')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ';'  ||  c  ==  'e')  {  checkLenient();  }	  if(c    ==    '''    ||    c    ==    'e')    {    checkLenient();    }    	non-compiled	[CE]  	89	None	replace
1118	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  ' "')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  ' "')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  ' "')  {  checkLenient();  }	  if(c    ==    '''    ||    c    ==    'e')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	89	None	replace
1119	[BUG]  [BUGGY]  peer!=  null  &&  isLenient((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  null  &&  isLenient((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  null  &&  isLenient((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  peer!=    null    &&    isLiteral((    char)c))    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	112	None	replace
1120	[BUG]  [BUGGY]  if(c!=  ''')  {  peer!=  null  &&  isLiteral((  char)c))  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c!=  ''')  {  peer!=  null  &&  isLiteral((  char)c))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c!=  ''')  {  peer!=  null  &&  isLiteral((  char)c))  {  checkLenient();  }	  peer!=    null    &&    isLiteral((    char)c))    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  empty  character  literal	112	None	replace
1121	[BUG]  [BUGGY]  while(stack.length()  <  =  0)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  <  =  0)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  <  =  0)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;	  while(stack.length()    ==    0)    {    stack[stackSize    -    1]    =    JsonScope.UNQUOTED_NAME;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
1122	[BUG]  [BUGGY]  while(stack.length()  <  1)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  <  1)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  <  1)  {  stack[stackSize  -  1]  =  JsonScope.UNQUOTED_NAME;	  while(stack.length()    ==    0)    {    stack[stackSize    -    1]    =    JsonScope.UNQUOTED_NAME;    	non-compiled	[CE]  	83	None	replace
1123	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  '.'  ||  c  ==  ',')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  '.'  ||  c  ==  ',')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  '.'  ||  c  ==  ',')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    '.'    ||    c    ==    ',')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	42	None	replace
1124	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_BUFFERED;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_BUFFERED;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  ',')  {  return  PEEKED_BUFFERED;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    '.'    ||    c    ==    ',')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	42	None	replace
1125	[BUG]  [BUGGY]  int  pos  =  stack.indexOf('/',  stack.length  -  1);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.indexOf('/',  stack.length  -  1);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.indexOf('/',  stack.length  -  1);	  int    pos    =    stack.indexOf(''',    stack.length    -    1);    	non-compiled	[CE]  	121	None	replace
1126	[BUG]  [BUGGY]  int  pos  =  stack.indexOf(''',  stack.size  -  1);  [CE]  empty  character  literal  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.indexOf(''',  stack.size  -  1);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.indexOf(''',  stack.size  -  1);	  int    pos    =    stack.indexOf(''',    stack.length    -    1);    	non-compiled	[CE]  empty  character  literal	121	None	replace
1127	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	141	None	replace
1128	[BUG]  [BUGGY]  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  unclosed  string  literal	141	None	replace
1129	[BUG]  [BUGGY]  while(c!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	2	None	replace
1130	[BUG]  [BUGGY]  while(stackTop!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stackTop!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stackTop!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	2	None	replace
1131	[BUG]  [BUGGY]  if(stack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	62	None	replace
1132	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }	  if(peekStack    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	62	None	replace
1133	[BUG]  [BUGGY]  if(stack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	73	None	replace
1134	[BUG]  [BUGGY]  if(stack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }	  if(stack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	73	None	replace
1135	[BUG]  [BUGGY]  while(isBlank((  char)c))  {  peekStack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isBlank((  char)c))  {  peekStack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isBlank((  char)c))  {  peekStack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(isLiteral((    char)c))    {    peekStack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	115	None	replace
1136	[BUG]  [BUGGY]  while(isString((  char)c))  {  peekStack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isString((  char)c))  {  peekStack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isString((  char)c))  {  peekStack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(isLiteral((    char)c))    {    peekStack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	115	None	replace
1137	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  while(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	144	None	replace
1138	[BUG]  [BUGGY]  while(pathIndices[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(pathIndices[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(pathIndices[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	144	None	replace
1139	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED_NAME;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int[]  pathIndices  =  stack[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED_NAME;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED_NAME;	  int[]    pathIndices    =    stack[stackSize    -    1];    	non-compiled	[CE]  	20	None	replace
1140	[BUG]  [BUGGY]  if(c  >=  ''')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  >=  ''')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  >=  ''')  {  checkLenient();  }	  if(c!=    ''')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	67	None	replace
1141	[BUG]  [BUGGY]  while(pathIndices[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(pathIndices[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(pathIndices[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	38	None	replace
1142	[BUG]  [BUGGY]  int  c  =  stack[stackSize  -  1]  &  0xff;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =  stack[stackSize  -  1]  &  0xff;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =  stack[stackSize  -  1]  &  0xff;	  int    c    =    stack[stackSize    -    1];    	non-compiled	[CE]  	46	None	replace
1143	[BUG]  [BUGGY]  int  c  =  stack[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED_NAME;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =  stack[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED_NAME;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =  stack[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED_NAME;	  int    c    =    stack[stackSize    -    1];    	non-compiled	[CE]  	46	None	replace
1144	[BUG]  [BUGGY]  int  c  =  stack[stackSize  -  1]  &  0xFF;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =  stack[stackSize  -  1]  &  0xFF;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =  stack[stackSize  -  1]  &  0xFF;	  int    c    =    stack[stackSize    -    1];    	non-compiled	[CE]  	46	None	replace
1145	[BUG]  [BUGGY]  if(stack.length  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack.length  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack.length  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	165	None	replace
1146	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  return  peeked  =  PEEKED_BUFFERED_OBJECT;  }	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	165	None	replace
1147	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  return  peeked;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  return  peeked;  }	  if(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	165	None	replace
1148	[BUG]  [BUGGY]  pendInt(stack.length()  -  1,  stack.length)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pendInt(stack.length()  -  1,  stack.length)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pendInt(stack.length()  -  1,  stack.length)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  pendInt(stack.length()    -    1)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	16	None	replace
1149	[BUG]  [BUGGY]  int  stack.length()  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack.length()  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack.length()  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  pendInt(stack.length()    -    1)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	16	None	replace
1150	[BUG]  [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	168	None	replace
1151	[BUG]  [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	168	None	replace
1152	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    return    peeked    =    PEEKED_END_OBJECT;    }    	non-compiled	[CE]  	168	None	replace
1153	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  checkLenient();  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	7	None	replace
1154	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	31	None	replace
1155	[BUG]  [BUGGY]  int  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	31	None	replace
1156	[BUG]  [BUGGY]  parent  ==  null?  JsonScope.NONEMPTY_STRING  :  PEEKED_DOUBLE_QUOTED_NAME;  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  null?  JsonScope.NONEMPTY_STRING  :  PEEKED_DOUBLE_QUOTED_NAME;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  null?  JsonScope.NONEMPTY_STRING  :  PEEKED_DOUBLE_QUOTED_NAME;	  if(peekStack!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	142	None	replace
1157	[BUG]  [BUGGY]  while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	128	None	replace
1158	[BUG]  [BUGGY]  while(stackSize!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stackSize!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stackSize!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	128	None	replace
1159	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	78	None	replace
1160	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c))  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	78	None	replace
1161	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	78	None	replace
1162	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c))  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	78	None	replace
1163	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c))  {  if(stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	78	None	replace
1164	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c))  {  if(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c))  {  if(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	78	None	replace
1165	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  '')  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	105	None	replace
1166	[BUG]  [BUGGY]  parent!=  ((  char)c)  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  ((  char)c)  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  ((  char)c)  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	105	None	replace
1167	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  ''')  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  ''')  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  ''')  {  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	105	None	replace
1168	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(isLiteral((    char)c))    {    if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	105	None	replace
1169	[BUG]  [BUGGY]  int  pos  =  stack.indexOf(''',  c);  [CE]  empty  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.indexOf(''',  c);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.indexOf(''',  c);	  int    pos    =    stack.indexOf(''');    	non-compiled	[CE]  empty  character  literal	120	None	replace
1170	[BUG]  [BUGGY]  int  c  =  pathIndices[stackSize  -  1]  &  0xff;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  c  =  pathIndices[stackSize  -  1]  &  0xff;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  c  =  pathIndices[stackSize  -  1]  &  0xff;	  int    c    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  	47	None	replace
1171	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  	178	None	replace
1172	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED;  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  	178	None	replace
1173	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  	178	None	replace
1174	[BUG]  [BUGGY]  while(isLenient((  char)c)  ||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c)  ||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c)  ||  peekStack  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c)&&    peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	100	None	replace
1175	[BUG]  [BUGGY]  if(c  ==  '>')  {  if(isLiteral((  char)c))  {  return  peeked;  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '>')  {  if(isLiteral((  char)c))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '>')  {  if(isLiteral((  char)c))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLiteral((    char)    c))    {    return    peeked;    }    	non-compiled	[CE]  	173	None	replace
1176	[BUG]  [BUGGY]  if(stack.length()  >  0)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack.length()  >  0)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack.length()  >  0)  {  checkLenient();  }	  if(stack.length()    <    =    0)    {    checkLenient();    }    	non-compiled	[CE]  	161	None	replace
1177	[BUG]  [BUGGY]  if(stack.length()  <  =  1)  {  checkLenient();  }  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack.length()  <  =  1)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack.length()  <  =  1)  {  checkLenient();  }	  if(stack.length()    <    =    0)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
1178	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	1	None	replace
1179	[BUG]  [BUGGY]  if(c  ==  ''  ||  c  ==  '')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''  ||  c  ==  '')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''  ||  c  ==  '')  {  checkLenient();  }	  if(c!=    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	28	None	replace
1180	[BUG]  [BUGGY]  if(c!=  '''  &&  c  ==  '')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c!=  '''  &&  c  ==  '')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c!=  '''  &&  c  ==  '')  {  checkLenient();  }	  if(c!=    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	28	None	replace
1181	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	13	None	replace
1182	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  return  peeked;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  return  peeked;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	13	None	replace
1183	[BUG]  [BUGGY]  while(c!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	13	None	replace
1184	[BUG]  [BUGGY]  if(stack.length()  <  =  2)  {  checkLenient();  }  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack.length()  <  =  2)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack.length()  <  =  2)  {  checkLenient();  }	  if(stack.length()    ==    2)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
1185	[BUG]  [BUGGY]  while(stack.length()  <  =  2)  {  checkLenient();  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  <  =  2)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  <  =  2)  {  checkLenient();	  if(stack.length()    ==    2)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
1186	[BUG]  [BUGGY]  if(stack.length()!=  2)  {  checkLenient();  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack.length()!=  2)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack.length()!=  2)  {  checkLenient();  }	  if(stack.length()    ==    2)    {    checkLenient();    }    	non-compiled	[CE]  	162	None	replace
1187	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_INT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_INT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_INT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	156	None	replace
1188	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_DECIMAL  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_DECIMAL  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_DECIMAL  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	156	None	replace
1189	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	76	None	replace
1190	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  	152	None	replace
1191	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  	152	None	replace
1192	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  	152	None	replace
1193	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED;  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BUFFERED;  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  	164	None	replace
1194	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BOOLEAN_QUOTED_NAME;  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BOOLEAN_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_BOOLEAN_QUOTED_NAME;  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  	164	None	replace
1195	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_END_OBJECT;  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  	164	None	replace
1196	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked;    }    	non-compiled	[CE]  	164	None	replace
1197	[BUG]  [BUGGY]  Integer  c  =  stack[stackSize  -  1]  |  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  c  =  stack[stackSize  -  1]  |  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  c  =  stack[stackSize  -  1]  |  JsonScope.NONEMPTY_OBJECT;	  Integer    c    =    stack[stackSize    -    1];    	non-compiled	[CE]  	119	None	replace
1198	[BUG]  [BUGGY]  if(pos  >  0)  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(pos  >  0)  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(pos  >  0)  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       "    	non-compiled	[CE]  	148	None	replace
1199	[BUG]  [BUGGY]  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       "    	non-compiled	[CE]  unclosed  string  literal	148	None	replace
1200	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   "  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   "  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   "	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       "    	non-compiled	[CE]  	148	None	replace
1201	[BUG]  [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	129	None	replace
1202	[BUG]  [BUGGY]  while(stackTopLevel!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stackTopLevel!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stackTopLevel!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	129	None	replace
1203	[BUG]  [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c));  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c));  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  JsonScope.NONEMPTY_OBJECT  &&  isLiteral((  char)c));	  parent    ==    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  not  a  statement	25	None	replace
1204	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_LONG  &&  isLiteral((  char)c));  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_LONG  &&  isLiteral((  char)c));  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_LONG  &&  isLiteral((  char)c));	  parent!=    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  not  a  statement	12	None	replace
1205	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_LONG  ||  parent!=  JsonScope.NONEMPTY_LONG;  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_LONG  ||  parent!=  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_LONG  ||  parent!=  JsonScope.NONEMPTY_LONG;	  parent!=    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  not  a  statement	12	None	replace
1206	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient(peekStack);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient(peekStack);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient(peekStack);	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    	non-compiled	[CE]  	33	None	replace
1207	[BUG]  [BUGGY]  while(pos!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(pos!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(pos!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	127	None	replace
1208	[BUG]  [BUGGY]  int  stack[peekStack  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[peekStack  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[peekStack  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  int    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	52	None	replace
1209	[BUG]  [BUGGY]  while(stack[n  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack[n  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack[n  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	19	None	replace
1210	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int[]  pathIndices  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING;	  int[]    pathIndices    =    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_STRING;    checkLenient();    	non-compiled	[CE]  	64	None	replace
1211	[BUG]  [BUGGY]  int[]  pathIndices  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING;  checkLenient(pathNames);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int[]  pathIndices  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING;  checkLenient(pathNames);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int[]  pathIndices  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING;  checkLenient(pathNames);	  int[]    pathIndices    =    stack[stackSize    -    1]    {    JsonScope.NONEMPTY_STRING;    checkLenient();    	non-compiled	[CE]  	64	None	replace
1212	[BUG]  [BUGGY]  while(c  ==  '')  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c  ==  '')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c  ==  '')  {  checkLenient();  }	  while(c    ==    ''')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	69	None	replace
1213	[BUG]  [BUGGY]  indent(stack.length()  -  1)  {  checkLenient();  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  indent(stack.length()  -  1)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	indent(stack.length()  -  1)  {  checkLenient();  }	  pendency(stack.length()    -    1)    {    checkLenient();    }    	non-compiled	[CE]  	60	None	replace
1214	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	146	None	replace
1215	[BUG]  [BUGGY]  if(c  >=  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  >=  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  >=  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  empty  character  literal	134	None	replace
1216	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  unclosed  string  literal	134	None	replace
1217	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c!=  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c!=  JsonScope.NONEMPTY_OBJECT)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	134	None	replace
1218	[BUG]  [BUGGY]  if(c  >=  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  empty  character  literal  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  >=  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  >=  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  empty  character  literal	134	None	replace
1219	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  return  peeked;  }  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  '')  {  return  peeked;  }	  if(isLiteral((    char)c))    {    if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	94	None	replace
1220	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '/')  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  '/')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  '/')  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  	94	None	replace
1221	[BUG]  [BUGGY]  parent  ==  null  &&  parent!=  JsonScope.NONEMPTY_OBJECT;  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  null  &&  parent!=  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  null  &&  parent!=  JsonScope.NONEMPTY_OBJECT;	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	131	None	replace
1222	[BUG]  [BUGGY]  Integer  pos  =  stack.size()  >  4?  stack.size()  :  0;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  pos  =  stack.size()  >  4?  stack.size()  :  0;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  pos  =  stack.size()  >  4?  stack.size()  :  0;	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	131	None	replace
1223	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	44	None	replace
1224	[BUG]  [BUGGY]  if(pos  >=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(pos  >=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(pos  >=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	44	None	replace
1225	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	44	None	replace
1226	[BUG]  [BUGGY]  if(pos  >=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(pos  >=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(pos  >=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	44	None	replace
1227	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	44	None	replace
1228	[BUG]  [BUGGY]  if(c  ==  '>')  {  if(isLenient((  char)c))  {  return  peeked;  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '>')  {  if(isLenient((  char)c))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '>')  {  if(isLenient((  char)c))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    peeked;    }    	non-compiled	[CE]  	174	None	replace
1229	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(isLenient((  char)c))  {  return  peeked;  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.')  {  if(isLenient((  char)c))  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.')  {  if(isLenient((  char)c))  {  return  peeked;  }	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    peeked;    }    	non-compiled	[CE]  	174	None	replace
1230	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  return  peeked;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  return  peeked;  }	  if(c    ==    JsonScope.NONEMPTY_LONG    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	157	None	replace
1231	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_INT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_INT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_INT  ||  c  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(c    ==    JsonScope.NONEMPTY_LONG    ||    c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  	157	None	replace
1232	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  ||  peer!=  JsonScope.NONEMPTY_DOUBLE_QUOTED_NAME;  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  ||  peer!=  JsonScope.NONEMPTY_DOUBLE_QUOTED_NAME;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_OBJECT  ||  peer!=  JsonScope.NONEMPTY_DOUBLE_QUOTED_NAME;	  peer!=    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  not  a  statement	175	None	replace
1233	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  ||  peer!=  JsonScope.NONEMPTY_LONG;  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  ||  peer!=  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_OBJECT  ||  peer!=  JsonScope.NONEMPTY_LONG;	  peer!=    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  not  a  statement	175	None	replace
1234	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	98	None	replace
1235	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  '')  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	98	None	replace
1236	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  ''')  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  ''')  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  ''')  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	98	None	replace
1237	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c))  {  if(stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }	  if(isLiteral((    char)c))    {    if(stack[pos    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	98	None	replace
1238	[BUG]  [BUGGY]  if(c  ==  ';'  ||  c  ==  ':')  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ';'  ||  c  ==  ':')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ';'  ||  c  ==  ':')  {  checkLenient();  }	  if(c    ==    '.'    ||    c    ==    ':')    {    checkLenient();    }    	non-compiled	[CE]  	180	None	replace
1239	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  break;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  break;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  ':')  {  break;  }	  if(c    ==    '.'    ||    c    ==    ':')    {    checkLenient();    }    	non-compiled	[CE]  	180	None	replace
1240	[BUG]  [BUGGY]  while(stackTop  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stackTop  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stackTop  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  while(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    	non-compiled	[CE]  	6	None	replace
1241	[BUG]  [BUGGY]  while(stackStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stackStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stackStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();	  while(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    	non-compiled	[CE]  	6	None	replace
1242	[BUG]  [BUGGY]  while(stackTopLevel!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stackTopLevel!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stackTopLevel!=  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	91	None	replace
1243	[BUG]  [BUGGY]  while(stack.length()  <  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.length()  <  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.length()  <  1)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  while(stack.length()    ==    0)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	84	None	replace
1244	[BUG]  [BUGGY]  int  stackSize  =  stack.size();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stackSize  =  stack.size();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stackSize  =  stack.size();	  int    stackSize    =    stack.length();    	non-compiled	[CE]  	57	None	replace
1245	[BUG]  [BUGGY]  int  stackSize  =  stack.length  -  2;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stackSize  =  stack.length  -  2;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stackSize  =  stack.length  -  2;	  int    stackSize    =    stack.length();    	non-compiled	[CE]  	57	None	replace
1246	[BUG]  [BUGGY]  while(c!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  	140	None	replace
1247	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_DECIMAL)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_DECIMAL)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_DECIMAL)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  	140	None	replace
1248	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_BLOCK)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_BLOCK)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_BLOCK)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name.   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name.   ");    }    	non-compiled	[CE]  	140	None	replace
1249	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  <  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]  <  JsonScope.NONEMPTY_STRING)  {  checkLenient();  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  <  JsonScope.NONEMPTY_STRING)  {  checkLenient();	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	34	None	replace
1250	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  {  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	43	None	replace
1251	[BUG]  [BUGGY]  int  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	43	None	replace
1252	[BUG]  [BUGGY]  int  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[peekStack  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	43	None	replace
1253	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  <  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]  <  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  <  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	43	None	replace
1254	[BUG]  [BUGGY]  if(isLenient((  char)c)  ||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c)  ||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c)  ||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c)||    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	133	None	replace
1255	[BUG]  [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  JsonScope.NONEMPTY_OBJECT  &&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  JsonScope.NONEMPTY_OBJECT  &&  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(isLiteral((    char)c)||    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	133	None	replace
1256	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  '')  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	75	None	replace
1257	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  ''')  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  ''')  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  ''')  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	75	None	replace
1258	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	75	None	replace
1259	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked;  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	75	None	replace
1260	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  checkLenient();  }  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ':'  ||  c  ==  '+')  {  checkLenient();  }	  if(c    ==    ':')    {    checkLenient();    }    	non-compiled	[CE]  	149	None	replace
1261	[BUG]  [BUGGY]  if(c  ==  ':'  <  =  ')  {  checkLenient();  }  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ':'  <  =  ')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ':'  <  =  ')  {  checkLenient();  }	  if(c    ==    ':')    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
1262	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [CE]  unclosed  string  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c!=  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c!=  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  unclosed  string  literal	125	None	replace
1263	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  }  [CE]  empty  character  literal  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  empty  character  literal	125	None	replace
1264	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c!=  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c!=  JsonScope.NONEMPTY_LONG)  {  if(isLiteral((  char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	125	None	replace
1265	[BUG]  [BUGGY]  if(isLiteral((  char)  c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLiteral((  char)  c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLiteral((  char)  c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(isLiteral((    char)c)||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	87	None	replace
1266	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  char)c))  {  checkLenient();  }  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  char)c))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_OBJECT  &&  isLenient((  char)c))  {  checkLenient();  }	  peer!=    JsonScope.NONEMPTY_OBJECT    &&    isLiteral((    char)c))    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	116	None	replace
1267	[BUG]  [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  &&  isString((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  peer!=  JsonScope.NONEMPTY_OBJECT  &&  isString((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	peer!=  JsonScope.NONEMPTY_OBJECT  &&  isString((  char)c))  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  peer!=    JsonScope.NONEMPTY_OBJECT    &&    isLiteral((    char)c))    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	116	None	replace
1268	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  '')  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	124	None	replace
1269	[BUG]  [BUGGY]  parent!=  ((  char)c)  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent!=  ((  char)c)  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent!=  ((  char)c)  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  not  a  statement	124	None	replace
1270	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(isLiteral((  char)c))  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(isLiteral((  char)c))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  '')  {  if(isLiteral((  char)c))  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	124	None	replace
1271	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "  [CE]  unclosed  string  literal  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  unclosed  string  literal	147	None	replace
1272	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	97	None	replace
1273	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c))  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	97	None	replace
1274	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	97	None	replace
1275	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  '')  {  if(stack[stackSize  -  1)  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	97	None	replace
1276	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	97	None	replace
1277	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  '')  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  '')  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1)    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	97	None	replace
1278	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	143	None	replace
1279	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_STRING  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	143	None	replace
1280	[BUG]  [BUGGY]  while(isLenient((  char)c)  ||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c)  ||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c)  ||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	117	None	replace
1281	[BUG]  [BUGGY]  pendency(stack.length(),  stack.length())  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  pendency(stack.length(),  stack.length())  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	pendency(stack.length(),  stack.length())  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  pendency(stack.length()    -    1,    stack.length())    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	158	None	replace
1282	[BUG]  [BUGGY]  Pendency(stack.length(),  stack.length())  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Pendency(stack.length(),  stack.length())  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Pendency(stack.length(),  stack.length())  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  pendency(stack.length()    -    1,    stack.length())    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	158	None	replace
1283	[BUG]  [BUGGY]  int  stackSize  =  stack[stackSize  -  1]  -  1;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stackSize  =  stack[stackSize  -  1]  -  1;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stackSize  =  stack[stackSize  -  1]  -  1;	  int    stackSize    =    stack[stackSize    -    1];    	non-compiled	[CE]  	32	None	replace
1284	[BUG]  [BUGGY]  while(buffer[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(buffer[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(buffer[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  while(stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    	non-compiled	[CE]  	40	None	replace
1285	[BUG]  [BUGGY]  if(c  ==  ')')  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ')')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ')')  {  checkLenient();  }	  if(stack    ==    null)    {    checkLenient();    }    	non-compiled	[CE]  	111	None	replace
1286	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [CE]  empty  character  literal  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  empty  character  literal	123	None	replace
1287	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [CE]  empty  character  literal  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  empty  character  literal	123	None	replace
1288	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [CE]  empty  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLenient((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  }	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  empty  character  literal	123	None	replace
1289	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   "  [CE]  empty  character  literal  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   "  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLiteral((  char)  c))  {  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   "	  if(isLiteral((    char)c))    {    if(peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    }    	non-compiled	[CE]  empty  character  literal	123	None	replace
1290	[BUG]  [BUGGY]  while(isLenient((  char)c)  <  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c)  <  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c)  <  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  while(isLiteral((    char)c)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	136	None	replace
1291	[BUG]  [BUGGY]  while(isLiteral((  char)c)  <  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)c)  <  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)c)  <  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  while(isLiteral((    char)c)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	136	None	replace
1292	[BUG]  [BUGGY]  while(stack.hasNext()  &&  stack.next()!=  JsonScope.NONEMPTY_OBJECT)  {  stack.add(stack.next());  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.hasNext()  &&  stack.next()!=  JsonScope.NONEMPTY_OBJECT)  {  stack.add(stack.next());  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.hasNext()  &&  stack.next()!=  JsonScope.NONEMPTY_OBJECT)  {  stack.add(stack.next());	  while(stack.hasNext())    {    stack.add(stack.next());    	non-compiled	[CE]  	159	None	replace
1293	[BUG]  [BUGGY]  while(stack.hasNext()  &&  stack.next()!=  JsonScope.NONEMPTY_STRING)  {  stack.add(stack.next());  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.hasNext()  &&  stack.next()!=  JsonScope.NONEMPTY_STRING)  {  stack.add(stack.next());  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.hasNext()  &&  stack.next()!=  JsonScope.NONEMPTY_STRING)  {  stack.add(stack.next());	  while(stack.hasNext())    {    stack.add(stack.next());    	non-compiled	[CE]  	159	None	replace
1294	[BUG]  [BUGGY]  while(stack.isEmpty())  {  stack.add(stack.next());  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.isEmpty())  {  stack.add(stack.next());  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.isEmpty())  {  stack.add(stack.next());	  while(stack.hasNext())    {    stack.add(stack.next());    	non-compiled	[CE]  	159	None	replace
1295	[BUG]  [BUGGY]  while(stack.hasNext())  {  stack.add(stack.next(),  peeked);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stack.hasNext())  {  stack.add(stack.next(),  peeked);  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stack.hasNext())  {  stack.add(stack.next(),  peeked);	  while(stack.hasNext())    {    stack.add(stack.next());    	non-compiled	[CE]  	159	None	replace
1296	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  checkLenient();  }	  if(c    ==    'e'    ||    c    ==    'E')    {    checkLenient();    }    	non-compiled	[CE]  	27	None	replace
1297	[BUG]  [BUGGY]  Integer  pos  =  stack[stackSize  -  1]  |  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  pos  =  stack[stackSize  -  1]  |  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  pos  =  stack[stackSize  -  1]  |  JsonScope.NONEMPTY_OBJECT;	  Integer    pos    =    stack[stackSize    -    1];    	non-compiled	[CE]  	139	None	replace
1298	[BUG]  [BUGGY]  Integer  pos  =  stack[stackSize  -  1]  -  1;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  Integer  pos  =  stack[stackSize  -  1]  -  1;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	Integer  pos  =  stack[stackSize  -  1]  -  1;	  Integer    pos    =    stack[stackSize    -    1];    	non-compiled	[CE]  	139	None	replace
1299	[BUG]  [BUGGY]  while(isLenient((  char)c)  ||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLenient((  char)c)  ||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLenient((  char)c)  ||  peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	114	None	replace
1300	[BUG]  [BUGGY]  luate(stack.length  -  1))  {  checkLenient();  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  luate(stack.length  -  1))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	luate(stack.length  -  1))  {  checkLenient();  }	  luate(stack.length()    -    1))    {    checkLenient();    }    	non-compiled	[CE]  	61	None	replace
1301	[BUG]  [BUGGY]  luate(pathIndices.length  -  1))  {  checkLenient();  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  luate(pathIndices.length  -  1))  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	luate(pathIndices.length  -  1))  {  checkLenient();  }	  luate(stack.length()    -    1))    {    checkLenient();    }    	non-compiled	[CE]  	61	None	replace
1302	[BUG]  [BUGGY]  int  pos  =  stack.lastIndexOf('');  [CE]  empty  character  literal  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.lastIndexOf('');  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.lastIndexOf('');	  int    pos    =    stack.length();    	non-compiled	[CE]  empty  character  literal	48	None	replace
1303	[BUG]  [BUGGY]  int  pos  =  stack.indexOf('')+  1;  [CE]  empty  character  literal  [FE]                              JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  pos  =  stack.indexOf('')+  1;  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  pos  =  stack.indexOf('')+  1;	  int    pos    =    stack.length();    	non-compiled	[CE]  empty  character  literal	48	None	replace
1304	[BUG]  [BUGGY]  if(c  ==  '['  ||  c  ==  ']'  ||  c  ==  '[')  {  checkLenient();  }  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '['  ||  c  ==  ']'  ||  c  ==  '[')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '['  ||  c  ==  ']'  ||  c  ==  '[')  {  checkLenient();  }	  if(c    ==    '['    ||    c    ==    ']')    {    checkLenient();    }    	non-compiled	[CE]  	179	None	replace
1305	[BUG]  [BUGGY]  if(c  ==  '['  ||  c  ==  ']'  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '['  ||  c  ==  ']'  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '['  ||  c  ==  ']'  ||  c  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(c    ==    '['    ||    c    ==    ']')    {    checkLenient();    }    	non-compiled	[CE]  	179	None	replace
1306	[BUG]  [BUGGY]  if(c  =='<'||  c  ==  '>')  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  =='<'||  c  ==  '>')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  =='<'||  c  ==  '>')  {  checkLenient();  }	  if(c    ==    '['    ||    c    ==    ']')    {    checkLenient();    }    	non-compiled	[CE]  	179	None	replace
1307	[BUG]  [BUGGY]  if(c  ==  '['  ||  c  ==  ']'  ||  c  ==  JsonScope.DOUBLE_QUOTED_NAME)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '['  ||  c  ==  ']'  ||  c  ==  JsonScope.DOUBLE_QUOTED_NAME)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '['  ||  c  ==  ']'  ||  c  ==  JsonScope.DOUBLE_QUOTED_NAME)  {  checkLenient();  }	  if(c    ==    '['    ||    c    ==    ']')    {    checkLenient();    }    	non-compiled	[CE]  	179	None	replace
1308	[BUG]  [BUGGY]  while(stackTop  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(stackTop  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(stackTop  ==  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack    ==    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	3	None	replace
1309	[BUG]  [BUGGY]  if(c  ==  '''  ||  c  ==  ''')  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '''  ||  c  ==  ''')  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '''  ||  c  ==  ''')  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  empty  character  literal	95	None	replace
1310	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked  =  PEEKED_END_OBJECT;  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	95	None	replace
1311	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked;  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(isLenient((  char)c))  {  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  return  peeked;  }	  if(isLiteral((    char)c))    {    if(stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	95	None	replace
1312	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  ')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  unclosed  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ','  ||  c  ==  ')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ','  ||  c  ==  ')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  unclosed  character  literal	41	None	replace
1313	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  ':')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    '''    ||    c    ==    '')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  	41	None	replace
1314	[BUG]  [BUGGY]  if(stack!=  null  &&  stack.length()  ==  0)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack!=  null  &&  stack.length()  ==  0)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack!=  null  &&  stack.length()  ==  0)  {  checkLenient();  }	  if(stack!=    null    ||    stack.length()    ==    0)    {    checkLenient();    }    	non-compiled	[CE]  	109	None	replace
1315	[BUG]  [BUGGY]  if(c!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c!=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  if(peekStack!=    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	63	None	replace
1316	[BUG]  [BUGGY]  while(c!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(c!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(c!=  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	22	None	replace
1317	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)c))  {  return  PEEKED_BOOLEAN_QUOTED_NAME;  }  [CE]  empty  character  literal  [FE]                        JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)c))  {  return  PEEKED_BOOLEAN_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLenient((  char)c))  {  return  PEEKED_BOOLEAN_QUOTED_NAME;  }	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    PEEKED_DOUBLE_QUOTED_NAME;    }    	non-compiled	[CE]  empty  character  literal	170	None	replace
1318	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)c))  <  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [CE]  empty  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)c))  <  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLenient((  char)c))  <  return  PEEKED_DOUBLE_QUOTED_NAME;  }	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    PEEKED_DOUBLE_QUOTED_NAME;    }    	non-compiled	[CE]  empty  character  literal	170	None	replace
1319	[BUG]  [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)ch))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [CE]  empty  character  literal  [FE]                            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  ''')  {  if(isLenient((  char)ch))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  ''')  {  if(isLenient((  char)ch))  {  return  PEEKED_DOUBLE_QUOTED_NAME;  }	  if(c    ==    '')    {    if(isLenient((    char)c))    {    return    PEEKED_DOUBLE_QUOTED_NAME;    }    	non-compiled	[CE]  empty  character  literal	170	None	replace
1320	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_DOUBLE_QUOTED_OBJECT;  }  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_DOUBLE_QUOTED_OBJECT;  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_DOUBLE_QUOTED_OBJECT;  }	  if(peekStack    ==    JsonScope.NONEMPTY_OBJECT)    {    return    peeked    =    PEEKED_BUFFERED_OBJECT;    }    	non-compiled	[CE]  	163	None	replace
1321	[BUG]  [BUGGY]  while(isLiteral((  char)  c)  ||  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  while(isLiteral((  char)  c)  ||  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	while(isLiteral((  char)  c)  ||  peekStack!=  JsonScope.NONEMPTY_LONG)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  while(isLiteral((    char)c)&&    peekStack!=    JsonScope.NONEMPTY_LONG)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	99	None	replace
1322	[BUG]  [BUGGY]  int  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  int  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	int  stack[stackSize  -  1]  >=  JsonScope.NONEMPTY_STRING)  {  checkLenient();  }	  int    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    checkLenient();    }    	non-compiled	[CE]  	36	None	replace
1323	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	45	None	replace
1324	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(peekStack!=  JsonScope.NONEMPTY_OBJECT)  {  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  checkLenient();  }	  if(peekStack!=    JsonScope.NONEMPTY_OBJECT)    {    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  not  a  statement	45	None	replace
1325	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_ARRAY)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  	153	None	replace
1326	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  c  ==  JsonScope.NONEMPTY_DECIMAL)  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name: ");  }	  if(c    ==    JsonScope.NONEMPTY_OBJECT)    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name:   ");    }    	non-compiled	[CE]  	153	None	replace
1327	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ';')  {  checkLenient();  }  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  ';')  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  ';')  {  checkLenient();  }	  if(c    ==    '.'    ||    c    ==    '')    {    checkLenient();    }    	non-compiled	[CE]  	108	None	replace
1328	[BUG]  [BUGGY]  if(stack.length()!=  1)  {  checkLenient();  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(stack.length()!=  1)  {  checkLenient();  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(stack.length()!=  1)  {  checkLenient();  }	  if(stack.length()    ==    1)    {    checkLenient();    }    	non-compiled	[CE]  	56	None	replace
1329	[BUG]  [BUGGY]  parent  ==  null  ||  c  ==  '.'  ||  c  ==  ':')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  null  ||  c  ==  '.'  ||  c  ==  ':')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  null  ||  c  ==  '.'  ||  c  ==  ':')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    '.'    ||    c    ==    ':')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	154	None	replace
1330	[BUG]  [BUGGY]  parent  ==  null  ||  c  ==  '.')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  parent  ==  null  ||  c  ==  '.')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	parent  ==  null  ||  c  ==  '.')  {  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    '.'    ||    c    ==    ':')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  not  a  statement	154	None	replace
1331	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  return  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '\'':  checkLenient();  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:      [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  return  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3849001794597505	512	512	3	replace	if(c  ==  '.'  ||  c  ==  ':')  {  return  checkLenient();  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    '.'    ||    c    ==    ':')    {    checkLenient();    }    else    {    throw    syntaxError(   "Expected    name       ");    }    	non-compiled	[CE]  	154	None	replace
