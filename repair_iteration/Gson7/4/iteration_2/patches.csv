bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peekStack[stackSize]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peekStack[stackSize]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peekStack[stackSize]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	108	None	replace
2	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)&&  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)&&  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)&&  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	108	None	replace
3	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)&&  peekStack[stackSize]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)&&  peekStack[stackSize]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)&&  peekStack[stackSize]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	108	None	replace
4	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)&&  peekStack[pos]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)&&  peekStack[pos]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)&&  peekStack[pos]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	108	None	replace
5	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	53	None	replace
6	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	53	None	replace
7	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	53	None	replace
8	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	53	None	replace
9	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	53	None	replace
10	[BUG]  [BUGGY]  if(isLiteral((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {	  if(isLiteral((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG))    {    	non-compiled	[CE]  	140	None	replace
11	[BUG]  [BUGGY]  if(isLiteral((  String)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {	  if(isLiteral((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG))    {    	non-compiled	[CE]  	140	None	replace
12	[BUG]  [BUGGY]  if(isLiteral((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {	  if(isLiteral((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG))    {    	non-compiled	[CE]  	140	None	replace
13	[BUG]  [BUGGY]  if(isUpperCase((  String)c)&&  isLenient((  String)c))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUpperCase((  String)c)&&  isLenient((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUpperCase((  String)c)&&  isLenient((  String)c))  {	  if(isUpperCase((    String)c)    ||    isLenient((    String)c))    {    	non-compiled	[CE]  	29	None	replace
14	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)||  isLenient((  String)c))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)||  isLenient((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)||  isLenient((  String)c))  {	  if(isUpperCase((    String)c)    ||    isLenient((    String)c))    {    	non-compiled	[CE]  	29	None	replace
15	[BUG]  [BUGGY]  if(isUpperCase((  String)c)||  isLenient((  String)c)||  peekedString  ==  null)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUpperCase((  String)c)||  isLenient((  String)c)||  peekedString  ==  null)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUpperCase((  String)c)||  isLenient((  String)c)||  peekedString  ==  null)  {	  if(isUpperCase((    String)c)    ||    isLenient((    String)c))    {    	non-compiled	[CE]  	29	None	replace
16	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  &&!lenient  Reader  &&  isLiteral((  char)c))  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  &&!lenient  Reader  &&  isLiteral((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  &&!lenient  Reader  &&  isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||!lenient    Reader    &&    isLiteral((    char)c))    {    	non-compiled	[CE]  	102	None	replace
17	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isLiteral((  char)c))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isLiteral((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isLiteral((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||!lenient    Reader    &&    isLiteral((    char)c))    {    	non-compiled	[CE]  	102	None	replace
18	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isLenient((  char)c))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isLenient((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isLenient((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||!lenient    Reader    &&    isLiteral((    char)c))    {    	non-compiled	[CE]  	102	None	replace
19	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  peekStack.contains((  char)c))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  peekStack.contains((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  peekStack.contains((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||!lenient    Reader    &&    isLiteral((    char)c))    {    	non-compiled	[CE]  	102	None	replace
20	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isLiteral((  String)c))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isLiteral((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isLiteral((  String)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||!lenient    Reader    &&    isLiteral((    char)c))    {    	non-compiled	[CE]  	102	None	replace
21	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isString((  char)c))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isString((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isString((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||!lenient    Reader    &&    isLiteral((    char)c))    {    	non-compiled	[CE]  	102	None	replace
22	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME))    {    	non-compiled	[CE]  	127	None	replace
23	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME))    {    	non-compiled	[CE]  	127	None	replace
24	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME))    {    	non-compiled	[CE]  	127	None	replace
25	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.DANGLING_NAME))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.DANGLING_NAME))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.DANGLING_NAME))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME))    {    	non-compiled	[CE]  	127	None	replace
26	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)&&  isUnquotedString((  String)c))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)&&  isUnquotedString((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)&&  isUnquotedString((  String)c))  {	  if(isUnquotedString((    String)c)||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	133	None	replace
27	[BUG]  [BUGGY]  if(isNonWhitespace((  String)c)  ||  isUnquotedString((  String)c))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isNonWhitespace((  String)c)  ||  isUnquotedString((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isNonWhitespace((  String)c)  ||  isUnquotedString((  String)c))  {	  if(isUnquotedString((    String)c)||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	133	None	replace
28	[BUG]  [BUGGY]  if(isSingleQuotedString((  String)c)  ||  isUnquotedString((  String)c))  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isSingleQuotedString((  String)c)  ||  isUnquotedString((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isSingleQuotedString((  String)c)  ||  isUnquotedString((  String)c))  {	  if(isUnquotedString((    String)c)||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	133	None	replace
29	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	20	None	replace
30	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	20	None	replace
31	[BUG]  [BUGGY]  if(isLenient((  char)c)  ||  isLiteral((  char)c))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)  ||  isLiteral((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)  ||  isLiteral((  char)c))  {	  if(isUnquotedString((    char)c)||    isLiteral((    char)c))    {    	non-compiled	[CE]  	24	None	replace
32	[BUG]  [BUGGY]  if(isLenient((  char)c)&&  isUnquotedString((  char)c))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)&&  isUnquotedString((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)&&  isUnquotedString((  char)c))  {	  if(isLenient((    char)c)    ||    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	25	None	replace
33	[BUG]  [BUGGY]  if(isLenient((  int)c)||  isUnquotedString((  int)c))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  int)c)||  isUnquotedString((  int)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  int)c)||  isUnquotedString((  int)c))  {	  if(isLenient((    char)c)    ||    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	25	None	replace
34	[BUG]  [BUGGY]  if(isLenient((  Character)c)||  isUnquotedString((  Character)c))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  Character)c)||  isUnquotedString((  Character)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  Character)c)||  isUnquotedString((  Character)c))  {	  if(isLenient((    char)c)    ||    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	25	None	replace
35	[BUG]  [BUGGY]  if(isLiteral((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)&&    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	57	None	replace
36	[BUG]  [BUGGY]  if(isLiteral((  char)peekStack[stackSize  -  1])  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)peekStack[stackSize  -  1])  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)peekStack[stackSize  -  1])  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)&&    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	57	None	replace
37	[BUG]  [BUGGY]  if(isLiteral((  char)peekStack)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)peekStack)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)peekStack)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)peekStack)&&    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	119	None	replace
38	[BUG]  [BUGGY]  if(isLiteral((  char)peekStack)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)peekStack)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)peekStack)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)peekStack)&&    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	119	None	replace
39	[BUG]  [BUGGY]  if(isLiteral((  String)peekStack)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)peekStack)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)peekStack)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)peekStack)&&    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	119	None	replace
40	[BUG]  [BUGGY]  if(isLenient((  char)peekStack)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)peekStack)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)peekStack)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)peekStack)&&    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	119	None	replace
41	[BUG]  [BUGGY]  if(isLiteral((  char)peekStack)&&  stack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)peekStack)&&  stack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)peekStack)&&  stack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)peekStack)&&    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	119	None	replace
42	[BUG]  [BUGGY]  if(isLiteral((  char)peekStack)&&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)peekStack)&&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)peekStack)&&  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)peekStack)&&    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	119	None	replace
43	[BUG]  [BUGGY]  if(isLiteral((  String)c)&&  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)&&  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)&&  peeked  ==  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    char)c)    &&    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	75	None	replace
44	[BUG]  [BUGGY]  if(isLenient((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    char)c)    &&    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	75	None	replace
45	[BUG]  [BUGGY]  if(isLong((  String)c)&&  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLong((  String)c)&&  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLong((  String)c)&&  peeked  ==  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    char)c)    &&    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	75	None	replace
46	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)&&  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)&&  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)&&  peeked  ==  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    char)c)    &&    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	75	None	replace
47	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(pathNames,  peekedString);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(pathNames,  peekedString);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(pathNames,  peekedString);	  int[]    pathIndices    =    stack.toArray(pathNames);    	non-compiled	[CE]  	60	None	replace
48	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(pathNames)+  1;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(pathNames)+  1;  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(pathNames)+  1;	  int[]    pathIndices    =    stack.toArray(pathNames);    	non-compiled	[CE]  	60	None	replace
49	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(pathNames,  0);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(pathNames,  0);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(pathNames,  0);	  int[]    pathIndices    =    stack.toArray(pathNames);    	non-compiled	[CE]  	60	None	replace
50	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(pathNames,  PEEKED_BUFFERED);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(pathNames,  PEEKED_BUFFERED);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(pathNames,  PEEKED_BUFFERED);	  int[]    pathIndices    =    stack.toArray(pathNames);    	non-compiled	[CE]  	60	None	replace
51	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(pathNames,  false);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(pathNames,  false);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(pathNames,  false);	  int[]    pathIndices    =    stack.toArray(pathNames);    	non-compiled	[CE]  	60	None	replace
52	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(pathNames,  true);  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(pathNames,  true);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(pathNames,  true);	  int[]    pathIndices    =    stack.toArray(pathNames);    	non-compiled	[CE]  	60	None	replace
53	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	38	None	replace
54	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	38	None	replace
55	[BUG]  [BUGGY]  if(isLiteral((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(isLiteral((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	141	None	replace
56	[BUG]  [BUGGY]  if(isLiteral((  String)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(isLiteral((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	141	None	replace
57	[BUG]  [BUGGY]  if(isLiteral((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(isLiteral((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	141	None	replace
58	[BUG]  [BUGGY]  if(isLiteral((  String)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {	  if(isLiteral((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	141	None	replace
59	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME)    {    	non-compiled	[CE]  	109	None	replace
60	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME)    {    	non-compiled	[CE]  	109	None	replace
61	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME)    {    	non-compiled	[CE]  	109	None	replace
62	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONE);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONE);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONE);	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONE);    	non-compiled	[CE]  	16	None	replace
63	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONE);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONE);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONE);	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONE);    	non-compiled	[CE]  	16	None	replace
64	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONE);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONE);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONE);	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONE);    	non-compiled	[CE]  	16	None	replace
65	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[peekSize  -  1]  ==  JsonScope.NONE);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[peekSize  -  1]  ==  JsonScope.NONE);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peekStack[peekSize  -  1]  ==  JsonScope.NONE);	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONE);    	non-compiled	[CE]  	16	None	replace
66	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	137	None	replace
67	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	137	None	replace
68	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	137	None	replace
69	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	137	None	replace
70	[BUG]  [BUGGY]  if(isLenient((  char)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c)    &&    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	66	None	replace
71	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c)    &&    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	66	None	replace
72	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c)    &&    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	66	None	replace
73	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c)    &&    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	66	None	replace
74	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {	  if(isUnquotedString((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME)    {    	non-compiled	[CE]  	92	None	replace
75	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.DANGLING_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.DANGLING_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.DANGLING_NAME)  {	  if(isUnquotedString((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME)    {    	non-compiled	[CE]  	92	None	replace
76	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  	138	None	replace
77	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  	98	None	replace
78	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  	98	None	replace
79	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  	98	None	replace
80	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[peekSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[peekSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peekStack[peekSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  	98	None	replace
81	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  	98	None	replace
82	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLiteral((  char)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)&&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	54	None	replace
83	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  <  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  <  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  <  PEEKED_BUFFERED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)&&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	54	None	replace
84	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  <  =  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  <  =  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  <  =  PEEKED_BUFFERED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)&&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	54	None	replace
85	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)&&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	54	None	replace
86	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  >=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  >=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  >=  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)&&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	54	None	replace
87	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c)  &&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c)  &&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  String)c)  &&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)&&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	54	None	replace
88	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  peeked!=  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  peeked!=  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  peeked!=  PEEKED_BUFFERED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked!=    PEEKED_BUFFERED_NAME)    {    	non-compiled	[CE]  	10	None	replace
89	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  peeked!=  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)&&  peeked!=  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  peeked!=  PEEKED_BUFFERED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked!=    PEEKED_BUFFERED_NAME)    {    	non-compiled	[CE]  	10	None	replace
90	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  peeked  <  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  peeked  <  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  peeked  <  PEEKED_BUFFERED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked    <    PEEKED_BUFFERED_NAME)    {    	non-compiled	[CE]  	34	None	replace
91	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  <  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  peeked  <  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peeked  <  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked    <    PEEKED_BUFFERED_NAME)    {    	non-compiled	[CE]  	34	None	replace
92	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  peeked  <  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)&&  peeked  <  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  peeked  <  PEEKED_BUFFERED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked    <    PEEKED_BUFFERED_NAME)    {    	non-compiled	[CE]  	34	None	replace
93	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  >=  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  peeked  >=  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peeked  >=  PEEKED_BUFFERED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked    <    PEEKED_BUFFERED_NAME)    {    	non-compiled	[CE]  	34	None	replace
94	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  <  PEEKED_BUFFERED)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  peeked  <  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peeked  <  PEEKED_BUFFERED)  {	  if(isLiteral((    char)c)    &&    peeked    <    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	76	None	replace
95	[BUG]  [BUGGY]  if(isLiteral((  String)c)&&  peeked  <  PEEKED_BUFFERED)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)&&  peeked  <  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)&&  peeked  <  PEEKED_BUFFERED)  {	  if(isLiteral((    char)c)    &&    peeked    <    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	76	None	replace
96	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  peeked  <  =  PEEKED_BUFFERED)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)&&  peeked  <  =  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  peeked  <  =  PEEKED_BUFFERED)  {	  if(isLiteral((    char)c)    &&    peeked    <    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	76	None	replace
97	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  peeked  <  PEEKED_BUFFERED)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  peeked  <  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  peeked  <  PEEKED_BUFFERED)  {	  if(isLiteral((    char)c)    &&    peeked    <    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	76	None	replace
98	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  peeked  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)&&  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  peeked  ==  PEEKED_BUFFERED)  {	  if(isLiteral((    char)c)    &&    peeked    <    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	76	None	replace
99	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  peeked  <  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)&&  peeked  <  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  peeked  <  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    char)c)    &&    peeked    <    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	76	None	replace
100	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    char)c)||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	80	None	replace
101	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	36	None	replace
102	[BUG]  [BUGGY]  int  stackSize  =  stack.length()  -  1;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  stackSize  =  stack.length()  -  1;  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  stack.length()  -  1;	  int    stackSize    =    stack.length();    	non-compiled	[CE]  	61	None	replace
103	[BUG]  [BUGGY]  int  stackSize  =  stack.length()  +  1;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  stackSize  =  stack.length()  +  1;  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  stack.length()  +  1;	  int    stackSize    =    stack.length();    	non-compiled	[CE]  	61	None	replace
104	[BUG]  [BUGGY]  int  stackSize  =  stack.length  -  1;  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  stackSize  =  stack.length  -  1;  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  stack.length  -  1;	  int    stackSize    =    stack.length();    	non-compiled	[CE]  	61	None	replace
105	[BUG]  [BUGGY]  int  stackSize  =  stack.length()  -  2;  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  stackSize  =  stack.length()  -  2;  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  stack.length()  -  2;	  int    stackSize    =    stack.length();    	non-compiled	[CE]  	61	None	replace
106	[BUG]  [BUGGY]  int  stackSize  =  stack.length()  -  4;  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  stackSize  =  stack.length()  -  4;  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  stack.length()  -  4;	  int    stackSize    =    stack.length();    	non-compiled	[CE]  	61	None	replace
107	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	87	None	replace
108	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  peeked  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peeked  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	87	None	replace
109	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  peeked  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  peeked  ==  PEEKED_BUFFERED)  {	  if(!lenient    Reader((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	15	None	replace
110	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked  <  =  PEEKED_BUFFERED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked  <  =  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peeked  <  =  PEEKED_BUFFERED)  {	  if(!lenient    Reader((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	15	None	replace
111	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)  ||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)  ||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)  ||  peeked  ==  PEEKED_BUFFERED)  {	  if(!lenient    Reader((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	15	None	replace
112	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked  >=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked  >=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peeked  >=  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	15	None	replace
113	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	11	None	replace
114	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	11	None	replace
115	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peekStack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	11	None	replace
116	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	11	None	replace
117	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	11	None	replace
118	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[peekStackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[peekStackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peekStack[peekStackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	11	None	replace
119	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  isLenient((  String)c))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  isLenient((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  isLenient((  String)c))  {	  if(isLenient((    String)c)||    isLiteral((    String)c))    {    	non-compiled	[CE]  	71	None	replace
120	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  isLiteral((  String)c))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  isLiteral((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  isLiteral((  String)c))  {	  if(isLenient((    String)c)||    isLiteral((    String)c))    {    	non-compiled	[CE]  	71	None	replace
121	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  isTransient((  String)c))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  isTransient((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  isTransient((  String)c))  {	  if(isLenient((    String)c)||    isLiteral((    String)c))    {    	non-compiled	[CE]  	71	None	replace
122	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  isLiteral((  String)peekStack[pos]))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  isLiteral((  String)peekStack[pos]))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  isLiteral((  String)peekStack[pos]))  {	  if(isLenient((    String)c)||    isLiteral((    String)c))    {    	non-compiled	[CE]  	71	None	replace
123	[BUG]  [BUGGY]  if(isLenient((  char)c)||  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)||  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)||  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLenient((    char)c)    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	150	None	replace
124	[BUG]  [BUGGY]  if(isLenient((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLenient((    char)c)    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	150	None	replace
125	[BUG]  [BUGGY]  if(isLenient((  char)c)||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLenient((    char)c)    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	150	None	replace
126	[BUG]  [BUGGY]  if(isLenient((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLenient((    char)c)    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	150	None	replace
127	[BUG]  [BUGGY]  if(isLenient((  char)c)||  stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)||  stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)||  stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLenient((    char)c)    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	150	None	replace
128	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  isUpperCase((  String)c))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  isUpperCase((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  isUpperCase((  String)c))  {	  if(isLenient((    String)c)||    isUpperCase((    String)c))    {    	non-compiled	[CE]  	31	None	replace
129	[BUG]  [BUGGY]  if(isLenient((  String)c)||  isUpperCase((  String)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)||  isUpperCase((  String)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  isUpperCase((  String)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(isLenient((    String)c)||    isUpperCase((    String)c))    {    	non-compiled	[CE]  	31	None	replace
130	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  isUpperCase((  String)peekStack[pos]))  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  isUpperCase((  String)peekStack[pos]))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  isUpperCase((  String)peekStack[pos]))  {	  if(isLenient((    String)c)||    isUpperCase((    String)c))    {    	non-compiled	[CE]  	31	None	replace
131	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  peekStack[pos--]  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  peekStack[pos--]  ==  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  peekStack[pos--]  ==  PEEKED_BUFFERED)  {	  if(isLenient((    String)c)||    peekStack[pos--]    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	91	None	replace
132	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  peekStack[pos-1]  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  peekStack[pos-1]  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  peekStack[pos-1]  ==  PEEKED_UNQUOTED_NAME)  {	  if(isLenient((    String)c)||    peekStack[pos--]    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	91	None	replace
133	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  peekStack[pos--]  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  peekStack[pos--]  ==  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  peekStack[pos--]  ==  PEEKED_BUFFERED)  {	  if(isLenient((    String)c)||    peekStack[pos--]    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	91	None	replace
134	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  peekStack[pos--]!=  PEEKED_BUFFERED)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  peekStack[pos--]!=  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  peekStack[pos--]!=  PEEKED_BUFFERED)  {	  if(isLenient((    String)c)||    peekStack[pos--]    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	91	None	replace
135	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME)    {    	non-compiled	[CE]  	100	None	replace
136	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME)    {    	non-compiled	[CE]  	100	None	replace
137	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.DANGLING_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.DANGLING_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.DANGLING_NAME)  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME)    {    	non-compiled	[CE]  	100	None	replace
138	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME)    {    	non-compiled	[CE]  	100	None	replace
139	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[peekSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[peekSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peekStack[peekSize  -  1]  ==  JsonScope.DANGLING_NAME)  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME)    {    	non-compiled	[CE]  	100	None	replace
140	[BUG]  [BUGGY]  if(isLong((  String)c)  ||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLong((  String)c)  ||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLong((  String)c)  ||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    String)c)&&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	2	None	replace
141	[BUG]  [BUGGY]  if(isLiteral((  String)c)  &&  peeked  <  =  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)  &&  peeked  <  =  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)  &&  peeked  <  =  PEEKED_BUFFERED_NAME)  {	  if(isLiteral((    String)c)&&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	2	None	replace
142	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(true,  PEEKED_DOUBLE_QUOTED_NAME);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  pos  =  nextNonWhitespace(true,  PEEKED_DOUBLE_QUOTED_NAME);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  pos  =  nextNonWhitespace(true,  PEEKED_DOUBLE_QUOTED_NAME);	  int    pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	117	None	replace
143	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(true,  PEEKED_BUFFERED);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  pos  =  nextNonWhitespace(true,  PEEKED_BUFFERED);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  pos  =  nextNonWhitespace(true,  PEEKED_BUFFERED);	  int    pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	117	None	replace
144	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(false,  PEEKED_DOUBLE_QUOTED_NAME);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  pos  =  nextNonWhitespace(false,  PEEKED_DOUBLE_QUOTED_NAME);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  pos  =  nextNonWhitespace(false,  PEEKED_DOUBLE_QUOTED_NAME);	  int    pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	117	None	replace
145	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(true,  PEEKED_SINGLE_QUOTED_NAME);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  pos  =  nextNonWhitespace(true,  PEEKED_SINGLE_QUOTED_NAME);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  pos  =  nextNonWhitespace(true,  PEEKED_SINGLE_QUOTED_NAME);	  int    pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	117	None	replace
146	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(false,  JsonScope.NONEMPTY_OBJECT);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  pos  =  nextNonWhitespace(false,  JsonScope.NONEMPTY_OBJECT);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  pos  =  nextNonWhitespace(false,  JsonScope.NONEMPTY_OBJECT);	  int    pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	117	None	replace
147	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  isImmutableChar((  char)c))  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  isImmutableChar((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  isImmutableChar((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isImmutableChar((    char)c))    {    	non-compiled	[CE]  	46	None	replace
148	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)||  isImmutableChar((  char)c))  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)||  isImmutableChar((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)||  isImmutableChar((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isImmutableChar((    char)c))    {    	non-compiled	[CE]  	46	None	replace
149	[BUG]  [BUGGY]  if(!lenientReaders((  char)c)||  isImmutableChar((  char)c))  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenientReaders((  char)c)||  isImmutableChar((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenientReaders((  char)c)||  isImmutableChar((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isImmutableChar((    char)c))    {    	non-compiled	[CE]  	46	None	replace
150	[BUG]  [BUGGY]  if(isLiteral((  String)c)  ||  peeked  <  =  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)  ||  peeked  <  =  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)  ||  peeked  <  =  PEEKED_BUFFERED_NAME)  {	  if(isLiteral((    char)c)&&    peeked    <    =    PEEKED_BUFFERED_NAME)    {    	non-compiled	[CE]  	107	None	replace
151	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)&&  isImmutableValue((  char)c))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)&&  isImmutableValue((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)&&  isImmutableValue((  char)c))  {	  if(!lenient    Reader((    char)c)    &&    isLiteral((    char)c))    {    	non-compiled	[CE]  	43	None	replace
152	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)&&  isLiteral((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)&&  isLiteral((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)&&  isLiteral((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader((    char)c)    &&    isLiteral((    char)c))    {    	non-compiled	[CE]  	43	None	replace
153	[BUG]  [BUGGY]  if(isLenient((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(isLenient((    char)c)    ||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	147	None	replace
154	[BUG]  [BUGGY]  if(isLenient((  char)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(isLenient((    char)c)    ||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	147	None	replace
155	[BUG]  [BUGGY]  if(isLenient((  char)c)||  peeked  >=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)||  peeked  >=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)||  peeked  >=  PEEKED_UNQUOTED_NAME)  {	  if(isLenient((    char)c)    ||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	147	None	replace
156	[BUG]  [BUGGY]  if(isLenient((  char)c)||  peeked  <  =  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)||  peeked  <  =  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)||  peeked  <  =  PEEKED_BUFFERED_NAME)  {	  if(isLenient((    char)c)    ||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	147	None	replace
157	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  <  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  <  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peeked  <  PEEKED_BUFFERED_NAME)  {	  if(isUnquotedString((    String)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	42	None	replace
158	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  <  =  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  <  =  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peeked  <  =  PEEKED_BUFFERED_NAME)  {	  if(isUnquotedString((    String)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	42	None	replace
159	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peeked  ==  PEEKED_UNQUOTED_NAME)  {	  if(isUnquotedString((    String)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	42	None	replace
160	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(isUnquotedString((    String)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	42	None	replace
161	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  >  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  >  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peeked  >  PEEKED_UNQUOTED_NAME)  {	  if(isUnquotedString((    String)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	42	None	replace
162	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  <  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  <  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peeked  <  NUMBER_CHAR_QUOTED_NAME)  {	  if(isUnquotedString((    String)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	42	None	replace
163	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  >=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  >=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peeked  >=  PEEKED_UNQUOTED_NAME)  {	  if(isUnquotedString((    String)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	42	None	replace
164	[BUG]  [BUGGY]  if(isLenient((  int)c)  ||  isUpperCase((  int)c))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  int)c)  ||  isUpperCase((  int)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  int)c)  ||  isUpperCase((  int)c))  {	  if(isLenient((    char)c)||    isUpperCase((    char)c))    {    	non-compiled	[CE]  	28	None	replace
165	[BUG]  [BUGGY]  if(isLenient((  Character)c)  ||  isUpperCase((  Character)c))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  Character)c)  ||  isUpperCase((  Character)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  Character)c)  ||  isUpperCase((  Character)c))  {	  if(isLenient((    char)c)||    isUpperCase((    char)c))    {    	non-compiled	[CE]  	28	None	replace
166	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader((    char)c)||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	14	None	replace
167	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)  ||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)  ||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)  ||  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader((    char)c)||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	14	None	replace
168	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked!=  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked!=  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peeked!=  PEEKED_BUFFERED_NAME)  {	  if(!lenient    Reader((    char)c)||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	14	None	replace
169	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  peeked!=  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  peeked!=  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  peeked!=  PEEKED_BUFFERED_NAME)  {	  if(!lenient    Reader((    char)c)||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	14	None	replace
170	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked  ==  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked  ==  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peeked  ==  PEEKED_BUFFERED_NAME)  {	  if(!lenient    Reader((    char)c)||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	14	None	replace
171	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked!=  PEEKED_BUFFERED_OBJECT)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked!=  PEEKED_BUFFERED_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peeked!=  PEEKED_BUFFERED_OBJECT)  {	  if(!lenient    Reader((    char)c)||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	14	None	replace
172	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLenient((  char)c))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLenient((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLenient((  char)c))  {	  if(!lenient    Reader    ||    isLenient((    char)c))    {    	non-compiled	[CE]  	136	None	replace
173	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLenient((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLenient((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLenient((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader    ||    isLenient((    char)c))    {    	non-compiled	[CE]  	136	None	replace
174	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLenient((  int)c))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLenient((  int)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLenient((  int)c))  {	  if(!lenient    Reader    ||    isLenient((    char)c))    {    	non-compiled	[CE]  	136	None	replace
175	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLenient((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLenient((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLenient((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(!lenient    Reader    ||    isLenient((    char)c))    {    	non-compiled	[CE]  	136	None	replace
176	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	22	None	replace
177	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	22	None	replace
178	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	22	None	replace
179	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	22	None	replace
180	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    char)c)&&    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	99	None	replace
181	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    char)c)&&    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	99	None	replace
182	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    char)c)&&    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	99	None	replace
183	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  peekStack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    char)c)&&    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	99	None	replace
184	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  peekStack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    char)c)&&    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	99	None	replace
185	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	17	None	replace
186	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	17	None	replace
187	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	104	None	replace
188	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	104	None	replace
189	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	104	None	replace
190	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	104	None	replace
191	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	104	None	replace
192	[BUG]  [BUGGY]  if(!lenient  Reader  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	104	None	replace
193	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLiteral((  String)c))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLiteral((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLiteral((  String)c))  {	  if(!lenient    Reader    ||    isLiteral((    String)c))    {    	non-compiled	[CE]  	1	None	replace
194	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader    ||    isLiteral((    String)c))    {    	non-compiled	[CE]  	1	None	replace
195	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLiteral((  String)c))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLiteral((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLiteral((  String)c))  {	  if(!lenient    Reader    ||    isLiteral((    String)c))    {    	non-compiled	[CE]  	1	None	replace
196	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  String)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    String)c))    {    	non-compiled	[CE]  	1	None	replace
197	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader    ||    isLiteral((    String)c))    {    	non-compiled	[CE]  	1	None	replace
198	[BUG]  [BUGGY]  if(isLiteral((  String)c)  &&  isUnquotedString((  String)c))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)  &&  isUnquotedString((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)  &&  isUnquotedString((  String)c))  {	  if(isLiteral((    char)c)&&    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	101	None	replace
199	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)&&  isLiteral((  char)c))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)&&  isLiteral((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)&&  isLiteral((  char)c))  {	  if(isLiteral((    char)c)&&    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	101	None	replace
200	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  isUnquotedChar((  char)c))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  isUnquotedChar((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  isUnquotedChar((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isUnquotedChar((    char)c))    {    	non-compiled	[CE]  	45	None	replace
201	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)||  isUnquotedChar((  char)c))  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)||  isUnquotedChar((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)||  isUnquotedChar((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isUnquotedChar((    char)c))    {    	non-compiled	[CE]  	45	None	replace
202	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  peeked  ==  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader((    char)c)||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	12	None	replace
203	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)  ||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)  ||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)  ||  peeked  ==  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader((    char)c)||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	12	None	replace
204	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peeked  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(!lenient    Reader((    char)c)||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	12	None	replace
205	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked!=  PEEKED_BUFFERED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked!=  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peeked!=  PEEKED_BUFFERED)  {	  if(!lenient    Reader((    char)c)||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	12	None	replace
206	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peeked  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peeked!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	41	None	replace
207	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  <  =  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  <  =  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peeked  <  =  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peeked!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	41	None	replace
208	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peekStack.length!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peekStack.length!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peekStack.length!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peeked!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	41	None	replace
209	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  >=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  >=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peeked  >=  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peeked!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	41	None	replace
210	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  isStatic((  char)c))  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  isStatic((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  isStatic((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isStatic((    char)c))    {    	non-compiled	[CE]  	47	None	replace
211	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)||  isStatic((  String)c))  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)||  isStatic((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)||  isStatic((  String)c))  {	  if(!lenient    Reader((    char)c)    ||    isStatic((    char)c))    {    	non-compiled	[CE]  	47	None	replace
212	[BUG]  [BUGGY]  if(!lenientReaders((  char)c)||  isStatic((  char)c))  {  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenientReaders((  char)c)||  isStatic((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenientReaders((  char)c)||  isStatic((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isStatic((    char)c))    {    	non-compiled	[CE]  	47	None	replace
213	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLiteral((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	134	None	replace
214	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked!=  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked!=  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked!=  PEEKED_BUFFERED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	134	None	replace
215	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c)  ||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c)  ||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  String)c)  ||  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	134	None	replace
216	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  ||  peeked!=  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  ||  peeked!=  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  ||  peeked!=  PEEKED_BUFFERED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	134	None	replace
217	[BUG]  [BUGGY]  if(!lenient  Reader  ||  peeked!=  PEEKED_BUFFERED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  peeked!=  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  peeked!=  PEEKED_BUFFERED)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	134	None	replace
218	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked!=  PEEKED_BUFFERED_OBJECT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked!=  PEEKED_BUFFERED_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked!=  PEEKED_BUFFERED_OBJECT)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	134	None	replace
219	[BUG]  [BUGGY]  int[]  pathNames  =  stack.toArray(new  String[pathNames.size()  -  1]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathNames  =  stack.toArray(new  String[pathNames.size()  -  1]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathNames  =  stack.toArray(new  String[pathNames.size()  -  1]);	  int[]    pathNames    =    stack.toArray(new    String[pathNames.size()    ]);    	non-compiled	[CE]  	146	None	replace
220	[BUG]  [BUGGY]  int[]  pathNames  =  stack.toArray(new  String[pathNames.size()  +  1]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathNames  =  stack.toArray(new  String[pathNames.size()  +  1]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathNames  =  stack.toArray(new  String[pathNames.size()  +  1]);	  int[]    pathNames    =    stack.toArray(new    String[pathNames.size()    ]);    	non-compiled	[CE]  	146	None	replace
221	[BUG]  [BUGGY]  int[]  pathNames  =  stack.toArray(new  String[pathNames.size()  -  2]);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathNames  =  stack.toArray(new  String[pathNames.size()  -  2]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathNames  =  stack.toArray(new  String[pathNames.size()  -  2]);	  int[]    pathNames    =    stack.toArray(new    String[pathNames.size()    ]);    	non-compiled	[CE]  	146	None	replace
222	[BUG]  [BUGGY]  int[]  pathNames  =  stack.toArray(new  String[pathNames.size()  0]);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathNames  =  stack.toArray(new  String[pathNames.size()  0]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathNames  =  stack.toArray(new  String[pathNames.size()  0]);	  int[]    pathNames    =    stack.toArray(new    String[pathNames.size()    ]);    	non-compiled	[CE]  	146	None	replace
223	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	139	None	replace
224	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	139	None	replace
225	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	139	None	replace
226	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	139	None	replace
227	[BUG]  [BUGGY]  if(isLiteral((  String)c)  &&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)  &&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)  &&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)&&    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	112	None	replace
228	[BUG]  [BUGGY]  if(isLiteral((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)&&    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	112	None	replace
229	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	103	None	replace
230	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	103	None	replace
231	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[pos]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[pos]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[pos]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	103	None	replace
232	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[pos]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[pos]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[pos]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	103	None	replace
233	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLiteral((  char)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLiteral((  char)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLiteral((  char)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	103	None	replace
234	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLiteral((  char)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLiteral((  char)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLiteral((  char)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_LONG)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	103	None	replace
235	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  peeked  <  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  peeked  <  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  peeked  <  PEEKED_BUFFERED_NAME)  {	  if(isLenient((    String)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	21	None	replace
236	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  peeked  <  =  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  peeked  <  =  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  peeked  <  =  PEEKED_BUFFERED_NAME)  {	  if(isLenient((    String)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	21	None	replace
237	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  peeked  <  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  peeked  <  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  peeked  <  NUMBER_CHAR_QUOTED_NAME)  {	  if(isLenient((    String)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	21	None	replace
238	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c)    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	65	None	replace
239	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked    ==    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	86	None	replace
240	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED_QUOTED_NAME)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED_QUOTED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked    ==    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	86	None	replace
241	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  peekStack[pos-1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  peekStack[pos-1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  peekStack[pos-1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c)||    peekStack[pos--]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	90	None	replace
242	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  peekStack[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  peekStack[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  peekStack[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c)||    peekStack[pos--]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	90	None	replace
243	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	55	None	replace
244	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	55	None	replace
245	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	55	None	replace
246	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  peeked  <  =  PEEKED_UNQUOTED_NAME))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  peeked  <  =  PEEKED_UNQUOTED_NAME))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  peeked  <  =  PEEKED_UNQUOTED_NAME))  {	  if(isLiteral((    char)c)    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	55	None	replace
247	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  peeked!=  PEEKED_BUFFERED)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  peeked!=  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  peeked!=  PEEKED_BUFFERED)  {	  if(isLiteral((    String)c)    ||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	7	None	replace
248	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  peeked  ==  PEEKED_BUFFERED)  {	  if(isLiteral((    String)c)    ||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	7	None	replace
249	[BUG]  [BUGGY]  if(isLiteral((  String)c)&&  peeked!=  PEEKED_BUFFERED)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)&&  peeked!=  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)&&  peeked!=  PEEKED_BUFFERED)  {	  if(isLiteral((    String)c)    ||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	7	None	replace
250	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  peeked  >=  PEEKED_BUFFERED)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  peeked  >=  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  peeked  >=  PEEKED_BUFFERED)  {	  if(isLiteral((    String)c)    ||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	7	None	replace
251	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  peeked!=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  peeked!=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  peeked!=  NUMBER_CHAR_EXP_SIGN)  {	  if(isLiteral((    char)c)    ||    peeked!=    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	144	None	replace
252	[BUG]  [BUGGY]  if(isLiteral((  int)c)||  peeked!=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  int)c)||  peeked!=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  int)c)||  peeked!=  NUMBER_CHAR_EXP_SIGN)  {	  if(isLiteral((    char)c)    ||    peeked!=    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	144	None	replace
253	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  peeked!=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)&&  peeked!=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  peeked!=  NUMBER_CHAR_EXP_SIGN)  {	  if(isLiteral((    char)c)    ||    peeked!=    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	144	None	replace
254	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  peeked  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peeked  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(isLiteral((    char)c)    ||    peeked!=    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	144	None	replace
255	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  >=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  peeked  >=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peeked  >=  NUMBER_CHAR_EXP_SIGN)  {	  if(isLiteral((    char)c)    ||    peeked!=    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	144	None	replace
256	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(isLenient((    String)c)    ||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	143	None	replace
257	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  peeked!=  PEEKED_BUFFERED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  peeked!=  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  peeked!=  PEEKED_BUFFERED)  {	  if(isLenient((    String)c)    ||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	143	None	replace
258	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peeked!=  PEEKED_BUFFERED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)||  peeked!=  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peeked!=  PEEKED_BUFFERED)  {	  if(isLenient((    String)c)    ||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	143	None	replace
259	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peeked  ==  PEEKED_BUFFERED)  {	  if(isLenient((    String)c)    ||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	143	None	replace
260	[BUG]  [BUGGY]  if(isLiteral((  String)c)  ||  peeked  <  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)  ||  peeked  <  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)  ||  peeked  <  NUMBER_CHAR_QUOTED_NAME)  {	  if(isLiteral((    String)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	3	None	replace
261	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	13	None	replace
262	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	13	None	replace
263	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	13	None	replace
264	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	13	None	replace
265	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[peekSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[peekSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peekStack[peekSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	13	None	replace
266	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	13	None	replace
267	[BUG]  [BUGGY]  if(isLiteral((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    String)c)    &&    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	67	None	replace
268	[BUG]  [BUGGY]  if(isLiteral((  String)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    String)c)    &&    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	67	None	replace
269	[BUG]  [BUGGY]  if(isLong((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLong((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLong((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    String)c)    &&    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	67	None	replace
270	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    String)c)    &&    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	67	None	replace
271	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLenient((  String)c))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLenient((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLenient((  String)c))  {	  if(!lenient    Reader    ||    isLenient((    String)c))    {    	non-compiled	[CE]  	18	None	replace
272	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLenient((  String)c))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLenient((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLenient((  String)c))  {	  if(!lenient    Reader    ||    isLenient((    String)c))    {    	non-compiled	[CE]  	18	None	replace
273	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLenient((  String)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLenient((  String)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLenient((  String)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    ||    isLenient((    String)c))    {    	non-compiled	[CE]  	18	None	replace
274	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader    ||    isLenient((    String)c))    {    	non-compiled	[CE]  	18	None	replace
275	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader    ||    isLenient((    String)c))    {    	non-compiled	[CE]  	18	None	replace
276	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    	non-compiled	[CE]  	39	None	replace
277	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    	non-compiled	[CE]  	39	None	replace
278	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    	non-compiled	[CE]  	39	None	replace
279	[BUG]  [BUGGY]  if(!lenientReaders((  char)c)||  isLenient((  char)c))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenientReaders((  char)c)||  isLenient((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenientReaders((  char)c)||  isLenient((  char)c))  {	  if(!lenient    Reader((    char)c)    &&    isLenient((    char)c))    {    	non-compiled	[CE]  	94	None	replace
280	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)&&  isLenient((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)&&  isLenient((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)&&  isLenient((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  if(!lenient    Reader((    char)c)    &&    isLenient((    char)c))    {    	non-compiled	[CE]  	94	None	replace
281	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)&&  isLenient((  char)peekStack[pos]))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)&&  isLenient((  char)peekStack[pos]))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)&&  isLenient((  char)peekStack[pos]))  {	  if(!lenient    Reader((    char)c)    &&    isLenient((    char)c))    {    	non-compiled	[CE]  	94	None	replace
282	[BUG]  [BUGGY]  if(isLenient((  char)c)||  isUpperCase((  char)peekStack[pos]))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)||  isUpperCase((  char)peekStack[pos]))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)||  isUpperCase((  char)peekStack[pos]))  {	  if(isUpperCase((    char)c)    ||    isLenient((    char)peekStack[pos]))    {    	non-compiled	[CE]  	95	None	replace
283	[BUG]  [BUGGY]  if(isLenient((  char)peekStack[pos])||  isUpperCase((  char)c))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)peekStack[pos])||  isUpperCase((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)peekStack[pos])||  isUpperCase((  char)c))  {	  if(isUpperCase((    char)c)    ||    isLenient((    char)peekStack[pos]))    {    	non-compiled	[CE]  	95	None	replace
284	[BUG]  [BUGGY]  if(isUpperCase((  char)peekStack[pos])||  isLenient((  char)c))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUpperCase((  char)peekStack[pos])||  isLenient((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUpperCase((  char)peekStack[pos])||  isLenient((  char)c))  {	  if(isUpperCase((    char)c)    ||    isLenient((    char)peekStack[pos]))    {    	non-compiled	[CE]  	95	None	replace
285	[BUG]  [BUGGY]  if(isUpperCase((  char)c)&&  isLenient((  char)peekStack[pos]))  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUpperCase((  char)c)&&  isLenient((  char)peekStack[pos]))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUpperCase((  char)c)&&  isLenient((  char)peekStack[pos]))  {	  if(isUpperCase((    char)c)    ||    isLenient((    char)peekStack[pos]))    {    	non-compiled	[CE]  	95	None	replace
286	[BUG]  [BUGGY]  if(isUpperCase((  char)c)||  isLenient((  char)peekStack[pos])||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUpperCase((  char)c)||  isLenient((  char)peekStack[pos])||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUpperCase((  char)c)||  isLenient((  char)peekStack[pos])||  peeked  ==  PEEKED_BUFFERED)  {	  if(isUpperCase((    char)c)    ||    isLenient((    char)peekStack[pos]))    {    	non-compiled	[CE]  	95	None	replace
287	[BUG]  [BUGGY]  if(isUpperCase((  char)c)||  isLenient((  char)peekStack[pos])||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUpperCase((  char)c)||  isLenient((  char)peekStack[pos])||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUpperCase((  char)c)||  isLenient((  char)peekStack[pos])||  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(isUpperCase((    char)c)    ||    isLenient((    char)peekStack[pos]))    {    	non-compiled	[CE]  	95	None	replace
288	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  peeked  >  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  peeked  >  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  peeked  >  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    String)c)    ||    peeked    >=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	6	None	replace
289	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[peekStackSize  -  1]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[peekStackSize  -  1]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(new  String[peekStackSize  -  1]);	  int[]    pathIndices    =    stack.toArray(new    String[stackSize    -    1]);    	non-compiled	[CE]  	145	None	replace
290	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[peekedString.length  -  1]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[peekedString.length  -  1]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(new  String[peekedString.length  -  1]);	  int[]    pathIndices    =    stack.toArray(new    String[stackSize    -    1]);    	non-compiled	[CE]  	145	None	replace
291	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[PeekStackSize  -  1]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[PeekStackSize  -  1]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(new  String[PeekStackSize  -  1]);	  int[]    pathIndices    =    stack.toArray(new    String[stackSize    -    1]);    	non-compiled	[CE]  	145	None	replace
292	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[peekStack.length  -  1]);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[peekStack.length  -  1]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(new  String[peekStack.length  -  1]);	  int[]    pathIndices    =    stack.toArray(new    String[stackSize    -    1]);    	non-compiled	[CE]  	145	None	replace
293	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[PeekedString.length  -  1]);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[PeekedString.length  -  1]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(new  String[PeekedString.length  -  1]);	  int[]    pathIndices    =    stack.toArray(new    String[stackSize    -    1]);    	non-compiled	[CE]  	145	None	replace
294	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	97	None	replace
295	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	97	None	replace
296	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peekStack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	97	None	replace
297	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[peekStackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[peekStackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peekStack[peekStackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	97	None	replace
298	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)&&  isLiteral((  String)c))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)&&  isLiteral((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)&&  isLiteral((  String)c))  {	  if(!lenient    Reader((    String)c)    ||    isLiteral((    String)c))    {    	non-compiled	[CE]  	123	None	replace
299	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)||  isEmpty((  String)c))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)||  isEmpty((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)||  isEmpty((  String)c))  {	  if(!lenient    Reader((    String)c)    ||    isLiteral((    String)c))    {    	non-compiled	[CE]  	123	None	replace
300	[BUG]  [BUGGY]  if(isLiteral((  String)c)&&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)&&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)&&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    String)c)    ||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	73	None	replace
301	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLiteral((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	52	None	replace
302	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  ==  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  ==  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  ==  PEEKED_BUFFERED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	52	None	replace
303	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c)  ||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c)  ||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  String)c)  ||  peeked  ==  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	52	None	replace
304	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  ||  peeked  ==  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  ||  peeked  ==  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  ||  peeked  ==  PEEKED_BUFFERED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	52	None	replace
305	[BUG]  [BUGGY]  if(!lenient  Reader  ||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  peeked  ==  PEEKED_BUFFERED)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	52	None	replace
306	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  peeked[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peeked[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)    ||    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	72	None	replace
307	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  isUnquotedString((  String)c))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  isUnquotedString((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  isUnquotedString((  String)c))  {	  if(isLenient((    String)c)    ||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	27	None	replace
308	[BUG]  [BUGGY]  if(isUpperCase((  String)c)||  isUnquotedString((  String)c))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUpperCase((  String)c)||  isUnquotedString((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUpperCase((  String)c)||  isUnquotedString((  String)c))  {	  if(isLenient((    String)c)    ||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	27	None	replace
309	[BUG]  [BUGGY]  if(isLenient((  String)c)||  isUnquotedString((  String)peekStack[pos]))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)||  isUnquotedString((  String)peekStack[pos]))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  isUnquotedString((  String)peekStack[pos]))  {	  if(isLenient((    String)c)    ||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	27	None	replace
310	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)||  isUnquotedString((  String)c))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)||  isUnquotedString((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)||  isUnquotedString((  String)c))  {	  if(isLenient((    String)c)    ||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	27	None	replace
311	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  isEmpty((  char)c))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  isEmpty((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  isEmpty((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isEmpty((    char)c))    {    	non-compiled	[CE]  	44	None	replace
312	[BUG]  [BUGGY]  if(!lenientReaders((  char)c)||  isEmpty((  char)c))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenientReaders((  char)c)||  isEmpty((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenientReaders((  char)c)||  isEmpty((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isEmpty((    char)c))    {    	non-compiled	[CE]  	44	None	replace
313	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isUnquotedString((  char)c))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isUnquotedString((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isUnquotedString((  char)c))  {	  if(!lenient    Reader    ||    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	77	None	replace
314	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isUnquotedString((  int)c))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isUnquotedString((  int)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isUnquotedString((  int)c))  {	  if(!lenient    Reader    ||    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	77	None	replace
315	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isUnquotedString((  char)c)&&  peeked!=  PEEKED_BUFFERED)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isUnquotedString((  char)c)&&  peeked!=  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isUnquotedString((  char)c)&&  peeked!=  PEEKED_BUFFERED)  {	  if(!lenient    Reader    ||    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	77	None	replace
316	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peeked[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c)    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	118	None	replace
317	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  stack[peekStack.length  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c)    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	118	None	replace
318	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  -  1]);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  -  1]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  -  1]);	  int[]    pathIndices    =    stack.toArray(new    String[pathNames.size()    ]);    	non-compiled	[CE]  	62	None	replace
319	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  +  1]);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  +  1]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  +  1]);	  int[]    pathIndices    =    stack.toArray(new    String[pathNames.size()    ]);    	non-compiled	[CE]  	62	None	replace
320	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  -  2]);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  -  2]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  -  2]);	  int[]    pathIndices    =    stack.toArray(new    String[pathNames.size()    ]);    	non-compiled	[CE]  	62	None	replace
321	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ],  peekedString);  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ],  peekedString);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ],  peekedString);	  int[]    pathIndices    =    stack.toArray(new    String[pathNames.size()    ]);    	non-compiled	[CE]  	62	None	replace
322	[BUG]  [BUGGY]  if(isNonWhitespace((  String)c))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isNonWhitespace((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isNonWhitespace((  String)c))  {	  if(isNonWhitespace((    char)c))    {    	non-compiled	[CE]  	132	None	replace
323	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isNonWhitespace((  char)c))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isNonWhitespace((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isNonWhitespace((  char)c))  {	  if(isNonWhitespace((    char)c))    {    	non-compiled	[CE]  	132	None	replace
324	[BUG]  [BUGGY]  if(isNonWhitespace((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isNonWhitespace((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isNonWhitespace((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isNonWhitespace((    char)c))    {    	non-compiled	[CE]  	132	None	replace
325	[BUG]  [BUGGY]  if(isNonWhitespace((  int)c))  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isNonWhitespace((  int)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isNonWhitespace((  int)c))  {	  if(isNonWhitespace((    char)c))    {    	non-compiled	[CE]  	132	None	replace
326	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isNonWhitespace((  char)c))  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isNonWhitespace((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isNonWhitespace((  char)c))  {	  if(isNonWhitespace((    char)c))    {    	non-compiled	[CE]  	132	None	replace
327	[BUG]  [BUGGY]  if(isNonWhitespace((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isNonWhitespace((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isNonWhitespace((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isNonWhitespace((    char)c))    {    	non-compiled	[CE]  	132	None	replace
328	[BUG]  [BUGGY]  if(isNonWhitespace((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isNonWhitespace((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isNonWhitespace((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(isNonWhitespace((    char)c))    {    	non-compiled	[CE]  	132	None	replace
329	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.get(pathNames);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.get(pathNames);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.get(pathNames);	  int[]    pathIndices    =    stack.get(peekedString);    	non-compiled	[CE]  	64	None	replace
330	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.getPeek(peekedString);  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.getPeek(peekedString);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.getPeek(peekedString);	  int[]    pathIndices    =    stack.get(peekedString);    	non-compiled	[CE]  	64	None	replace
331	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.getPeekedString(peekedString);  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.getPeekedString(peekedString);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.getPeekedString(peekedString);	  int[]    pathIndices    =    stack.get(peekedString);    	non-compiled	[CE]  	64	None	replace
332	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.get(peekEdString);  [CE]  [FE]                                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.get(peekEdString);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.get(peekEdString);	  int[]    pathIndices    =    stack.get(peekedString);    	non-compiled	[CE]  	64	None	replace
333	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.getPeekedString();  [CE]  [FE]                                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.getPeekedString();  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.getPeekedString();	  int[]    pathIndices    =    stack.get(peekedString);    	non-compiled	[CE]  	64	None	replace
334	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  2]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  2]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  2]);	  int[]    pathIndices    =    stack.toArray(new    String[pathNames.length    -    1]);    	non-compiled	[CE]  	59	None	replace
335	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  4]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  4]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  4]);	  int[]    pathIndices    =    stack.toArray(new    String[pathNames.length    -    1]);    	non-compiled	[CE]  	59	None	replace
336	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  3]);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  3]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  3]);	  int[]    pathIndices    =    stack.toArray(new    String[pathNames.length    -    1]);    	non-compiled	[CE]  	59	None	replace
337	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  1  +  1]);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  1  +  1]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  1  +  1]);	  int[]    pathIndices    =    stack.toArray(new    String[pathNames.length    -    1]);    	non-compiled	[CE]  	59	None	replace
338	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  +  1]);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  +  1]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  +  1]);	  int[]    pathIndices    =    stack.toArray(new    String[pathNames.length    -    1]);    	non-compiled	[CE]  	59	None	replace
339	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  isUnquotedString((  char)c))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  isUnquotedString((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  isUnquotedString((  char)c))  {	  if(!lenient    Reader((    char)c)||    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	131	None	replace
340	[BUG]  [BUGGY]  if(!lenientReaders((  char)c)  ||  isUnquotedString((  char)c))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenientReaders((  char)c)  ||  isUnquotedString((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenientReaders((  char)c)  ||  isUnquotedString((  char)c))  {	  if(!lenient    Reader((    char)c)||    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	131	None	replace
341	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  peeked  ==  PEEKED_UNQUOTED_NAME)  {	  if(isLenient((    String)c)    ||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	129	None	replace
342	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  peeked  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  peeked  ==  PEEKED_BUFFERED)  {	  if(isLenient((    String)c)    ||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	129	None	replace
343	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peeked  >=  PEEKED_BUFFERED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)||  peeked  >=  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peeked  >=  PEEKED_BUFFERED)  {	  if(isLenient((    String)c)    ||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	129	None	replace
344	[BUG]  [BUGGY]  if(isLong((  String)c)||  isUnquotedString((  String)c))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLong((  String)c)||  isUnquotedString((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLong((  String)c)||  isUnquotedString((  String)c))  {	  if(isLiteral((    String)c)    ||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	26	None	replace
345	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  isISOControl((  char)c))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  isISOControl((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  isISOControl((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isISOControl((    char)c))    {    	non-compiled	[CE]  	85	None	replace
346	[BUG]  [BUGGY]  if(!lenientReaders((  char)c)||  isISOControl((  char)c))  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenientReaders((  char)c)||  isISOControl((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenientReaders((  char)c)||  isISOControl((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isISOControl((    char)c))    {    	non-compiled	[CE]  	85	None	replace
347	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)||  isISOControl((  String)c))  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)||  isISOControl((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)||  isISOControl((  String)c))  {	  if(!lenient    Reader((    char)c)    ||    isISOControl((    char)c))    {    	non-compiled	[CE]  	85	None	replace
348	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  peeked!=  PEEKED_BUFFERED_OBJECT)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  peeked!=  PEEKED_BUFFERED_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  peeked!=  PEEKED_BUFFERED_OBJECT)  {	  if(isLiteral((    char)c)    ||    peeked!=    PEEKED_BUFFERED_OBJECT)    {    	non-compiled	[CE]  	32	None	replace
349	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED_OBJECT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED_OBJECT)  {	  if(isLiteral((    char)c)    ||    peeked!=    PEEKED_BUFFERED_OBJECT)    {    	non-compiled	[CE]  	32	None	replace
350	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  peeked!=  PEEKED_BUFFERED_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)&&  peeked!=  PEEKED_BUFFERED_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  peeked!=  PEEKED_BUFFERED_OBJECT)  {	  if(isLiteral((    char)c)    ||    peeked!=    PEEKED_BUFFERED_OBJECT)    {    	non-compiled	[CE]  	32	None	replace
351	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  <  =  PEEKED_BUFFERED_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  peeked  <  =  PEEKED_BUFFERED_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peeked  <  =  PEEKED_BUFFERED_OBJECT)  {	  if(isLiteral((    char)c)    ||    peeked!=    PEEKED_BUFFERED_OBJECT)    {    	non-compiled	[CE]  	32	None	replace
352	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  &&  isLenient((  String)c))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  &&  isLenient((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  &&  isLenient((  String)c))  {	  if(isUnquotedString((    String)c)&&    isLiteral((    String)c))    {    	non-compiled	[CE]  	70	None	replace
353	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  	105	None	replace
354	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  	105	None	replace
355	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  	105	None	replace
356	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  	105	None	replace
357	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  	105	None	replace
358	[BUG]  [BUGGY]  int  stackSize  =  stack.size()  -  1;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  stackSize  =  stack.size()  -  1;  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  stack.size()  -  1;	  int    stackSize    =    stack.size();    	non-compiled	[CE]  	116	None	replace
359	[BUG]  [BUGGY]  int  stackSize  =  stack.size()  +  1;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  stackSize  =  stack.size()  +  1;  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  stack.size()  +  1;	  int    stackSize    =    stack.size();    	non-compiled	[CE]  	116	None	replace
360	[BUG]  [BUGGY]  int  stackSize  =  stack.size()  -  2;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  stackSize  =  stack.size()  -  2;  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  stack.size()  -  2;	  int    stackSize    =    stack.size();    	non-compiled	[CE]  	116	None	replace
361	[BUG]  [BUGGY]  int  stackSize  =  stack.length;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  stackSize  =  stack.length;  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  stack.length;	  int    stackSize    =    stack.size();    	non-compiled	[CE]  	116	None	replace
362	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  isUnquoted((  char)c))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  isUnquoted((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  isUnquoted((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isUnquoted((    char)c))    {    	non-compiled	[CE]  	84	None	replace
363	[BUG]  [BUGGY]  if(!lenientReaders((  char)c)||  isUnquoted((  char)c))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenientReaders((  char)c)||  isUnquoted((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenientReaders((  char)c)||  isUnquoted((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isUnquoted((    char)c))    {    	non-compiled	[CE]  	84	None	replace
364	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)||  isUnquoted((  String)c))  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)||  isUnquoted((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)||  isUnquoted((  String)c))  {	  if(!lenient    Reader((    char)c)    ||    isUnquoted((    char)c))    {    	non-compiled	[CE]  	84	None	replace
365	[BUG]  [BUGGY]  if(isLiteral((  String)c)&&  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)&&  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)&&  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLiteral((    char)c)    &&    peeked    ==    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	113	None	replace
366	[BUG]  [BUGGY]  if(isLiteral((  Character)c)||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  Character)c)||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  Character)c)||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLiteral((    char)c)    &&    peeked    ==    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	113	None	replace
367	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  peeked  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  peeked  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  peeked  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked    ==    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	120	None	replace
368	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  peeked  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)&&  peeked  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  peeked  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked    ==    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	120	None	replace
369	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)  ||  peekStack[stackSize]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)  ||  peekStack[stackSize]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)  ||  peekStack[stackSize]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    char)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	93	None	replace
370	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)  ||  peekStack[stackSize]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)  ||  peekStack[stackSize]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)  ||  peekStack[stackSize]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    char)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	93	None	replace
371	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)&&  isNumberChar((  char)c))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)&&  isNumberChar((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)&&  isNumberChar((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isNumberChar((    char)c))    {    	non-compiled	[CE]  	83	None	replace
372	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)||  isNumberChar((  char)c))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)||  isNumberChar((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)||  isNumberChar((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isNumberChar((    char)c))    {    	non-compiled	[CE]  	83	None	replace
373	[BUG]  [BUGGY]  int  stackSize  =  stack[stackSize  -  1]  +  1;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  stackSize  =  stack[stackSize  -  1]  +  1;  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  stack[stackSize  -  1]  +  1;	  int    stackSize    =    stack[stackSize    -    1];    	non-compiled	[CE]  	58	None	replace
374	[BUG]  [BUGGY]  int  stackSize  =  stack[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED_NAME;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  stackSize  =  stack[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED_NAME;  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  stack[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED_NAME;	  int    stackSize    =    stack[stackSize    -    1];    	non-compiled	[CE]  	58	None	replace
375	[BUG]  [BUGGY]  int  stackSize  =  stack[stackSize  -  1]  |  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  stackSize  =  stack[stackSize  -  1]  |  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  stack[stackSize  -  1]  |  JsonScope.NONEMPTY_OBJECT;	  int    stackSize    =    stack[stackSize    -    1];    	non-compiled	[CE]  	58	None	replace
376	[BUG]  [BUGGY]  int  stackSize  =  stack[peekStack.length  -  1];  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  stackSize  =  stack[peekStack.length  -  1];  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  stack[peekStack.length  -  1];	  int    stackSize    =    stack[stackSize    -    1];    	non-compiled	[CE]  	58	None	replace
377	[BUG]  [BUGGY]  int  stackSize  =  stack[stackSize  -  1]  +  PEEKED_UNQUOTED_NAME;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  stackSize  =  stack[stackSize  -  1]  +  PEEKED_UNQUOTED_NAME;  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  stack[stackSize  -  1]  +  PEEKED_UNQUOTED_NAME;	  int    stackSize    =    stack[stackSize    -    1];    	non-compiled	[CE]  	58	None	replace
378	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	50	None	replace
379	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	50	None	replace
380	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	50	None	replace
381	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	50	None	replace
382	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	50	None	replace
383	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)||  isLenient((  String)peekStack[pos]))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)||  isLenient((  String)peekStack[pos]))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)||  isLenient((  String)peekStack[pos]))  {	  if(isUnquotedString((    String)c)    ||    isLenient((    String)c))    {    	non-compiled	[CE]  	69	None	replace
384	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	23	None	replace
385	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	23	None	replace
386	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	23	None	replace
387	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {	  if(isUnquotedString((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    	non-compiled	[CE]  	79	None	replace
388	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {	  if(isUnquotedString((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    	non-compiled	[CE]  	79	None	replace
389	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(false);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  pos  =  nextNonWhitespace(false);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	pos  =  nextNonWhitespace(false);	  pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	63	None	replace
390	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(true,  PEEKED_DOUBLE_QUOTED_NAME);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  pos  =  nextNonWhitespace(true,  PEEKED_DOUBLE_QUOTED_NAME);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	pos  =  nextNonWhitespace(true,  PEEKED_DOUBLE_QUOTED_NAME);	  pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	63	None	replace
391	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(true,  PEEKED_BUFFERED);  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  pos  =  nextNonWhitespace(true,  PEEKED_BUFFERED);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	pos  =  nextNonWhitespace(true,  PEEKED_BUFFERED);	  pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	63	None	replace
392	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(false,  JsonScope.NONEMPTY_OBJECT);  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  pos  =  nextNonWhitespace(false,  JsonScope.NONEMPTY_OBJECT);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	pos  =  nextNonWhitespace(false,  JsonScope.NONEMPTY_OBJECT);	  pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	63	None	replace
393	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(true,  PEEKED_SINGLE_QUOTED_NAME);  [CE]  [FE]                                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  pos  =  nextNonWhitespace(true,  PEEKED_SINGLE_QUOTED_NAME);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	pos  =  nextNonWhitespace(true,  PEEKED_SINGLE_QUOTED_NAME);	  pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	63	None	replace
394	[BUG]  [BUGGY]  if(isLiteral((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    String)c)    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	56	None	replace
395	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  peeked  <  =  PEEKED_UNQUOTED_NAME))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  peeked  <  =  PEEKED_UNQUOTED_NAME))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  peeked  <  =  PEEKED_UNQUOTED_NAME))  {	  if(isLiteral((    String)c)    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	56	None	replace
396	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    String)c)    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	56	None	replace
397	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peekStack[pos-1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peekStack[pos-1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peekStack[pos-1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peekStack[pos--]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	110	None	replace
398	[BUG]  [BUGGY]  if(c  ==  null  ||!isUnquotedString((  String)c))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  null  ||!isUnquotedString((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  null  ||!isUnquotedString((  String)c))  {	  if(!isUnquotedString((    String)c))    {    	non-compiled	[CE]  	40	None	replace
399	[BUG]  [BUGGY]  if(!isUnquotedString((  String)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!isUnquotedString((  String)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isUnquotedString((  String)c)||  peeked  ==  PEEKED_BUFFERED)  {	  if(!isUnquotedString((    String)c))    {    	non-compiled	[CE]  	40	None	replace
400	[BUG]  [BUGGY]  if(!isUnquotedString((  String)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!isUnquotedString((  String)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isUnquotedString((  String)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {	  if(!isUnquotedString((    String)c))    {    	non-compiled	[CE]  	40	None	replace
401	[BUG]  [BUGGY]  if(!isUnquotedString((  String)c)||  peeked!=  PEEKED_BUFFERED)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!isUnquotedString((  String)c)||  peeked!=  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isUnquotedString((  String)c)||  peeked!=  PEEKED_BUFFERED)  {	  if(!isUnquotedString((    String)c))    {    	non-compiled	[CE]  	40	None	replace
402	[BUG]  [BUGGY]  if(!isUnquotedString((  String)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!isUnquotedString((  String)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isUnquotedString((  String)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(!isUnquotedString((    String)c))    {    	non-compiled	[CE]  	40	None	replace
403	[BUG]  [BUGGY]  if(!isUnquotedString((  String)c)||  peeked!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!isUnquotedString((  String)c)||  peeked!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isUnquotedString((  String)c)||  peeked!=  JsonScope.NONEMPTY_OBJECT)  {	  if(!isUnquotedString((    String)c))    {    	non-compiled	[CE]  	40	None	replace
404	[BUG]  [BUGGY]  if(!isUnquotedString((  String)c)||  peeked!=  JsonScope.NONEMPTY_STRING)  {  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!isUnquotedString((  String)c)||  peeked!=  JsonScope.NONEMPTY_STRING)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isUnquotedString((  String)c)||  peeked!=  JsonScope.NONEMPTY_STRING)  {	  if(!isUnquotedString((    String)c))    {    	non-compiled	[CE]  	40	None	replace
405	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isUnquotedString((  String)c))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isUnquotedString((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isUnquotedString((  String)c))  {	  if(!lenient    Reader    ||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	37	None	replace
406	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isUnquotedString((  String)c))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isUnquotedString((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isUnquotedString((  String)c))  {	  if(!lenient    Reader    ||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	37	None	replace
407	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isUnquotedString((  String)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isUnquotedString((  String)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isUnquotedString((  String)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    ||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	37	None	replace
408	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isUnquotedString((  String)c),  peekedLong)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isUnquotedString((  String)c),  peekedLong)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isUnquotedString((  String)c),  peekedLong)  {	  if(!lenient    Reader    ||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	37	None	replace
409	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)&&  isBoolean((  char)c))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)&&  isBoolean((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)&&  isBoolean((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isBoolean((    char)c))    {    	non-compiled	[CE]  	142	None	replace
410	[BUG]  [BUGGY]  if(!lenientReaders((  char)c)||  isBoolean((  char)c))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenientReaders((  char)c)||  isBoolean((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenientReaders((  char)c)||  isBoolean((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isBoolean((    char)c))    {    	non-compiled	[CE]  	142	None	replace
411	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)||  isBoolean((  char)c))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)||  isBoolean((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)||  isBoolean((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isBoolean((    char)c))    {    	non-compiled	[CE]  	142	None	replace
412	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader((    String)c))    {    	non-compiled	[CE]  	4	None	replace
413	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    String)c))    {    	non-compiled	[CE]  	4	None	replace
414	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c,  peekedString))  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c,  peekedString))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c,  peekedString))  {	  if(!lenient    Reader((    String)c))    {    	non-compiled	[CE]  	4	None	replace
415	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader((    String)c))    {    	non-compiled	[CE]  	4	None	replace
416	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONE);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONE);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONE);	  if(!lenient    Reader((    String)c))    {    	non-compiled	[CE]  	4	None	replace
417	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader((    String)c))    {    	non-compiled	[CE]  	4	None	replace
418	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  peeked  ==  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  peeked  ==  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  peeked  ==  PEEKED_BUFFERED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked    ==    PEEKED_BUFFERED_NAME)    {    	non-compiled	[CE]  	33	None	replace
419	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  peeked  ==  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)&&  peeked  ==  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  peeked  ==  PEEKED_BUFFERED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked    ==    PEEKED_BUFFERED_NAME)    {    	non-compiled	[CE]  	33	None	replace
420	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	106	None	replace
421	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	19	None	replace
422	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	19	None	replace
423	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  peekStack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  peekStack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  peekStack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	19	None	replace
424	[BUG]  [BUGGY]  if(isLiteral((  char)peekStack)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)peekStack)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)peekStack)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)&&    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	111	None	replace
425	[BUG]  [BUGGY]  if(isLiteral((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  peeked  <  =  PEEKED_UNQUOTED_NAME))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  peeked  <  =  PEEKED_UNQUOTED_NAME))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT  ||  peeked  <  =  PEEKED_UNQUOTED_NAME))  {	  if(isLiteral((    char)c)&&    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	111	None	replace
426	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG))    {    	non-compiled	[CE]  	125	None	replace
427	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG))    {    	non-compiled	[CE]  	125	None	replace
428	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG))    {    	non-compiled	[CE]  	125	None	replace
429	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[peekSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[peekSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peekStack[peekSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG))    {    	non-compiled	[CE]  	125	None	replace
430	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG))    {    	non-compiled	[CE]  	125	None	replace
431	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLiteral((  char)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	51	None	replace
432	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  ||  peeked  <  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  ||  peeked  <  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  ||  peeked  <  PEEKED_BUFFERED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	51	None	replace
433	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  <  =  PEEKED_BUFFERED_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  <  =  PEEKED_BUFFERED_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  <  =  PEEKED_BUFFERED_OBJECT)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	51	None	replace
434	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[stackSize]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[stackSize]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peekStack[stackSize]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    char)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	96	None	replace
435	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    char)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	96	None	replace
436	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)  ||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)  ||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)  ||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    char)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	96	None	replace
437	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[pos]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[pos]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peekStack[pos]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    char)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	96	None	replace
438	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  peeked!=  PEEKED_BUFFERED)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)&&  peeked!=  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  peeked!=  PEEKED_BUFFERED)  {	  if(isLiteral((    char)c)    ||    peeked!=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	9	None	replace
439	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  <  =  PEEKED_BUFFERED)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  peeked  <  =  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peeked  <  =  PEEKED_BUFFERED)  {	  if(isLiteral((    char)c)    ||    peeked!=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	9	None	replace
440	[BUG]  [BUGGY]  if(isLiteral((  String)c)&&  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)&&  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)&&  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLiteral((    char)c)    &&    peeked!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	114	None	replace
441	[BUG]  [BUGGY]  if(isLenient((  char)c)||  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)||  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)||  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLiteral((    char)c)    &&    peeked!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	114	None	replace
442	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    char)c)    &&    peeked!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	114	None	replace
443	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLiteral((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  if(!lenient    Reader    &&    isLiteral((    char)c))    {    	non-compiled	[CE]  	49	None	replace
444	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLiteral((  char)c)||  peeked!=  PEEKED_BUFFERED)  {	  if(!lenient    Reader    &&    isLiteral((    char)c))    {    	non-compiled	[CE]  	49	None	replace
445	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peeked  >  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)||  peeked  >  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peeked  >  PEEKED_UNQUOTED_NAME)  {	  if(isLenient((    String)c)    ||    peeked    >=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	121	None	replace
446	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(false,  PEEKED_BUFFERED);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  pos  =  nextNonWhitespace(false,  PEEKED_BUFFERED);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  pos  =  nextNonWhitespace(false,  PEEKED_BUFFERED);	  int    pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	115	None	replace
447	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(false,  PEEKED_SINGLE_QUOTED_NAME);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  pos  =  nextNonWhitespace(false,  PEEKED_SINGLE_QUOTED_NAME);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  pos  =  nextNonWhitespace(false,  PEEKED_SINGLE_QUOTED_NAME);	  int    pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	115	None	replace
448	[BUG]  [BUGGY]  int  pos  =  nextSingleQuotedString(false);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  pos  =  nextSingleQuotedString(false);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  pos  =  nextSingleQuotedString(false);	  int    pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	115	None	replace
449	[BUG]  [BUGGY]  if(!isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!isUnquotedString((    char)c))    {    	non-compiled	[CE]  	82	None	replace
450	[BUG]  [BUGGY]  if(!isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {	  if(!isUnquotedString((    char)c))    {    	non-compiled	[CE]  	82	None	replace
451	[BUG]  [BUGGY]  if(!isUnquotedString((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!isUnquotedString((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isUnquotedString((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(!isUnquotedString((    char)c))    {    	non-compiled	[CE]  	82	None	replace
452	[BUG]  [BUGGY]  if(!isUnquotedString((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!isUnquotedString((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isUnquotedString((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {	  if(!isUnquotedString((    char)c))    {    	non-compiled	[CE]  	82	None	replace
453	[BUG]  [BUGGY]  if(!isUnquotedString((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!isUnquotedString((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isUnquotedString((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(!isUnquotedString((    char)c))    {    	non-compiled	[CE]  	82	None	replace
454	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  peeked  <  PEEKED_BUFFERED)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  peeked  <  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  peeked  <  PEEKED_BUFFERED)  {	  if(isLenient((    String)c)    &&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	148	None	replace
455	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  peeked  >=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  peeked  >=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  peeked  >=  PEEKED_UNQUOTED_NAME)  {	  if(isLenient((    String)c)    &&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	148	None	replace
456	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  peeked  <  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  peeked  <  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  peeked  <  NUMBER_CHAR_QUOTED_NAME)  {	  if(isLenient((    String)c)    &&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	148	None	replace
457	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  peeked!=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  peeked!=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  peeked!=  NUMBER_CHAR_QUOTED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked!=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	88	None	replace
458	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  peeked!=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)&&  peeked!=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  peeked!=  NUMBER_CHAR_QUOTED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked!=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	88	None	replace
459	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  >=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  peeked  >=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peeked  >=  NUMBER_CHAR_QUOTED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked!=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	88	None	replace
460	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_BLOCK))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_BLOCK))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_BLOCK))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_BLOCK))    {    	non-compiled	[CE]  	128	None	replace
461	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_BLOCK))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_BLOCK))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_BLOCK))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_BLOCK))    {    	non-compiled	[CE]  	128	None	replace
462	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  peekStack[pos  -  1]  ==  JsonScope.NONEMPTY_BLOCK))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  peekStack[pos  -  1]  ==  JsonScope.NONEMPTY_BLOCK))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  peekStack[pos  -  1]  ==  JsonScope.NONEMPTY_BLOCK))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_BLOCK))    {    	non-compiled	[CE]  	128	None	replace
463	[BUG]  [BUGGY]  if(isLenient((  char)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    char)c)    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	130	None	replace
464	[BUG]  [BUGGY]  if(isLenient((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    char)c)    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	130	None	replace
465	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_ARRAY))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_ARRAY))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_ARRAY))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_ARRAY))    {    	non-compiled	[CE]  	126	None	replace
466	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_ARRAY))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_ARRAY))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_ARRAY))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_ARRAY))    {    	non-compiled	[CE]  	126	None	replace
467	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  >  PEEKED_BUFFERED)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  peeked  >  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peeked  >  PEEKED_BUFFERED)  {	  if(isLiteral((    char)c)    ||    peeked    >=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	122	None	replace
468	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader((    char)c)&&    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	124	None	replace
469	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)  &&  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)  &&  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)  &&  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader((    char)c)&&    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	124	None	replace
470	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  peeked!=  PEEKED_BUFFERED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  peeked!=  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  peeked!=  PEEKED_BUFFERED)  {	  if(!lenient    Reader((    char)c)&&    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	124	None	replace
471	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  peeked!=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  peeked!=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  peeked!=  NUMBER_CHAR_QUOTED_NAME)  {	  if(!lenient    Reader((    char)c)&&    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	124	None	replace
472	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(isUnquotedString((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	81	None	replace
473	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {	  if(isUnquotedString((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	81	None	replace
474	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG))    {    	non-compiled	[CE]  	135	None	replace
475	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG))    {    	non-compiled	[CE]  	135	None	replace
476	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG))  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG))    {    	non-compiled	[CE]  	135	None	replace
477	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG))  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG))    {    	non-compiled	[CE]  	135	None	replace
478	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG))    {    	non-compiled	[CE]  	135	None	replace
479	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  peekStack[stackSize]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  peekStack[stackSize]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  peekStack[stackSize]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	89	None	replace
480	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	89	None	replace
481	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  peekStack[pos]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  peekStack[pos]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  peekStack[pos]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	89	None	replace
482	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  peekStack[pos]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  peekStack[pos]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  peekStack[pos]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	89	None	replace
483	[BUG]  [BUGGY]  if(isLiteral((  char)peekStack)&&  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)peekStack)&&  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)peekStack)&&  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)peekStack)&&    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	119	None	replace
484	[BUG]  [BUGGY]  if(isLiteral((  char)peekStack)&&  stack[0]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)peekStack)&&  stack[0]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)peekStack)&&  stack[0]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)peekStack)&&    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	119	None	replace
485	[BUG]  [BUGGY]  if(isUpperCase((  char)c)||  isLenient((  char)pathIndices[pos]))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUpperCase((  char)c)||  isLenient((  char)pathIndices[pos]))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUpperCase((  char)c)||  isLenient((  char)pathIndices[pos]))  {	  if(isUpperCase((    char)c)    ||    isLenient((    char)peekStack[pos]))    {    	non-compiled	[CE]  	95	None	replace
486	[BUG]  [BUGGY]  if(isLenient((  char)c)||  isLenient((  char)peekStack[pos]))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)||  isLenient((  char)peekStack[pos]))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)||  isLenient((  char)peekStack[pos]))  {	  if(isUpperCase((    char)c)    ||    isLenient((    char)peekStack[pos]))    {    	non-compiled	[CE]  	95	None	replace
487	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  isUnquotedString((  char)peekStack[pos]))  {  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  isUnquotedString((  char)peekStack[pos]))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  isUnquotedString((  char)peekStack[pos]))  {	  if(!lenient    Reader((    char)c)||    isUnquotedString((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
488	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  isUnquotedString((  char)peekChar))  {  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  isUnquotedString((  char)peekChar))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  isUnquotedString((  char)peekChar))  {	  if(!lenient    Reader((    char)c)||    isUnquotedString((    char)c))    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
489	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  stack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
490	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	23	None	replace
491	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[pos  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[pos  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[pos  -  1]!=  JsonScope.NONEMPTY_STRING))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	23	None	replace
492	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[pos  -  1]  ==  JsonScope.DANGLING_NAME))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[pos  -  1]  ==  JsonScope.DANGLING_NAME))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[pos  -  1]  ==  JsonScope.DANGLING_NAME))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME))    {    	non-compiled	[CE]  	127	None	replace
493	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLE_QUOTED_NAME))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLE_QUOTED_NAME))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLE_QUOTED_NAME))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME))    {    	non-compiled	[CE]  	127	None	replace
494	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)&&  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)&&    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	111	None	replace
495	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peeked  >  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)||  peeked  >  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peeked  >  PEEKED_BUFFERED_NAME)  {	  if(isLenient((    String)c)    ||    peeked    >=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	121	None	replace
496	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peeked!=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)||  peeked!=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peeked!=  NUMBER_CHAR_QUOTED_NAME)  {	  if(isLenient((    String)c)    ||    peeked    >=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	121	None	replace
497	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peeked  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)||  peeked  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peeked  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(isLenient((    String)c)    ||    peeked    >=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	121	None	replace
498	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLenient((    String)c)    ||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	143	None	replace
499	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  peekStack[pos--]  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  peekStack[pos--]  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  peekStack[pos--]  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLenient((    String)c)||    peekStack[pos--]    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	91	None	replace
500	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  peekStack[pos--]  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  peekStack[pos--]  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  peekStack[pos--]  ==  PEEKED_UNQUOTED_NAME)  {	  if(isLenient((    String)c)||    peekStack[pos--]    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	91	None	replace
501	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  peekStack[pos--]!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  peekStack[pos--]!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  peekStack[pos--]!=  PEEKED_UNQUOTED_NAME)  {	  if(isLenient((    String)c)||    peekStack[pos--]    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	91	None	replace
502	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  peekStack[pos--]  ==  JsonScope.PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  peekStack[pos--]  ==  JsonScope.PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  peekStack[pos--]  ==  JsonScope.PEEKED_UNQUOTED_NAME)  {	  if(isLenient((    String)c)||    peekStack[pos--]    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	91	None	replace
503	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(isUnquotedString((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	81	None	replace
504	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {	  if(isUnquotedString((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	81	None	replace
505	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	139	None	replace
506	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)||  isLenient((  char)peekStack[pos]))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)||  isLenient((  char)peekStack[pos]))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)||  isLenient((  char)peekStack[pos]))  {	  if(!lenient    Reader((    char)c)    ||    isLenient((    char)c))    {    	non-compiled	[CE]  	30	None	replace
507	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.DANGLING_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.DANGLING_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.DANGLING_NAME)  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME)    {    	non-compiled	[CE]  	100	None	replace
508	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)    ||    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	72	None	replace
509	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  stack[peekStack.length  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  stack[peekStack.length  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  stack[peekStack.length  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)    ||    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	72	None	replace
510	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG))    {    	non-compiled	[CE]  	125	None	replace
511	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG))    {    	non-compiled	[CE]  	125	None	replace
512	[BUG]  [BUGGY]  int  stackSize  =  stack[pathNames.length  -  1];  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  stackSize  =  stack[pathNames.length  -  1];  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  stack[pathNames.length  -  1];	  int    stackSize    =    stack[stackSize    -    1];    	non-compiled	[CE]  	58	None	replace
513	[BUG]  [BUGGY]  int  stackSize  =  stack[pathIndices.length  -  1];  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  stackSize  =  stack[pathIndices.length  -  1];  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  stack[pathIndices.length  -  1];	  int    stackSize    =    stack[stackSize    -    1];    	non-compiled	[CE]  	58	None	replace
514	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  peeked  >  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  peeked  >  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  peeked  >  PEEKED_BUFFERED_NAME)  {	  if(isLiteral((    String)c)    ||    peeked    >=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	6	None	replace
515	[BUG]  [BUGGY]  if(isLiteral((  String)c)&&  peeked  >=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)&&  peeked  >=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)&&  peeked  >=  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    String)c)    ||    peeked    >=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	6	None	replace
516	[BUG]  [BUGGY]  if(isLiteral((  String)c)&&  peeked  >=  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)&&  peeked  >=  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)&&  peeked  >=  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLiteral((    String)c)    ||    peeked    >=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	6	None	replace
517	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isUpperCase((  char)c))  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isUpperCase((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isUpperCase((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||!lenient    Reader    &&    isLiteral((    char)c))    {    	non-compiled	[CE]  	102	None	replace
518	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isLong((  long)c))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isLong((  long)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isLong((  long)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||!lenient    Reader    &&    isLiteral((    char)c))    {    	non-compiled	[CE]  	102	None	replace
519	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)&&  isLenient((  char)peekChar))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)&&  isLenient((  char)peekChar))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)&&  isLenient((  char)peekChar))  {	  if(!lenient    Reader((    char)c)    &&    isLenient((    char)c))    {    	non-compiled	[CE]  	94	None	replace
520	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)&&  isLenient((  char)peekStack[pos--]))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)&&  isLenient((  char)peekStack[pos--]))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)&&  isLenient((  char)peekStack[pos--]))  {	  if(!lenient    Reader((    char)c)    &&    isLenient((    char)c))    {    	non-compiled	[CE]  	94	None	replace
521	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    String)c)    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	68	None	replace
522	[BUG]  [BUGGY]  if(isLiteral((  String)c)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    String)c)&&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	2	None	replace
523	[BUG]  [BUGGY]  if(isLiteral((  String)c)  &&  peeked  ==  PEEKED_BUFFER)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)  &&  peeked  ==  PEEKED_BUFFER)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)  &&  peeked  ==  PEEKED_BUFFER)  {	  if(isLiteral((    String)c)&&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	2	None	replace
524	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  	98	None	replace
525	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  	98	None	replace
526	[BUG]  [BUGGY]  if(isLiteral((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {	  if(isLiteral((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	141	None	replace
527	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)&&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	54	None	replace
528	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)&&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	54	None	replace
529	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  >=  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  >=  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  >=  PEEKED_BUFFERED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)&&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	54	None	replace
530	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	53	None	replace
531	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	53	None	replace
532	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked  >  PEEKED_BUFFERED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked  >  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peeked  >  PEEKED_BUFFERED)  {	  if(!lenient    Reader((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	15	None	replace
533	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked  ==  JsonScope.UNQUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked  ==  JsonScope.UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peeked  ==  JsonScope.UNQUOTED_NAME)  {	  if(!lenient    Reader((    char)c)||    peeked    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	15	None	replace
534	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  isUpperCase((  String)peekStack))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  isUpperCase((  String)peekStack))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  isUpperCase((  String)peekStack))  {	  if(isLenient((    String)c)||    isUpperCase((    String)c))    {    	non-compiled	[CE]  	31	None	replace
535	[BUG]  [BUGGY]  if(isLenient((  String)c)||  isUpperCase((  String)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)||  isUpperCase((  String)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  isUpperCase((  String)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLenient((    String)c)||    isUpperCase((    String)c))    {    	non-compiled	[CE]  	31	None	replace
536	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_BLOCK))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_BLOCK))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_BLOCK))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_BLOCK))    {    	non-compiled	[CE]  	128	None	replace
537	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_BLOCK))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_BLOCK))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_BLOCK))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_BLOCK))    {    	non-compiled	[CE]  	128	None	replace
538	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!isUnquotedString((  char)c))  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!isUnquotedString((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!isUnquotedString((  char)c))  {	  if(!isUnquotedString((    char)c))    {    	non-compiled	[CE]  	82	None	replace
539	[BUG]  [BUGGY]  if(!isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {	  if(!isUnquotedString((    char)c))    {    	non-compiled	[CE]  	82	None	replace
540	[BUG]  [BUGGY]  if(!isUnquotedString((  char)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!isUnquotedString((  char)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isUnquotedString((  char)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!isUnquotedString((    char)c))    {    	non-compiled	[CE]  	82	None	replace
541	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  1])+  1;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  1])+  1;  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  1])+  1;	  int[]    pathIndices    =    stack.toArray(new    String[pathNames.length    -    1]);    	non-compiled	[CE]  	59	None	replace
542	[BUG]  [BUGGY]  if(isWhitespace((  String)c)||  isLenient((  String)c))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isWhitespace((  String)c)||  isLenient((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isWhitespace((  String)c)||  isLenient((  String)c))  {	  if(isUnquotedString((    String)c)    ||    isLenient((    String)c))    {    	non-compiled	[CE]  	69	None	replace
543	[BUG]  [BUGGY]  if(isEmpty((  String)c)||  isLenient((  String)c))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isEmpty((  String)c)||  isLenient((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isEmpty((  String)c)||  isLenient((  String)c))  {	  if(isUnquotedString((    String)c)    ||    isLenient((    String)c))    {    	non-compiled	[CE]  	69	None	replace
544	[BUG]  [BUGGY]  if(!lenient  Reader((  char)peekStack)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)peekStack)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)peekStack)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    char)c)&&    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	99	None	replace
545	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    char)c)&&    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	99	None	replace
546	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)  ||  stack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)  ||  stack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)  ||  stack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    char)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	93	None	replace
547	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.get(PEEKED_DOUBLE_QUOTED_NAME);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.get(PEEKED_DOUBLE_QUOTED_NAME);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.get(PEEKED_DOUBLE_QUOTED_NAME);	  int[]    pathIndices    =    stack.get(peekedString);    	non-compiled	[CE]  	64	None	replace
548	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.getPeekerIndices(peekedString);  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.getPeekerIndices(peekedString);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.getPeekerIndices(peekedString);	  int[]    pathIndices    =    stack.get(peekedString);    	non-compiled	[CE]  	64	None	replace
549	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.getPeekCount();  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.getPeekCount();  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.getPeekCount();	  int[]    pathIndices    =    stack.get(peekedString);    	non-compiled	[CE]  	64	None	replace
550	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)&&  peekStack[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)&&  peekStack[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)&&  peekStack[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peekStack[pos--]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	110	None	replace
551	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)&&  peekStack[pos--]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)&&  peekStack[pos--]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)&&  peekStack[pos--]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peekStack[pos--]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	110	None	replace
552	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)||  peekStack[stackSize--]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)||  peekStack[stackSize--]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)||  peekStack[stackSize--]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peekStack[pos--]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	110	None	replace
553	[BUG]  [BUGGY]  if(isUpperCase((  String)c)||  isLiteral((  String)c))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUpperCase((  String)c)||  isLiteral((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUpperCase((  String)c)||  isLiteral((  String)c))  {	  if(isLenient((    String)c)||    isLiteral((    String)c))    {    	non-compiled	[CE]  	71	None	replace
554	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  isLiteral((  String)peekStack))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  isLiteral((  String)peekStack))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  isLiteral((  String)peekStack))  {	  if(isLenient((    String)c)||    isLiteral((    String)c))    {    	non-compiled	[CE]  	71	None	replace
555	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	13	None	replace
556	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	13	None	replace
557	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||!lenient  Reader((  char)c)||  isNumberChar((  char)c))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||!lenient  Reader((  char)c)||  isNumberChar((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL  ||!lenient  Reader((  char)c)||  isNumberChar((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isNumberChar((    char)c))    {    	non-compiled	[CE]  	83	None	replace
558	[BUG]  [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||!lenient  Reader((  char)c)&&  isNumberChar((  char)c))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  NUMBER_CHAR_DECIMAL  ||!lenient  Reader((  char)c)&&  isNumberChar((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  NUMBER_CHAR_DECIMAL  ||!lenient  Reader((  char)c)&&  isNumberChar((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isNumberChar((    char)c))    {    	non-compiled	[CE]  	83	None	replace
559	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	50	None	replace
560	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	50	None	replace
561	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {	  if(isUnquotedString((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    	non-compiled	[CE]  	79	None	replace
562	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {	  if(isUnquotedString((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    	non-compiled	[CE]  	79	None	replace
563	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isUnquotedString((  char)c))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isUnquotedString((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isUnquotedString((  char)c))  {	  if(!lenient    Reader    ||    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	77	None	replace
564	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader    ||    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	77	None	replace
565	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  ||  isUnquotedString((  char)c))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  ||  isUnquotedString((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  ||  isUnquotedString((  char)c))  {	  if(!lenient    Reader    ||    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	77	None	replace
566	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isLenient((  String)c))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isLenient((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isLenient((  String)c))  {	  if(!lenient    Reader    ||    isLenient((    String)c))    {    	non-compiled	[CE]  	18	None	replace
567	[BUG]  [BUGGY]  if(c  ==  JsonScope.UNQUOTED_NAME  ||!lenient  Reader  &&  isLenient((  String)c))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.UNQUOTED_NAME  ||!lenient  Reader  &&  isLenient((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.UNQUOTED_NAME  ||!lenient  Reader  &&  isLenient((  String)c))  {	  if(!lenient    Reader    ||    isLenient((    String)c))    {    	non-compiled	[CE]  	18	None	replace
568	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  ||  isLenient((  String)c))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  ||  isLenient((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  ||  isLenient((  String)c))  {	  if(!lenient    Reader    ||    isLenient((    String)c))    {    	non-compiled	[CE]  	18	None	replace
569	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONE);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONE);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONE);	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONE);    	non-compiled	[CE]  	16	None	replace
570	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONE);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONE);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONE);	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONE);    	non-compiled	[CE]  	16	None	replace
571	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c)    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	118	None	replace
572	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(false,  stack);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  pos  =  nextNonWhitespace(false,  stack);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  pos  =  nextNonWhitespace(false,  stack);	  int    pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	115	None	replace
573	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(false,  PEEKED_UNQUOTED_NAME);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  pos  =  nextNonWhitespace(false,  PEEKED_UNQUOTED_NAME);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  pos  =  nextNonWhitespace(false,  PEEKED_UNQUOTED_NAME);	  int    pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	115	None	replace
574	[BUG]  [BUGGY]  if(isLenient((  char)c)  &&  isUpperCase((  char)c))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)  &&  isUpperCase((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)  &&  isUpperCase((  char)c))  {	  if(isLenient((    char)c)||    isUpperCase((    char)c))    {    	non-compiled	[CE]  	28	None	replace
575	[BUG]  [BUGGY]  if(isLiteral((  int)c)||  peeked!=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  int)c)||  peeked!=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  int)c)||  peeked!=  NUMBER_CHAR_QUOTED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked!=    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	88	None	replace
576	[BUG]  [BUGGY]  if(isNonWhitespace((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isNonWhitespace((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isNonWhitespace((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {	  if(isNonWhitespace((    char)c))    {    	non-compiled	[CE]  	132	None	replace
577	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLenient((    String)c)    &&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	148	None	replace
578	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  peeked  <  =  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  peeked  <  =  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  peeked  <  =  PEEKED_BUFFERED_NAME)  {	  if(isLenient((    String)c)    &&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	148	None	replace
579	[BUG]  [BUGGY]  if(isLiteral((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG))  {	  if(isLiteral((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG))    {    	non-compiled	[CE]  	140	None	replace
580	[BUG]  [BUGGY]  if(isLenient((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    char)c)    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	130	None	replace
581	[BUG]  [BUGGY]  if(isLenient((  char)c)||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    char)c)    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	130	None	replace
582	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(pathNames,  new  String[stackSize  -  1]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(pathNames,  new  String[stackSize  -  1]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(pathNames,  new  String[stackSize  -  1]);	  int[]    pathIndices    =    stack.toArray(pathNames);    	non-compiled	[CE]  	60	None	replace
583	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(pathNames,  PEEKED_DOUBLE_QUOTED_NAME);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(pathNames,  PEEKED_DOUBLE_QUOTED_NAME);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(pathNames,  PEEKED_DOUBLE_QUOTED_NAME);	  int[]    pathIndices    =    stack.toArray(pathNames);    	non-compiled	[CE]  	60	None	replace
584	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLenient((  char)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLenient((  char)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLenient((  char)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader    ||    isLenient((    char)c))    {    	non-compiled	[CE]  	136	None	replace
585	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLenient((  char)c))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLenient((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||  isLenient((  char)c))  {	  if(!lenient    Reader    ||    isLenient((    char)c))    {    	non-compiled	[CE]  	136	None	replace
586	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked!=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked!=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peeked!=  NUMBER_CHAR_QUOTED_NAME)  {	  if(!lenient    Reader((    char)c)||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	14	None	replace
587	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)  ||  peeked!=  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)  ||  peeked!=  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)  ||  peeked!=  PEEKED_BUFFERED_NAME)  {	  if(!lenient    Reader((    char)c)||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	14	None	replace
588	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)||  isNullOrEmpty((  char)c))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)||  isNullOrEmpty((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)||  isNullOrEmpty((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isEmpty((    char)c))    {    	non-compiled	[CE]  	44	None	replace
589	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)||  isEmpty((  char)peekStack[pos]))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)||  isEmpty((  char)peekStack[pos]))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)||  isEmpty((  char)peekStack[pos]))  {	  if(!lenient    Reader((    char)c)    ||    isEmpty((    char)c))    {    	non-compiled	[CE]  	44	None	replace
590	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  -  3]);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  -  3]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  -  3]);	  int[]    pathIndices    =    stack.toArray(new    String[pathNames.size()    ]);    	non-compiled	[CE]  	62	None	replace
591	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  <  =  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	51	None	replace
592	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)  &&  peeked!=  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)  &&  peeked!=  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)  &&  peeked!=  PEEKED_BUFFERED_NAME)  {	  if(!lenient    Reader((    char)c)&&    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	124	None	replace
593	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isUnquotedString((    String)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	42	None	replace
594	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isUnquotedString((    String)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	42	None	replace
595	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  &&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  &&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  &&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(isUnquotedString((    String)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	42	None	replace
596	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  ==  PEEKED_BOOLEAN_QUOTED_NAME)  {  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  ==  PEEKED_BOOLEAN_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peeked  ==  PEEKED_BOOLEAN_QUOTED_NAME)  {	  if(isUnquotedString((    String)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	42	None	replace
597	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peeked  ==  PEEKED_BUFFERED)  {	  if(isUnquotedString((    String)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	42	None	replace
598	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	78	None	replace
599	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c)||    peekStack[pos--]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	90	None	replace
600	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peekStack[stackSize--]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)||  peekStack[stackSize--]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peekStack[stackSize--]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c)||    peekStack[pos--]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	90	None	replace
601	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)||  isSynthetic((  String)c))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)||  isSynthetic((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)||  isSynthetic((  String)c))  {	  if(!lenient    Reader((    String)c)    ||    isLiteral((    String)c))    {    	non-compiled	[CE]  	123	None	replace
602	[BUG]  [BUGGY]  if(isLiteral((  String)c)&&  peeked  <  =  PEEKED_BUFFERED)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)&&  peeked  <  =  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)&&  peeked  <  =  PEEKED_BUFFERED)  {	  if(isLiteral((    char)c)    &&    peeked    <    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	76	None	replace
603	[BUG]  [BUGGY]  if(isLiteral((  int)c)||  peeked  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  int)c)||  peeked  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  int)c)||  peeked  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked    ==    NUMBER_CHAR_QUOTED_NAME)    {    	non-compiled	[CE]  	120	None	replace
604	[BUG]  [BUGGY]  if(isLenient((  int)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  int)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  int)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLenient((    char)c)    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	150	None	replace
605	[BUG]  [BUGGY]  if(isLenient((  char)c)||  pathIndices[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)||  pathIndices[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)||  pathIndices[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLenient((    char)c)    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	150	None	replace
606	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	55	None	replace
607	[BUG]  [BUGGY]  if(isLiteral((  char)c)  <  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)  <  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  <  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	55	None	replace
608	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)||  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    char)c)    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	55	None	replace
609	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  stack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    char)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	96	None	replace
610	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	17	None	replace
611	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	17	None	replace
612	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	89	None	replace
613	[BUG]  [BUGGY]  if(isWhitespace((  char)c)  ||  isLenient((  char)c))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isWhitespace((  char)c)  ||  isLenient((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isWhitespace((  char)c)  ||  isLenient((  char)c))  {	  if(isUnquotedString((    char)c)||    isLenient((    char)c))    {    	non-compiled	[CE]  	149	None	replace
614	[BUG]  [BUGGY]  if(isWhitespace((  String)c)||  isUnquotedString((  String)c))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isWhitespace((  String)c)||  isUnquotedString((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isWhitespace((  String)c)||  isUnquotedString((  String)c))  {	  if(isLenient((    String)c)    ||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	27	None	replace
615	[BUG]  [BUGGY]  if(isLenient((  String)c)||  isUnquotedString((  String)peekStack))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)||  isUnquotedString((  String)peekStack))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  isUnquotedString((  String)peekStack))  {	  if(isLenient((    String)c)    ||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	27	None	replace
616	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  peeked  >=  PEEKED_BUFFERED)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)&&  peeked  >=  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  peeked  >=  PEEKED_BUFFERED)  {	  if(isLiteral((    char)c)    ||    peeked    >=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	122	None	replace
617	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  peeked  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peeked  ==  PEEKED_DOUBLE_QUOTED)  {	  if(isLiteral((    char)c)    ||    peeked    >=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	122	None	replace
618	[BUG]  [BUGGY]  if(isLiteral((  long)c)||  peeked!=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  long)c)||  peeked!=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  long)c)||  peeked!=  NUMBER_CHAR_EXP_SIGN)  {	  if(isLiteral((    char)c)    ||    peeked!=    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	144	None	replace
619	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {	  if(isUnquotedString((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME)    {    	non-compiled	[CE]  	92	None	replace
620	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.DANGLING_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.DANGLING_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.DANGLING_NAME)  {	  if(isUnquotedString((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME)    {    	non-compiled	[CE]  	92	None	replace
621	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(true,  PEEKED_UNQUOTED_NAME);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  pos  =  nextNonWhitespace(true,  PEEKED_UNQUOTED_NAME);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  pos  =  nextNonWhitespace(true,  PEEKED_UNQUOTED_NAME);	  int    pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	117	None	replace
622	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[pos--]  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[pos--]  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLiteral((  char)c)||  peekStack[pos--]  ==  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    &&    isLiteral((    char)c))    {    	non-compiled	[CE]  	49	None	replace
623	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  	105	None	replace
624	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!isUnquotedString((  String)c))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!isUnquotedString((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!isUnquotedString((  String)c))  {	  if(!isUnquotedString((    String)c))    {    	non-compiled	[CE]  	40	None	replace
625	[BUG]  [BUGGY]  if(!isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!isUnquotedString((    String)c))    {    	non-compiled	[CE]  	40	None	replace
626	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!isUnquotedString((    String)c))    {    	non-compiled	[CE]  	40	None	replace
627	[BUG]  [BUGGY]  if(!isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {	  if(!isUnquotedString((    String)c))    {    	non-compiled	[CE]  	40	None	replace
628	[BUG]  [BUGGY]  if(!isUnquotedString((  String)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!isUnquotedString((  String)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isUnquotedString((  String)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!isUnquotedString((    String)c))    {    	non-compiled	[CE]  	40	None	replace
629	[BUG]  [BUGGY]  if(!isUnquotedString((  String)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!isUnquotedString((  String)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isUnquotedString((  String)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(!isUnquotedString((    String)c))    {    	non-compiled	[CE]  	40	None	replace
630	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLenient((    String)c)    ||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	129	None	replace
631	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peeked  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)||  peeked  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peeked  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c)    ||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	129	None	replace
632	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[pos  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	20	None	replace
633	[BUG]  [BUGGY]  if(isLenient((  String)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	20	None	replace
634	[BUG]  [BUGGY]  if(isLiteral((  String)c)  <  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)  <  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)  <  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    String)c)    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	56	None	replace
635	[BUG]  [BUGGY]  int  stackSize  =  pathIndices.length;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  stackSize  =  pathIndices.length;  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  pathIndices.length;	  int    stackSize    =    stack.length();    	non-compiled	[CE]  	61	None	replace
636	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	104	None	replace
637	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	104	None	replace
638	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	22	None	replace
639	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	22	None	replace
640	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)||  isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    String)c)    ||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	26	None	replace
641	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(false,  JsonScope.DANGLING_NAME);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  pos  =  nextNonWhitespace(false,  JsonScope.DANGLING_NAME);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	pos  =  nextNonWhitespace(false,  JsonScope.DANGLING_NAME);	  pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	63	None	replace
642	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(true,  PEEKED_UNQUOTED_NAME);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  pos  =  nextNonWhitespace(true,  PEEKED_UNQUOTED_NAME);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	pos  =  nextNonWhitespace(true,  PEEKED_UNQUOTED_NAME);	  pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	63	None	replace
643	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	97	None	replace
644	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.DANGLING_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.DANGLING_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.DANGLING_NAME)  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME)    {    	non-compiled	[CE]  	109	None	replace
645	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLE_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLE_QUOTED_NAME)  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME)    {    	non-compiled	[CE]  	109	None	replace
646	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	137	None	replace
647	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	137	None	replace
648	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    char)c)||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	80	None	replace
649	[BUG]  [BUGGY]  if(!lenientReaders((  char)c)&&  isISOControl((  char)c))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenientReaders((  char)c)&&  isISOControl((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenientReaders((  char)c)&&  isISOControl((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isISOControl((    char)c))    {    	non-compiled	[CE]  	85	None	replace
650	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  	138	None	replace
651	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  	138	None	replace
652	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked!=  PEEKED_BOOLEAN_QUOTED_NAME)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked!=  PEEKED_BOOLEAN_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked!=  PEEKED_BOOLEAN_QUOTED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	134	None	replace
653	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	11	None	replace
654	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	11	None	replace
655	[BUG]  [BUGGY]  if(isUpperCase((  String)c)||  isLenient((  String)peekStack))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUpperCase((  String)c)||  isLenient((  String)peekStack))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUpperCase((  String)c)||  isLenient((  String)peekStack))  {	  if(isUpperCase((    String)c)    ||    isLenient((    String)c))    {    	non-compiled	[CE]  	29	None	replace
656	[BUG]  [BUGGY]  if(isLenient((  char)c)||  isUnquotedString((  char)peekStack[pos]))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)||  isUnquotedString((  char)peekStack[pos]))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)||  isUnquotedString((  char)peekStack[pos]))  {	  if(isLenient((    char)c)    ||    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	25	None	replace
657	[BUG]  [BUGGY]  if(isWhitespace((  char)c)||  isUnquotedString((  char)c))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isWhitespace((  char)c)||  isUnquotedString((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isWhitespace((  char)c)||  isUnquotedString((  char)c))  {	  if(isLenient((    char)c)    ||    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	25	None	replace
658	[BUG]  [BUGGY]  if(isLenient((  int)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  int)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  int)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(isLenient((    char)c)    ||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	147	None	replace
659	[BUG]  [BUGGY]  if(isLenient((  char)c)||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLenient((    char)c)    ||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	147	None	replace
660	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	19	None	replace
661	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader((  String)c))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader((  String)c))  {	  if(!lenient    Reader((    String)c))    {    	non-compiled	[CE]  	4	None	replace
662	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {	  if(!lenient    Reader((    String)c))    {    	non-compiled	[CE]  	4	None	replace
663	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  peeked  >  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)&&  peeked  >  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  peeked  >  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked    >    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	8	None	replace
664	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  >=  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  peeked  >=  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peeked  >=  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked    >    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	8	None	replace
665	[BUG]  [BUGGY]  if(isLiteral((  char)c)  <  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)  <  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  <  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c)    &&    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	66	None	replace
666	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  ==  PEEKED_BOOLEAN_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  ==  PEEKED_BOOLEAN_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  ==  PEEKED_BOOLEAN_QUOTED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	52	None	replace
667	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(!lenient    Reader((    char)c)||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	12	None	replace
668	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peeked  ==  NUMBER_CHAR_DECIMAL)  {	  if(!lenient    Reader((    char)c)||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	12	None	replace
669	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLenient((    String)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	21	None	replace
670	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  peeked  ==  PEEKED_BUFFER)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  peeked  ==  PEEKED_BUFFER)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  peeked  ==  PEEKED_BUFFER)  {	  if(isLenient((    String)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	21	None	replace
671	[BUG]  [BUGGY]  if(c  ==  JsonScope.UNQUOTED_NAME  ||!lenient  Reader  &&  isUnquotedString((  String)c))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.UNQUOTED_NAME  ||!lenient  Reader  &&  isUnquotedString((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.UNQUOTED_NAME  ||!lenient  Reader  &&  isUnquotedString((  String)c))  {	  if(!lenient    Reader    ||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	37	None	replace
672	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isUnquotedString((  String)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isUnquotedString((  String)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isUnquotedString((  String)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader    ||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	37	None	replace
673	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    	non-compiled	[CE]  	39	None	replace
674	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING)  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    	non-compiled	[CE]  	39	None	replace
675	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames  -  1]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames  -  1]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames  -  1]);	  int[]    pathIndices    =    stack.toArray(new    String[stackSize    -    1]);    	non-compiled	[CE]  	145	None	replace
676	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[peekNames.length  -  1]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[peekNames.length  -  1]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(new  String[peekNames.length  -  1]);	  int[]    pathIndices    =    stack.toArray(new    String[stackSize    -    1]);    	non-compiled	[CE]  	145	None	replace
677	[BUG]  [BUGGY]  if(isEmpty((  String)c)||  isUnquotedString((  String)c))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isEmpty((  String)c)||  isUnquotedString((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isEmpty((  String)c)||  isUnquotedString((  String)c))  {	  if(isUnquotedString((    String)c)||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	133	None	replace
678	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  isUnquotedString((  String)peekStack))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  isUnquotedString((  String)peekStack))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  isUnquotedString((  String)peekStack))  {	  if(isUnquotedString((    String)c)||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	133	None	replace
679	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	106	None	replace
680	[BUG]  [BUGGY]  int[]  pathNames  =  stack.toArray(new  String[pathNames.length  -  1]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathNames  =  stack.toArray(new  String[pathNames.length  -  1]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathNames  =  stack.toArray(new  String[pathNames.length  -  1]);	  int[]    pathNames    =    stack.toArray(new    String[pathNames.size()    ]);    	non-compiled	[CE]  	146	None	replace
681	[BUG]  [BUGGY]  int[]  pathNames  =  stack.toArray(new  String[pathNames.length  ]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathNames  =  stack.toArray(new  String[pathNames.length  ]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathNames  =  stack.toArray(new  String[pathNames.length  ]);	  int[]    pathNames    =    stack.toArray(new    String[pathNames.size()    ]);    	non-compiled	[CE]  	146	None	replace
682	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG))    {    	non-compiled	[CE]  	135	None	replace
683	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)&&  peeked!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)&&  peeked!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)&&  peeked!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peeked!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	41	None	replace
684	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peekStack.contains(JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peekStack.contains(JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peekStack.contains(JsonScope.NONEMPTY_OBJECT))  {	  if(isUnquotedString((    String)c)||    peeked!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	41	None	replace
685	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  ||  isLiteral((  String)c))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  ||  isLiteral((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  ||  isLiteral((  String)c))  {	  if(!lenient    Reader    ||    isLiteral((    String)c))    {    	non-compiled	[CE]  	1	None	replace
686	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  String)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader    ||    isLiteral((    String)c))    {    	non-compiled	[CE]  	1	None	replace
687	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)  &&  isUnquotedString((  String)c))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)  &&  isUnquotedString((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)  &&  isUnquotedString((  String)c))  {	  if(isUnquotedString((    String)c)&&    isLiteral((    String)c))    {    	non-compiled	[CE]  	70	None	replace
688	[BUG]  [BUGGY]  if(isUpperCase((  String)c)&&  isLiteral((  String)c))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUpperCase((  String)c)&&  isLiteral((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUpperCase((  String)c)&&  isLiteral((  String)c))  {	  if(isUnquotedString((    String)c)&&    isLiteral((    String)c))    {    	non-compiled	[CE]  	70	None	replace
689	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_ARRAY))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_ARRAY))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[pos  -  1]  ==  JsonScope.NONEMPTY_ARRAY))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_ARRAY))    {    	non-compiled	[CE]  	126	None	replace
690	[BUG]  [BUGGY]  if(isNonWhitespace((  char)c)  ||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isNonWhitespace((  char)c)  ||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isNonWhitespace((  char)c)  ||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    char)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	93	None	replace
691	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    String)c)    ||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	73	None	replace
692	[BUG]  [BUGGY]  if(isLenient((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME))    {    	non-compiled	[CE]  	127	None	replace
693	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING)    {    	non-compiled	[CE]  	39	None	replace
694	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(pathNames,  null);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(pathNames,  null);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(pathNames,  null);	  int[]    pathIndices    =    stack.toArray(pathNames);    	non-compiled	[CE]  	60	None	replace
695	[BUG]  [BUGGY]  if(lenient  Reader((  char)c)  ||  isUnquotedString((  char)c))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(lenient  Reader((  char)c)  ||  isUnquotedString((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(lenient  Reader((  char)c)  ||  isUnquotedString((  char)c))  {	  if(!lenient    Reader((    char)c)||    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	131	None	replace
696	[BUG]  [BUGGY]  if(isLiteral((  String)c)  <  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)  <  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)  <  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    String)c)    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	68	None	replace
697	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  >  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  char)c)||  peeked  >  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peeked  >  PEEKED_BUFFERED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked    <    PEEKED_BUFFERED_NAME)    {    	non-compiled	[CE]  	34	None	replace
698	[BUG]  [BUGGY]  if(!lenient  &&  isLenient((  char)c)  ||  isUpperCase((  char)c))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  &&  isLenient((  char)c)  ||  isUpperCase((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  &&  isLenient((  char)c)  ||  isUpperCase((  char)c))  {	  if(isLenient((    char)c)||    isUpperCase((    char)c))    {    	non-compiled	[CE]  	28	None	replace
699	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  &&  peeked  <  =  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  &&  peeked  <  =  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  &&  peeked  <  =  PEEKED_BUFFERED_NAME)  {	  if(isLiteral((    char)c)&&    peeked    <    =    PEEKED_BUFFERED_NAME)    {    	non-compiled	[CE]  	107	None	replace
700	[BUG]  [BUGGY]  if(!isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(!isUnquotedString((    String)c))    {    	non-compiled	[CE]  	40	None	replace
701	[BUG]  [BUGGY]  if(!isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {	  if(!isUnquotedString((    String)c))    {    	non-compiled	[CE]  	40	None	replace
702	[BUG]  [BUGGY]  if(!isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {	  if(!isUnquotedString((    String)c))    {    	non-compiled	[CE]  	40	None	replace
703	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  stack[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  stack[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peekStack[pos--]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	110	None	replace
704	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  pathNames[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  pathNames[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  pathNames[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peekStack[pos--]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	110	None	replace
705	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)&&  peeked  <  PEEKED_BUFFERED)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)&&  peeked  <  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)&&  peeked  <  PEEKED_BUFFERED)  {	  if(isLiteral((    char)c)    &&    peeked    <    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	76	None	replace
706	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[stackSize]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peekStack[stackSize]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peekStack[stackSize]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader((    char)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	96	None	replace
707	[BUG]  [BUGGY]  if(isLenient((  char)c)||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)    ||    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	72	None	replace
708	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)    ||    stack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	72	None	replace
709	[BUG]  [BUGGY]  if(lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	13	None	replace
710	[BUG]  [BUGGY]  int  stackSize  =  stack.getSize();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  stackSize  =  stack.getSize();  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  stack.getSize();	  int    stackSize    =    stack.size();    	non-compiled	[CE]  	116	None	replace
711	[BUG]  [BUGGY]  if(lenient  Reader((  char)c)||  isImmutableChar((  char)c))  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(lenient  Reader((  char)c)||  isImmutableChar((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(lenient  Reader((  char)c)||  isImmutableChar((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isImmutableChar((    char)c))    {    	non-compiled	[CE]  	46	None	replace
712	[BUG]  [BUGGY]  if(lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	11	None	replace
713	[BUG]  [BUGGY]  if(isLenient((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	22	None	replace
714	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  ||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  ||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  ||  peeked  ==  PEEKED_BUFFERED)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	52	None	replace
715	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLenient((  String)c)&&  peeked  <  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLenient((  String)c)&&  peeked  <  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLenient((  String)c)&&  peeked  <  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    ||    isLenient((    String)c))    {    	non-compiled	[CE]  	18	None	replace
716	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLenient((  String)c)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLenient((  String)c)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLenient((  String)c)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    ||    isLenient((    String)c))    {    	non-compiled	[CE]  	18	None	replace
717	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLenient((  String)c),  peekedString)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLenient((  String)c),  peekedString)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLenient((  String)c),  peekedString)  {	  if(!lenient    Reader    ||    isLenient((    String)c))    {    	non-compiled	[CE]  	18	None	replace
718	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked  >  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked  >  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peeked  >  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader((    char)c)||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	12	None	replace
719	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peeked  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(!lenient    Reader((    char)c)||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	12	None	replace
720	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)||  peeked!=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)||  peeked!=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)||  peeked!=  NUMBER_CHAR_EXP_SIGN)  {	  if(isLiteral((    char)c)    ||    peeked!=    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	144	None	replace
721	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size  -  1]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size  -  1]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.size  -  1]);	  int[]    pathIndices    =    stack.toArray(new    String[stackSize    -    1]);    	non-compiled	[CE]  	145	None	replace
722	[BUG]  [BUGGY]  if(isUnquotedString((  char)peekStack)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)peekStack)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)peekStack)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)peekStack)&&    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	119	None	replace
723	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[stackSize]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	89	None	replace
724	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  pathIndices[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  pathIndices[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  pathIndices[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	89	None	replace
725	[BUG]  [BUGGY]  if(isLenient((  char)c)  <  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)  <  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)  <  =  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLenient((    char)c)    ||    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	150	None	replace
726	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	36	None	replace
727	[BUG]  [BUGGY]  if(!isLenient((  char)c))  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!isLenient((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isLenient((  char)c))  {	  if(!isUnquotedString((    char)c))    {    	non-compiled	[CE]  	82	None	replace
728	[BUG]  [BUGGY]  if(!isWhitespace((  char)c))  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!isWhitespace((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isWhitespace((  char)c))  {	  if(!isUnquotedString((    char)c))    {    	non-compiled	[CE]  	82	None	replace
729	[BUG]  [BUGGY]  if(lenient  Reader((  char)c)||  isEmpty((  char)c))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(lenient  Reader((  char)c)||  isEmpty((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(lenient  Reader((  char)c)||  isEmpty((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isEmpty((    char)c))    {    	non-compiled	[CE]  	44	None	replace
730	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLenient((  char)c)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLenient((  char)c)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLenient((  char)c)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    ||    isLenient((    char)c))    {    	non-compiled	[CE]  	136	None	replace
731	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLenient((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLenient((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLenient((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    ||    isLenient((    char)c))    {    	non-compiled	[CE]  	136	None	replace
732	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLenient((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLenient((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLenient((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    ||    isLenient((    char)c))    {    	non-compiled	[CE]  	136	None	replace
733	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  <  =  PEEKED_BOOLEAN_QUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  <  =  PEEKED_BOOLEAN_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)  &&  peeked  <  =  PEEKED_BOOLEAN_QUOTED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	51	None	replace
734	[BUG]  [BUGGY]  if(lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME)    {    	non-compiled	[CE]  	100	None	replace
735	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	38	None	replace
736	[BUG]  [BUGGY]  if(isLenient((  char)peekStack[pos])||  isUpperCase((  char)c)||  isLenient((  char)peekStack[pos]))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)peekStack[pos])||  isUpperCase((  char)c)||  isLenient((  char)peekStack[pos]))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)peekStack[pos])||  isUpperCase((  char)c)||  isLenient((  char)peekStack[pos]))  {	  if(isUpperCase((    char)c)    ||    isLenient((    char)peekStack[pos]))    {    	non-compiled	[CE]  	95	None	replace
737	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  ||  isUnquotedString((  String)c))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  ||  isUnquotedString((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  ||  isUnquotedString((  String)c))  {	  if(!lenient    Reader    ||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	37	None	replace
738	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isUnquotedString((  String)c)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isUnquotedString((  String)c)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isUnquotedString((  String)c)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    ||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	37	None	replace
739	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isUnquotedString((  String)c),  peekedString)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isUnquotedString((  String)c),  peekedString)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isUnquotedString((  String)c),  peekedString)  {	  if(!lenient    Reader    ||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	37	None	replace
740	[BUG]  [BUGGY]  if(lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONE);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONE);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONE);	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONE);    	non-compiled	[CE]  	16	None	replace
741	[BUG]  [BUGGY]  if(isLenient((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_ARRAY))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_ARRAY))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_ARRAY))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_ARRAY))    {    	non-compiled	[CE]  	126	None	replace
742	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_ARRAY))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_ARRAY))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_ARRAY))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_ARRAY))    {    	non-compiled	[CE]  	126	None	replace
743	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	23	None	replace
744	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peeked  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)||  peeked  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peeked  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(isLenient((    String)c)    ||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	129	None	replace
745	[BUG]  [BUGGY]  if(lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	97	None	replace
746	[BUG]  [BUGGY]  if(isLenient((  int)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  int)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  int)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    char)c)    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	130	None	replace
747	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked!=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  char)c)  ||  peeked!=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  peeked!=  NUMBER_CHAR_EXP_SIGN)  {	  if(!lenient    Reader((    char)c)||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	14	None	replace
748	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isEnabled((  char)c))  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isEnabled((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isEnabled((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||!lenient    Reader    &&    isLiteral((    char)c))    {    	non-compiled	[CE]  	102	None	replace
749	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isUnquotedChar((  char)c))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isUnquotedChar((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isUnquotedChar((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||!lenient    Reader    &&    isLiteral((    char)c))    {    	non-compiled	[CE]  	102	None	replace
750	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isFunction((  char)c))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isFunction((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isFunction((  char)c))  {	  if(c    ==    JsonScope.NONEMPTY_OBJECT    ||!lenient    Reader    &&    isLiteral((    char)c))    {    	non-compiled	[CE]  	102	None	replace
751	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)&&    stack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	111	None	replace
752	[BUG]  [BUGGY]  if(lenient  Reader((  char)c)||  isLenient((  char)c))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(lenient  Reader((  char)c)||  isLenient((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(lenient  Reader((  char)c)||  isLenient((  char)c))  {	  if(!lenient    Reader((    char)c)    &&    isLenient((    char)c))    {    	non-compiled	[CE]  	94	None	replace
753	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)  &&  isLenient((  String)c))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)  &&  isLenient((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)  &&  isLenient((  String)c))  {	  if(!lenient    Reader((    char)c)    &&    isLenient((    char)c))    {    	non-compiled	[CE]  	94	None	replace
754	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	17	None	replace
755	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME)    {    	non-compiled	[CE]  	109	None	replace
756	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  pathIndices[pos--]  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  pathIndices[pos--]  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  pathIndices[pos--]  ==  PEEKED_UNQUOTED_NAME)  {	  if(isLenient((    String)c)||    peekStack[pos--]    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	91	None	replace
757	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {	  if(isUnquotedString((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  	138	None	replace
758	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {	  if(!lenient    Reader    ||    isLiteral((    String)c))    {    	non-compiled	[CE]  	1	None	replace
759	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_DIGIT))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_DIGIT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_DIGIT))  {	  if(!lenient    Reader    ||    isLiteral((    String)c))    {    	non-compiled	[CE]  	1	None	replace
760	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(!lenient    Reader    ||    isLiteral((    String)c))    {    	non-compiled	[CE]  	1	None	replace
761	[BUG]  [BUGGY]  if(isLiteral((  String)c)&&  peeked  <  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLiteral((  String)c)&&  peeked  <  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)&&  peeked  <  PEEKED_BUFFERED_NAME)  {	  if(isLiteral((    String)c)&&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	2	None	replace
762	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)&&  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)&&  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)&&  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLiteral((    char)c)    &&    peeked!=    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	114	None	replace
763	[BUG]  [BUGGY]  if(lenient  Reader((  char)c)||  isStatic((  char)c))  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(lenient  Reader((  char)c)||  isStatic((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(lenient  Reader((  char)c)||  isStatic((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isStatic((    char)c))    {    	non-compiled	[CE]  	47	None	replace
764	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)||  peeked!=  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)||  peeked!=  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)||  peeked!=  PEEKED_BUFFERED_NAME)  {	  if(isLiteral((    char)c)    ||    peeked!=    PEEKED_BUFFERED_NAME)    {    	non-compiled	[CE]  	10	None	replace
765	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked!=  PEEKED_BUFFERED)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked!=  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peeked!=  PEEKED_BUFFERED)  {	  if(isUnquotedString((    String)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	42	None	replace
766	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_STRING))    {    	non-compiled	[CE]  	19	None	replace
767	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  pathNames[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  pathNames[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  pathNames[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peekStack[pos]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	108	None	replace
768	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.get(peedString,  peekedLong);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.get(peedString,  peekedLong);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.get(peedString,  peekedLong);	  int[]    pathIndices    =    stack.get(peekedString);    	non-compiled	[CE]  	64	None	replace
769	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.get(peedString,  PEEKED_BUFFERED);  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathIndices  =  stack.get(peedString,  PEEKED_BUFFERED);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.get(peedString,  PEEKED_BUFFERED);	  int[]    pathIndices    =    stack.get(peekedString);    	non-compiled	[CE]  	64	None	replace
770	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peeked  >=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c)||  peeked  >=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLiteral((  char)c)||  peeked  >=  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    &&    isLiteral((    char)c))    {    	non-compiled	[CE]  	49	None	replace
771	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peekStackTop  >  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peekStackTop  >  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peekStackTop  >  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peeked!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	41	None	replace
772	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  >  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)  ||  peeked  >  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  peeked  >  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c)||    peeked!=    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	41	None	replace
773	[BUG]  [BUGGY]  int  stackSize  =  stack[stackSize  -  1]  +  PEEKED_BUFFERED;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  stackSize  =  stack[stackSize  -  1]  +  PEEKED_BUFFERED;  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  stack[stackSize  -  1]  +  PEEKED_BUFFERED;	  int    stackSize    =    stack[stackSize    -    1];    	non-compiled	[CE]  	58	None	replace
774	[BUG]  [BUGGY]  int  stackSize  =  stack[stackSize  -  1]  *  NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  stackSize  =  stack[stackSize  -  1]  *  NUMBER_CHAR_EXP_SIGN;  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  stack[stackSize  -  1]  *  NUMBER_CHAR_EXP_SIGN;	  int    stackSize    =    stack[stackSize    -    1];    	non-compiled	[CE]  	58	None	replace
775	[BUG]  [BUGGY]  if(lenient  Reader((  char)c)||  isUnquotedChar((  char)c))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(lenient  Reader((  char)c)||  isUnquotedChar((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(lenient  Reader((  char)c)||  isUnquotedChar((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isUnquotedChar((    char)c))    {    	non-compiled	[CE]  	45	None	replace
776	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)  ||  isUnquotedChar((  String)c))  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)  ||  isUnquotedChar((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)  ||  isUnquotedChar((  String)c))  {	  if(!lenient    Reader((    char)c)    ||    isUnquotedChar((    char)c))    {    	non-compiled	[CE]  	45	None	replace
777	[BUG]  [BUGGY]  if(lenient  Reader((  char)c)||  isUnquoted((  char)c))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(lenient  Reader((  char)c)||  isUnquoted((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(lenient  Reader((  char)c)||  isUnquoted((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isUnquoted((    char)c))    {    	non-compiled	[CE]  	84	None	replace
778	[BUG]  [BUGGY]  if(lenient  Reader((  char)c)  ||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(lenient  Reader((  char)c)  ||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(lenient  Reader((  char)c)  ||  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader((    char)c)&&    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	124	None	replace
779	[BUG]  [BUGGY]  if(!lenient  Reader((  int)c)  &&  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  int)c)  &&  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  int)c)  &&  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader((    char)c)&&    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	124	None	replace
780	[BUG]  [BUGGY]  if(!lenient  &&  isLenient((  String)c)  ||  isUpperCase((  String)c))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  &&  isLenient((  String)c)  ||  isUpperCase((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  &&  isLenient((  String)c)  ||  isUpperCase((  String)c))  {	  if(isLenient((    String)c)||    isUpperCase((    String)c))    {    	non-compiled	[CE]  	31	None	replace
781	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)  ||  isUpperCase((  String)c))  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)  ||  isUpperCase((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)  ||  isUpperCase((  String)c))  {	  if(isLenient((    String)c)||    isUpperCase((    String)c))    {    	non-compiled	[CE]  	31	None	replace
782	[BUG]  [BUGGY]  if(lenient  Reader((  char)c)||  isISOControl((  char)c))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(lenient  Reader((  char)c)||  isISOControl((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(lenient  Reader((  char)c)||  isISOControl((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isISOControl((    char)c))    {    	non-compiled	[CE]  	85	None	replace
783	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  isUnquoted((  String)c))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  isUnquoted((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  isUnquoted((  String)c))  {	  if(isLenient((    String)c)||    isLiteral((    String)c))    {    	non-compiled	[CE]  	71	None	replace
784	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLE_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.DANGLE_QUOTED_NAME)  {	  if(isUnquotedString((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.DANGLING_NAME)    {    	non-compiled	[CE]  	92	None	replace
785	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)||  peeked!=  PEEKED_BUFFERED_OBJECT)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)||  peeked!=  PEEKED_BUFFERED_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)||  peeked!=  PEEKED_BUFFERED_OBJECT)  {	  if(isLiteral((    char)c)    ||    peeked!=    PEEKED_BUFFERED_OBJECT)    {    	non-compiled	[CE]  	32	None	replace
786	[BUG]  [BUGGY]  if(isLenient((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_BLOCK))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_BLOCK))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_BLOCK))  {	  if(isLenient((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_BLOCK))    {    	non-compiled	[CE]  	128	None	replace
787	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {	  if(isLiteral((    String)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG))    {    	non-compiled	[CE]  	140	None	replace
788	[BUG]  [BUGGY]  int[]  pathNames  =  stack.toArray(new  String[pathNames.size()  -  3]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int[]  pathNames  =  stack.toArray(new  String[pathNames.size()  -  3]);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathNames  =  stack.toArray(new  String[pathNames.size()  -  3]);	  int[]    pathNames    =    stack.toArray(new    String[pathNames.size()    ]);    	non-compiled	[CE]  	146	None	replace
789	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  pathIndices[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)  ||  pathIndices[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  pathIndices[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c)||    peekStack[pos--]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	90	None	replace
790	[BUG]  [BUGGY]  if(lenient  Reader((  char)c)||  isBoolean((  char)c))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(lenient  Reader((  char)c)||  isBoolean((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(lenient  Reader((  char)c)||  isBoolean((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isBoolean((    char)c))    {    	non-compiled	[CE]  	142	None	replace
791	[BUG]  [BUGGY]  if(isUpperCase((  char)c)  ||  isUnquotedString((  char)c))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUpperCase((  char)c)  ||  isUnquotedString((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUpperCase((  char)c)  ||  isUnquotedString((  char)c))  {	  if(isLiteral((    char)c)&&    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	101	None	replace
792	[BUG]  [BUGGY]  if(lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(lenient  Reader((  char)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    char)c)&&    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	99	None	replace
793	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(false,  stack.length);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  int  pos  =  nextNonWhitespace(false,  stack.length);  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  pos  =  nextNonWhitespace(false,  stack.length);	  int    pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	115	None	replace
794	[BUG]  [BUGGY]  if(lenient  Reader((  char)c)||  isNumberChar((  char)c))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(lenient  Reader((  char)c)||  isNumberChar((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(lenient  Reader((  char)c)||  isNumberChar((  char)c))  {	  if(!lenient    Reader((    char)c)    ||    isNumberChar((    char)c))    {    	non-compiled	[CE]  	83	None	replace
795	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)  ||  isNumberChar((  String)c))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)  ||  isNumberChar((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)  ||  isNumberChar((  String)c))  {	  if(!lenient    Reader((    char)c)    ||    isNumberChar((    char)c))    {    	non-compiled	[CE]  	83	None	replace
796	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)&&  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isUnquotedString((  String)c)&&  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)&&  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLiteral((    char)c)    &&    peeked    ==    PEEKED_DOUBLE_QUOTED_NAME)    {    	non-compiled	[CE]  	113	None	replace
797	[BUG]  [BUGGY]  if(lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG))    {    	non-compiled	[CE]  	125	None	replace
798	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG))    {    	non-compiled	[CE]  	125	None	replace
799	[BUG]  [BUGGY]  if(isNumber((  String)c)||  isUnquotedString((  String)c))  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isNumber((  String)c)||  isUnquotedString((  String)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isNumber((  String)c)||  isUnquotedString((  String)c))  {	  if(isLiteral((    String)c)    ||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	26	None	replace
800	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_ARRAY))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_ARRAY))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_ARRAY))  {	  if(!lenient    Reader((    String)c))    {    	non-compiled	[CE]  	4	None	replace
801	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME))  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME))  {	  if(!lenient    Reader((    String)c))    {    	non-compiled	[CE]  	4	None	replace
802	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_DIGIT))  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_DIGIT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_DIGIT))  {	  if(!lenient    Reader((    String)c))    {    	non-compiled	[CE]  	4	None	replace
803	[BUG]  [BUGGY]  if(isLenient((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)&&    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	74	None	replace
804	[BUG]  [BUGGY]  if(lenient  Reader((  char)c)||  isLiteral((  char)c))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(lenient  Reader((  char)c)||  isLiteral((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(lenient  Reader((  char)c)||  isLiteral((  char)c))  {	  if(!lenient    Reader((    char)c)    &&    isLiteral((    char)c))    {    	non-compiled	[CE]  	43	None	replace
805	[BUG]  [BUGGY]  if(isLenient((  String)c)&&  peeked  <  =  PEEKED_BUFFERED)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)&&  peeked  <  =  PEEKED_BUFFERED)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)&&  peeked  <  =  PEEKED_BUFFERED)  {	  if(isLenient((    String)c)    &&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	148	None	replace
806	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c)  ||  peeked!=  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c)  ||  peeked!=  PEEKED_BUFFERED_NAME)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  String)c)  ||  peeked!=  PEEKED_BUFFERED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c)||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	134	None	replace
807	[BUG]  [BUGGY]  if(isNonWhitespace((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_QUOTED_NAME))  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isNonWhitespace((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_QUOTED_NAME))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isNonWhitespace((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_QUOTED_NAME))  {	  if(isNonWhitespace((    char)c))    {    	non-compiled	[CE]  	132	None	replace
808	[BUG]  [BUGGY]  if(nextNonWhitespace((  char)c))  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(nextNonWhitespace((  char)c))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(nextNonWhitespace((  char)c))  {	  if(isNonWhitespace((    char)c))    {    	non-compiled	[CE]  	132	None	replace
809	[BUG]  [BUGGY]  if(lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(lenient  Reader((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {	  if(!lenient    Reader((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG)    {    	non-compiled	[CE]  	98	None	replace
810	[BUG]  [BUGGY]  if(isLenient((  String)c)||  isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.      [BUGGY]  if(isLenient((  String)c)||  isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]      return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLenient((    String)c)    ||    isUnquotedString((    String)c))    {    	non-compiled	[CE]  	27	None	replace
