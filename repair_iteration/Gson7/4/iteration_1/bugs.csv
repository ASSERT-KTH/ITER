bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c))  {  [CE]  [FE]    JsonSyntaxException  [CONTEXT]  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c))  {  [BUGGY]  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c))  {	if  (isLiteral((char)  c))  {  	non-compiled	[CE]  	7	None	replace
2	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]      JsonSyntaxException  [CONTEXT]  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]  if(isLiteral((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {	if  (isLiteral((char)  c))  {  	non-compiled	[CE]  	7	None	replace
3	[BUG]  [BUGGY]  if(isUnquotedString((  String)c))  {  [CE]  [FE]        JsonSyntaxException  [CONTEXT]  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]  if(isUnquotedString((  String)c))  {  [BUGGY]  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c))  {	if  (isLiteral((char)  c))  {  	non-compiled	[CE]  	7	None	replace
4	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]          JsonSyntaxException  [CONTEXT]  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]  if(isLiteral((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {	if  (isLiteral((char)  c))  {  	non-compiled	[CE]  	7	None	replace
5	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]            JsonSyntaxException  [CONTEXT]  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]  if(isLiteral((  char)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	if  (isLiteral((char)  c))  {  	non-compiled	[CE]  	7	None	replace
6	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]              JsonSyntaxException  [CONTEXT]  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]  if(isLiteral((  char)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	if  (isLiteral((char)  c))  {  	non-compiled	[CE]  	7	None	replace
7	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peeked  >=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException  [CONTEXT]  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]  if(isLiteral((  char)c)||  peeked  >=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peeked  >=  PEEKED_UNQUOTED_NAME)  {	if  (isLiteral((char)  c))  {  	non-compiled	[CE]  	7	None	replace
8	[BUG]  [BUGGY]    [CE]  [FE]                  JsonSyntaxException  [CONTEXT]  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]    [BUGGY]  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	  	if  (isLiteral((char)  c))  {  	non-compiled	[CE]  	7	None	replace
9	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]    JsonSyntaxException  [CONTEXT]  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]  if(isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	if  (isLiteral((char)  c))  {  	non-compiled	[CE]  	7	None	replace
10	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  isUnquotedString((  char)c))  {  [CE]  [FE]      JsonSyntaxException  [CONTEXT]  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]  if(isLiteral((  char)c)||  isUnquotedString((  char)c))  {  [BUGGY]  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  isUnquotedString((  char)c))  {	if  (isLiteral((char)  c))  {  	non-compiled	[CE]  	7	None	replace
11	[BUG]  [BUGGY]  if(isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]        JsonSyntaxException  [CONTEXT]  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]  if(isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	if  (isLiteral((char)  c))  {  	non-compiled	[CE]  	7	None	replace
12	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]          JsonSyntaxException  [CONTEXT]  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]  if(isLiteral((  char)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	if  (isLiteral((char)  c))  {  	non-compiled	[CE]  	7	None	replace
13	[BUG]  [BUGGY]  if(isUnquotedString((  char)c))  {  [CE]  [FE]            JsonSyntaxException  [CONTEXT]  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]  if(isUnquotedString((  char)c))  {  [BUGGY]  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c))  {	if  (isLiteral((char)  c))  {  	non-compiled	[CE]  	7	None	replace
14	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c))  {  [CE]  [FE]    JsonSyntaxException  [CONTEXT]  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]  if(!lenient  Reader((  char)c))  {  [BUGGY]  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c))  {	if  (isLiteral((char)  c))  {  	non-compiled	[CE]  	7	None	replace
15	[BUG]  [BUGGY]  if(isLenient((  String)c))  {  [CE]  [FE]      JsonSyntaxException  [CONTEXT]  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]  if(isLenient((  String)c))  {  [BUGGY]  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c))  {	if  (isLiteral((char)  c))  {  	non-compiled	[CE]  	7	None	replace
16	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)||  isLiteral((  String)c))  {  [CE]  [FE]        JsonSyntaxException  [CONTEXT]  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]  if(isUnquotedString((  String)c)||  isLiteral((  String)c))  {  [BUGGY]  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)||  isLiteral((  String)c))  {	if  (isLiteral((char)  c))  {  	non-compiled	[CE]  	7	None	replace
17	[BUG]  [BUGGY]  if(isLiteral((  String)c))  {  [CE]  [FE]          JsonSyntaxException  [CONTEXT]  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]  if(isLiteral((  String)c))  {  [BUGGY]  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c))  {	if  (isLiteral((char)  c))  {  	non-compiled	[CE]  	7	None	replace
18	[BUG]  [BUGGY]  if(isUpperCase((  char)c)||  isLenient((  char)c))  {  [CE]  [FE]            JsonSyntaxException  [CONTEXT]  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]  if(isUpperCase((  char)c)||  isLenient((  char)c))  {  [BUGGY]  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUpperCase((  char)c)||  isLenient((  char)c))  {	if  (isLiteral((char)  c))  {  	non-compiled	[CE]  	7	None	replace
19	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)||  isLiteral((  char)c))  {  [CE]  [FE]              JsonSyntaxException  [CONTEXT]  return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError( "Expected  name ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  [BUGGY]  if(!lenient  Reader((  char)c)||  isLiteral((  char)c))  {  [BUGGY]  return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError( "Expected  name ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)||  isLiteral((  char)c))  {	if  (isLiteral((char)  c))  {  	non-compiled	[CE]  	7	None	replace
