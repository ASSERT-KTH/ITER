bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c))  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader  ||  isLiteral((  String)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  String)c))  {	  if(isLiteral((    String)c))    {    	non-compiled	[CE]  	17	None	replace
2	[BUG]  [BUGGY]  if(isLiteral((  String)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  String)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    String)c))    {    	non-compiled	[CE]  	17	None	replace
3	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  String)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    String)c))    {    	non-compiled	[CE]  	17	None	replace
4	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c))  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  String)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c))  {	  if(isLiteral((    String)c))    {    	non-compiled	[CE]  	17	None	replace
5	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  String)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    String)c))    {    	non-compiled	[CE]  	17	None	replace
6	[BUG]  [BUGGY]  if(isLiteral((  String)c)  ||  peeked  >=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  String)c)  ||  peeked  >=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)  ||  peeked  >=  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    char)c)||    peeked    >=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	7	None	replace
7	[BUG]  [BUGGY]  if(isLiteral((  String)c)  ||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  String)c)  ||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)  ||  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    char)c)||    peeked    >=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	7	None	replace
8	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  peeked  >  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  ||  peeked  >  PEEKED_UNQUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  ||  peeked  >  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    char)c)||    peeked    >=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	7	None	replace
9	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  peeked!=  PEEKED_BUFFERED)  {  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  ||  peeked!=  PEEKED_BUFFERED)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  ||  peeked!=  PEEKED_BUFFERED)  {	  if(isLiteral((    char)c)||    peeked    >=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	7	None	replace
10	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  peeked!=  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                            JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  ||  peeked!=  PEEKED_BUFFERED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  ||  peeked!=  PEEKED_BUFFERED_NAME)  {	  if(isLiteral((    char)c)||    peeked    >=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	7	None	replace
11	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader((    char)c))    {    	non-compiled	[CE]  	14	None	replace
12	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader((    char)c))    {    	non-compiled	[CE]  	14	None	replace
13	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(!lenient    Reader((    char)c))    {    	non-compiled	[CE]  	14	None	replace
14	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader((    char)c))    {    	non-compiled	[CE]  	14	None	replace
15	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)||  peeked  ==  PEEKED_BUFFERED)  {	  if(!lenient    Reader((    char)c))    {    	non-compiled	[CE]  	14	None	replace
16	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONE);  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONE);  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONE);	  if(!lenient    Reader((    char)c))    {    	non-compiled	[CE]  	14	None	replace
17	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLenient((    String)c))    {    	non-compiled	[CE]  	15	None	replace
18	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLenient((  String)c))  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader  ||  isLenient((  String)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLenient((  String)c))  {	  if(isLenient((    String)c))    {    	non-compiled	[CE]  	15	None	replace
19	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(isLenient((    String)c))    {    	non-compiled	[CE]  	15	None	replace
20	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  String)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(isLenient((    String)c))    {    	non-compiled	[CE]  	15	None	replace
21	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  String)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(isLenient((    String)c))    {    	non-compiled	[CE]  	15	None	replace
22	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c))    {    	non-compiled	[CE]  	15	None	replace
23	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  String)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_STRING))  {	  if(isLenient((    String)c))    {    	non-compiled	[CE]  	15	None	replace
24	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)||  isLiteral((  char)c))  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUnquotedString((  char)c)||  isLiteral((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)||  isLiteral((  char)c))  {	  if(isLiteral((    char)c)||    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	10	None	replace
25	[BUG]  [BUGGY]  if(isLenient((  char)c)  ||  isUnquotedString((  char)c))  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  char)c)  ||  isUnquotedString((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)  ||  isUnquotedString((  char)c))  {	  if(isLiteral((    char)c)||    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	10	None	replace
26	[BUG]  [BUGGY]  if(isLiteral((  String)c)  ||  isUnquotedString((  String)c))  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  String)c)  ||  isUnquotedString((  String)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)  ||  isUnquotedString((  String)c))  {	  if(isLiteral((    char)c)||    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	10	None	replace
27	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  isUnquotedString((  String)c))  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  String)c)  ||  isUnquotedString((  String)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  isUnquotedString((  String)c))  {	  if(isLiteral((    char)c)||    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	10	None	replace
28	[BUG]  [BUGGY]  if(isLenient((  char)c)||  isUpperCase((  char)c))  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  char)c)||  isUpperCase((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)||  isUpperCase((  char)c))  {	  if(isUpperCase((    char)c)||    isLenient((    char)c))    {    	non-compiled	[CE]  	18	None	replace
29	[BUG]  [BUGGY]  if(isUpperCase((  String)c)  ||  isLenient((  String)c))  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUpperCase((  String)c)  ||  isLenient((  String)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUpperCase((  String)c)  ||  isLenient((  String)c))  {	  if(isUpperCase((    char)c)||    isLenient((    char)c))    {    	non-compiled	[CE]  	18	None	replace
30	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  isLenient((  char)c))  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)  ||  isLenient((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  isLenient((  char)c))  {	  if(isUpperCase((    char)c)||    isLenient((    char)c))    {    	non-compiled	[CE]  	18	None	replace
31	[BUG]  [BUGGY]  if(isLenient((  String)c)||  isUpperCase((  String)c))  {  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  String)c)||  isUpperCase((  String)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  isUpperCase((  String)c))  {	  if(isUpperCase((    char)c)||    isLenient((    char)c))    {    	non-compiled	[CE]  	18	None	replace
32	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  peeked!=  PEEKED_BUFFERED_OBJECT)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  ||  peeked!=  PEEKED_BUFFERED_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  ||  peeked!=  PEEKED_BUFFERED_OBJECT)  {	  if(isLiteral((    char)c)||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	2	None	replace
33	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  peeked  ==  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  ||  peeked  ==  PEEKED_BUFFERED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  ||  peeked  ==  PEEKED_BUFFERED_NAME)  {	  if(isLiteral((    char)c)||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	2	None	replace
34	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  peeked  <  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  ||  peeked  <  PEEKED_BUFFERED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  ||  peeked  <  PEEKED_BUFFERED_NAME)  {	  if(isLiteral((    char)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	5	None	replace
35	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  peeked  <  =  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  ||  peeked  <  =  PEEKED_BUFFERED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  ||  peeked  <  =  PEEKED_BUFFERED_NAME)  {	  if(isLiteral((    char)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	5	None	replace
36	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c))    {    	non-compiled	[CE]  	3	None	replace
37	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isUnquotedString((  String)c))  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader  ||  isUnquotedString((  String)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isUnquotedString((  String)c))  {	  if(isUnquotedString((    String)c))    {    	non-compiled	[CE]  	3	None	replace
38	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c))    {    	non-compiled	[CE]  	3	None	replace
39	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {	  if(isUnquotedString((    String)c))    {    	non-compiled	[CE]  	3	None	replace
40	[BUG]  [BUGGY]  if(!isUnquotedString((  String)c))  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!isUnquotedString((  String)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isUnquotedString((  String)c))  {	  if(isUnquotedString((    String)c))    {    	non-compiled	[CE]  	3	None	replace
41	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)||  peeked!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUnquotedString((  String)c)||  peeked!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)||  peeked!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c))    {    	non-compiled	[CE]  	3	None	replace
42	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUnquotedString((  String)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(isUnquotedString((    String)c))    {    	non-compiled	[CE]  	3	None	replace
43	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  isLiteral((  char)c))  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)  &&  isLiteral((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  isLiteral((  char)c))  {	  if(!lenient    Reader((    char)c)||    isLiteral((    char)c))    {    	non-compiled	[CE]  	19	None	replace
44	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  isEmpty((  char)c))  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)  ||  isEmpty((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  isEmpty((  char)c))  {	  if(!lenient    Reader((    char)c)||    isLiteral((    char)c))    {    	non-compiled	[CE]  	19	None	replace
45	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  isUnquotedChar((  char)c))  {  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)  ||  isUnquotedChar((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  isUnquotedChar((  char)c))  {	  if(!lenient    Reader((    char)c)||    isLiteral((    char)c))    {    	non-compiled	[CE]  	19	None	replace
46	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  isImmutableChar((  char)c))  {  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)  ||  isImmutableChar((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  isImmutableChar((  char)c))  {	  if(!lenient    Reader((    char)c)||    isLiteral((    char)c))    {    	non-compiled	[CE]  	19	None	replace
47	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  isStatic((  char)c))  {  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)  ||  isStatic((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  isStatic((  char)c))  {	  if(!lenient    Reader((    char)c)||    isLiteral((    char)c))    {    	non-compiled	[CE]  	19	None	replace
48	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  peeked  ==  PEEKED_BUFFERED)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  ||  peeked  ==  PEEKED_BUFFERED)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  ||  peeked  ==  PEEKED_BUFFERED)  {	  if(isLiteral((    char)c)||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	4	None	replace
49	[BUG]  [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c))  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader  &&  isLiteral((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  &&  isLiteral((  char)c))  {	  if(!lenient    Reader    ||    isLiteral((    char)c))    {    	non-compiled	[CE]  	1	None	replace
50	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader    ||    isLiteral((    char)c))    {    	non-compiled	[CE]  	1	None	replace
51	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c))    {    	non-compiled	[CE]  	1	None	replace
52	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)||  peeked  ==  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c))    {    	non-compiled	[CE]  	1	None	replace
53	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(!lenient    Reader    ||    isLiteral((    char)c))    {    	non-compiled	[CE]  	1	None	replace
54	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)&&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c))    {    	non-compiled	[CE]  	1	None	replace
55	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	9	None	replace
56	[BUG]  [BUGGY]  if(isLiteral((  String)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  String)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	9	None	replace
57	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	9	None	replace
58	[BUG]  [BUGGY]  int  stackSize  =  stack[stackSize  -  1];  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  int  stackSize  =  stack[stackSize  -  1];  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  stack[stackSize  -  1];	      	non-compiled	[CE]  	8	None	replace
59	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  1]);  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  1]);  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  1]);	      	non-compiled	[CE]  	8	None	replace
60	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(pathNames);  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  int[]  pathIndices  =  stack.toArray(pathNames);  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(pathNames);	      	non-compiled	[CE]  	8	None	replace
61	[BUG]  [BUGGY]  int  stackSize  =  stack.length();  [CE]  [FE]                            JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  int  stackSize  =  stack.length();  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  stack.length();	      	non-compiled	[CE]  	8	None	replace
62	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);  [CE]  [FE]                              JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);	      	non-compiled	[CE]  	8	None	replace
63	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(true);  [CE]  [FE]                                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  pos  =  nextNonWhitespace(true);  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	pos  =  nextNonWhitespace(true);	      	non-compiled	[CE]  	8	None	replace
64	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.get(peekedString);  [CE]  [FE]                                  JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  int[]  pathIndices  =  stack.get(peekedString);  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.get(peekedString);	      	non-compiled	[CE]  	8	None	replace
65	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c)&&    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	12	None	replace
66	[BUG]  [BUGGY]  if(isLiteral((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c)&&    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	12	None	replace
67	[BUG]  [BUGGY]  if(isLiteral((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c)&&    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	12	None	replace
68	[BUG]  [BUGGY]  if(isLiteral((  String)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  String)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c)&&    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	12	None	replace
69	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)  ||  isLenient((  String)c))  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUnquotedString((  String)c)  ||  isLenient((  String)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)  ||  isLenient((  String)c))  {	  if(isUnquotedString((    String)c)||    isLiteral((    String)c))    {    	non-compiled	[CE]  	16	None	replace
70	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)&&  isLiteral((  String)c))  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUnquotedString((  String)c)&&  isLiteral((  String)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)&&  isLiteral((  String)c))  {	  if(isUnquotedString((    String)c)||    isLiteral((    String)c))    {    	non-compiled	[CE]  	16	None	replace
71	[BUG]  [BUGGY]  if(isLenient((  String)c)||  isLiteral((  String)c))  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  String)c)||  isLiteral((  String)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  isLiteral((  String)c))  {	  if(isUnquotedString((    String)c)||    isLiteral((    String)c))    {    	non-compiled	[CE]  	16	None	replace
72	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	11	None	replace
73	[BUG]  [BUGGY]  if(isLiteral((  String)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  String)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)  ||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	11	None	replace
74	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)&&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	11	None	replace
75	[BUG]  [BUGGY]  if(isLiteral((  char)c)  &&  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  &&  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  &&  peeked  ==  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    char)c)&&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	6	None	replace
76	[BUG]  [BUGGY]  if(isLiteral((  char)c)  &&  peeked  <  PEEKED_BUFFERED)  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  &&  peeked  <  PEEKED_BUFFERED)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  &&  peeked  <  PEEKED_BUFFERED)  {	  if(isLiteral((    char)c)&&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	6	None	replace
77	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isUnquotedString((  char)c))  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader  ||  isUnquotedString((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isUnquotedString((  char)c))  {	  if(isUnquotedString((    char)c))    {    	non-compiled	[CE]  	13	None	replace
78	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    char)c))    {    	non-compiled	[CE]  	13	None	replace
79	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING)  {	  if(isUnquotedString((    char)c))    {    	non-compiled	[CE]  	13	None	replace
80	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUnquotedString((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    char)c))    {    	non-compiled	[CE]  	13	None	replace
81	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(isUnquotedString((    char)c))    {    	non-compiled	[CE]  	13	None	replace
82	[BUG]  [BUGGY]  if(!isUnquotedString((  char)c))  {  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!isUnquotedString((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!isUnquotedString((  char)c))  {	  if(isUnquotedString((    char)c))    {    	non-compiled	[CE]  	13	None	replace
83	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  isNumberChar((  char)c))  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)  ||  isNumberChar((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  isNumberChar((  char)c))  {	  if(!lenient    Reader((    char)c)||    isLiteral((    char)c))    {    	non-compiled	[CE]  	19	None	replace
84	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  isUnquoted((  char)c))  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)  ||  isUnquoted((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  isUnquoted((  char)c))  {	  if(!lenient    Reader((    char)c)||    isLiteral((    char)c))    {    	non-compiled	[CE]  	19	None	replace
85	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  isISOControl((  char)c))  {  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)  ||  isISOControl((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  isISOControl((  char)c))  {	  if(!lenient    Reader((    char)c)||    isLiteral((    char)c))    {    	non-compiled	[CE]  	19	None	replace
86	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  ||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  ||  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLiteral((    char)c)||    peeked    >=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	7	None	replace
87	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  ||  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  ||  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLiteral((    char)c)||    peeked    >=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	7	None	replace
88	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  peeked!=  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  ||  peeked!=  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  ||  peeked!=  NUMBER_CHAR_QUOTED_NAME)  {	  if(isLiteral((    char)c)||    peeked    >=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	7	None	replace
89	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  String)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c))    {    	non-compiled	[CE]  	15	None	replace
90	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peekStack[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  String)c)||  peekStack[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peekStack[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLenient((    String)c))    {    	non-compiled	[CE]  	15	None	replace
91	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peekStack[pos--]  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  String)c)||  peekStack[pos--]  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peekStack[pos--]  ==  PEEKED_UNQUOTED_NAME)  {	  if(isLenient((    String)c))    {    	non-compiled	[CE]  	15	None	replace
92	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {	  if(isUnquotedString((    char)c))    {    	non-compiled	[CE]  	13	None	replace
93	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUnquotedString((  char)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    char)c))    {    	non-compiled	[CE]  	13	None	replace
94	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  &&  isLenient((  char)c))  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)  &&  isLenient((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  &&  isLenient((  char)c))  {	  if(isUpperCase((    char)c)||    isLenient((    char)c))    {    	non-compiled	[CE]  	18	None	replace
95	[BUG]  [BUGGY]  if(isUpperCase((  char)c)  ||  isLenient((  char)peekStack[pos]))  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUpperCase((  char)c)  ||  isLenient((  char)peekStack[pos]))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUpperCase((  char)c)  ||  isLenient((  char)peekStack[pos]))  {	  if(isUpperCase((    char)c)||    isLenient((    char)c))    {    	non-compiled	[CE]  	18	None	replace
96	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    char)c))    {    	non-compiled	[CE]  	14	None	replace
97	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    char)c))    {    	non-compiled	[CE]  	14	None	replace
98	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {	  if(!lenient    Reader((    char)c))    {    	non-compiled	[CE]  	14	None	replace
99	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)&&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader((    char)c))    {    	non-compiled	[CE]  	14	None	replace
100	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {	  if(!lenient    Reader((    char)c))    {    	non-compiled	[CE]  	14	None	replace
101	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  isUnquotedString((  char)c))  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)&&  isUnquotedString((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  isUnquotedString((  char)c))  {	  if(isLiteral((    char)c)||    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	10	None	replace
102	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isLiteral((  char)c))  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isLiteral((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT  ||!lenient  Reader  &&  isLiteral((  char)c))  {	  if(!lenient    Reader    ||    isLiteral((    char)c))    {    	non-compiled	[CE]  	1	None	replace
103	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader    ||    isLiteral((    char)c))    {    	non-compiled	[CE]  	1	None	replace
104	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(!lenient    Reader    ||    isLiteral((    char)c))    {    	non-compiled	[CE]  	1	None	replace
105	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {	  if(!lenient    Reader    ||    isLiteral((    char)c))    {    	non-compiled	[CE]  	1	None	replace
106	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(!lenient    Reader    ||    isLiteral((    char)c))    {    	non-compiled	[CE]  	1	None	replace
107	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  peeked  <  =  PEEKED_BUFFERED_NAME)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)&&  peeked  <  =  PEEKED_BUFFERED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  peeked  <  =  PEEKED_BUFFERED_NAME)  {	  if(isLiteral((    char)c)||    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	5	None	replace
108	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUnquotedString((  String)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)||  peekStack[pos]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c))    {    	non-compiled	[CE]  	3	None	replace
109	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME)  {	  if(isUnquotedString((    String)c))    {    	non-compiled	[CE]  	3	None	replace
110	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)||  peekStack[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUnquotedString((  String)c)||  peekStack[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)||  peekStack[pos--]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isUnquotedString((    String)c))    {    	non-compiled	[CE]  	3	None	replace
111	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	9	None	replace
112	[BUG]  [BUGGY]  if(isLiteral((  char)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)&&  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)||    peekStack[stackSize    -    1]!=    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	11	None	replace
113	[BUG]  [BUGGY]  if(isLiteral((  char)c)  &&  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  &&  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  &&  peeked  ==  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLiteral((    char)c)&&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	6	None	replace
114	[BUG]  [BUGGY]  if(isLiteral((  char)c)  &&  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  &&  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  &&  peeked!=  PEEKED_DOUBLE_QUOTED_NAME)  {	  if(isLiteral((    char)c)&&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	6	None	replace
115	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(false);  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  int  pos  =  nextNonWhitespace(false);  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  pos  =  nextNonWhitespace(false);	      	non-compiled	[CE]  	8	None	replace
116	[BUG]  [BUGGY]  int  stackSize  =  stack.size();  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  int  stackSize  =  stack.size();  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  stackSize  =  stack.size();	      	non-compiled	[CE]  	8	None	replace
117	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(true);  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  int  pos  =  nextNonWhitespace(true);  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int  pos  =  nextNonWhitespace(true);	      	non-compiled	[CE]  	8	None	replace
118	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c)&&    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	12	None	replace
119	[BUG]  [BUGGY]  if(isLiteral((  char)peekStack)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)peekStack)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)peekStack)&&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c)&&    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	12	None	replace
120	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  peeked  ==  NUMBER_CHAR_QUOTED_NAME)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  ||  peeked  ==  NUMBER_CHAR_QUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  ||  peeked  ==  NUMBER_CHAR_QUOTED_NAME)  {	  if(isLiteral((    char)c)||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	4	None	replace
121	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  peeked  >=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  String)c)  ||  peeked  >=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  peeked  >=  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    char)c)||    peeked    >=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	7	None	replace
122	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  peeked  >=  PEEKED_BUFFERED)  {  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  ||  peeked  >=  PEEKED_BUFFERED)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  ||  peeked  >=  PEEKED_BUFFERED)  {	  if(isLiteral((    char)c)||    peeked    >=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	7	None	replace
123	[BUG]  [BUGGY]  if(!lenient  Reader((  String)c)  ||  isLiteral((  String)c))  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  String)c)  ||  isLiteral((  String)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  String)c)  ||  isLiteral((  String)c))  {	  if(isUnquotedString((    String)c)||    isLiteral((    String)c))    {    	non-compiled	[CE]  	16	None	replace
124	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)&&  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader((    char)c))    {    	non-compiled	[CE]  	14	None	replace
125	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {	  if(!lenient    Reader((    char)c))    {    	non-compiled	[CE]  	14	None	replace
126	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_ARRAY))  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_ARRAY))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_ARRAY))  {	  if(isLenient((    String)c))    {    	non-compiled	[CE]  	15	None	replace
127	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME))  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.DANGLING_NAME))  {	  if(isLenient((    String)c))    {    	non-compiled	[CE]  	15	None	replace
128	[BUG]  [BUGGY]  if(isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_BLOCK))  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_BLOCK))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_BLOCK))  {	  if(isLenient((    String)c))    {    	non-compiled	[CE]  	15	None	replace
129	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  String)c)  ||  peeked  ==  PEEKED_UNQUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  peeked  ==  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    char)c)||    peeked    ==    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	4	None	replace
130	[BUG]  [BUGGY]  if(isLenient((  char)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  char)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT)  {	  if(isLiteral((    char)c)&&    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT)    {    	non-compiled	[CE]  	12	None	replace
131	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)||  isUnquotedString((  char)c))  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)||  isUnquotedString((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)||  isUnquotedString((  char)c))  {	  if(isUnquotedString((    char)c))    {    	non-compiled	[CE]  	13	None	replace
132	[BUG]  [BUGGY]  if(isNonWhitespace((  char)c))  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isNonWhitespace((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isNonWhitespace((  char)c))  {	  if(isUnquotedString((    char)c))    {    	non-compiled	[CE]  	13	None	replace
133	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)||  isUnquotedString((  String)c))  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUnquotedString((  String)c)||  isUnquotedString((  String)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)||  isUnquotedString((  String)c))  {	  if(isUnquotedString((    char)c))    {    	non-compiled	[CE]  	13	None	replace
134	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)||  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(!lenient    Reader    ||    isLiteral((    char)c))    {    	non-compiled	[CE]  	1	None	replace
135	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLiteral((  char)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {	  if(!lenient    Reader    ||    isLiteral((    char)c))    {    	non-compiled	[CE]  	1	None	replace
136	[BUG]  [BUGGY]  if(!lenient  Reader  ||  isLenient((  char)c))  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader  ||  isLenient((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader  ||  isLenient((  char)c))  {	  if(!lenient    Reader    ||    isLiteral((    char)c))    {    	non-compiled	[CE]  	1	None	replace
137	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isUnquotedString((    String)c))    {    	non-compiled	[CE]  	3	None	replace
138	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {	  if(isUnquotedString((    String)c))    {    	non-compiled	[CE]  	3	None	replace
139	[BUG]  [BUGGY]  if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(isUnquotedString((    String)c))    {    	non-compiled	[CE]  	3	None	replace
140	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG))  {	  if(isLiteral((    String)c))    {    	non-compiled	[CE]  	17	None	replace
141	[BUG]  [BUGGY]  if(isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  String)c)||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_STRING))  {	  if(isLiteral((    String)c))    {    	non-compiled	[CE]  	17	None	replace
142	[BUG]  [BUGGY]  if(!lenient  Reader((  char)c)  ||  isBoolean((  char)c))  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(!lenient  Reader((  char)c)  ||  isBoolean((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(!lenient  Reader((  char)c)  ||  isBoolean((  char)c))  {	  if(!lenient    Reader((    char)c)||    isLiteral((    char)c))    {    	non-compiled	[CE]  	19	None	replace
143	[BUG]  [BUGGY]  if(isLenient((  String)c)  ||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  String)c)  ||  peeked!=  PEEKED_UNQUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  ||  peeked!=  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    char)c)||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	2	None	replace
144	[BUG]  [BUGGY]  if(isLiteral((  char)c)  ||  peeked!=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLiteral((  char)c)  ||  peeked!=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLiteral((  char)c)  ||  peeked!=  NUMBER_CHAR_EXP_SIGN)  {	  if(isLiteral((    char)c)||    peeked!=    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	2	None	replace
145	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[stackSize  -  1]);  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[stackSize  -  1]);  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathIndices  =  stack.toArray(new  String[stackSize  -  1]);	      	non-compiled	[CE]  	8	None	replace
146	[BUG]  [BUGGY]  int[]  pathNames  =  stack.toArray(new  String[pathNames.size()  ]);  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  int[]  pathNames  =  stack.toArray(new  String[pathNames.size()  ]);  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	int[]  pathNames  =  stack.toArray(new  String[pathNames.size()  ]);	      	non-compiled	[CE]  	8	None	replace
147	[BUG]  [BUGGY]  if(isLenient((  char)c)  ||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  char)c)  ||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)  ||  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    char)c)&&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	6	None	replace
148	[BUG]  [BUGGY]  if(isLenient((  String)c)  &&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  String)c)  &&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  String)c)  &&  peeked  <  =  PEEKED_UNQUOTED_NAME)  {	  if(isLiteral((    char)c)&&    peeked    <    =    PEEKED_UNQUOTED_NAME)    {    	non-compiled	[CE]  	6	None	replace
149	[BUG]  [BUGGY]  if(isUnquotedString((  char)c)||  isLenient((  char)c))  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isUnquotedString((  char)c)||  isLenient((  char)c))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isUnquotedString((  char)c)||  isLenient((  char)c))  {	  if(isLiteral((    char)c)||    isUnquotedString((    char)c))    {    	non-compiled	[CE]  	10	None	replace
150	[BUG]  [BUGGY]  if(isLenient((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    return  peeked  =  PEEKED_SINGLE_QUOTED_NAME;  case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.    [BUGGY]  if(isLenient((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {  [BUGGY]    return  peeked  =  PEEKED_UNQUOTED_NAME;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	514	514	3	replace	if(isLenient((  char)c)  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT))  {	  if(isLiteral((    char)c)||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT))    {    	non-compiled	[CE]  	9	None	replace
