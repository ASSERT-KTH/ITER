bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  }	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    new    String(buffer,    pos    +    1,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	14	None	replace
2	[BUG]  [BUGGY]  pendString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  pendString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	pendString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    new    String(buffer,    pos    +    1,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	14	None	replace
3	[BUG]  [BUGGY]  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    new    String(buffer,    pos    +    1,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	14	None	replace
4	[BUG]  [BUGGY]  buckedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  buckedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	buckedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    new    String(buffer,    pos    +    1,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	14	None	replace
5	[BUG]  [BUGGY]  piedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  piedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	piedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    new    String(buffer,    pos    +    1,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	14	None	replace
6	[BUG]  [BUGGY]  }  else  if(p  >=  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  >=  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  >=  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {	  }    else    if(p    <    =    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  	37	None	replace
7	[BUG]  [BUGGY]  }  else  if(p  <  =  PEEKED_SINGLE_QUOTED  ||  p  >  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  <  =  PEEKED_SINGLE_QUOTED  ||  p  >  PEEKED_BEGIN_ARRAY)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  <  =  PEEKED_SINGLE_QUOTED  ||  p  >  PEEKED_BEGIN_ARRAY)  {	  }    else    if(p    <    =    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  	37	None	replace
8	[BUG]  [BUGGY]  }  else  if(p  <  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  <  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  <  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {	  }    else    if(p    <    =    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  	37	None	replace
9	[BUG]  [BUGGY]  }  else  if(p  <  =  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  <  =  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BEGIN_ARRAY)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  <  =  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BEGIN_ARRAY)  {	  }    else    if(p    <    =    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  	37	None	replace
10	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  size();  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  size();  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  size();  }	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    new    String(buffer,    pos,    peekedNumberLength);    pos    +=    size();    }    	non-compiled	[CE]  	18	None	replace
11	[BUG]  [BUGGY]  pendString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  size();  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  pendString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  size();  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	pendString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  size();	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    new    String(buffer,    pos,    peekedNumberLength);    pos    +=    size();    }    	non-compiled	[CE]  	18	None	replace
12	[BUG]  [BUGGY]  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  size();  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  size();  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  size();	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    new    String(buffer,    pos,    peekedNumberLength);    pos    +=    size();    }    	non-compiled	[CE]  	18	None	replace
13	[BUG]  [BUGGY]  buckedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  size();  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  buckedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  size();  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	buckedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  size();	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    new    String(buffer,    pos,    peekedNumberLength);    pos    +=    size();    }    	non-compiled	[CE]  	18	None	replace
14	[BUG]  [BUGGY]  piedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  size();  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  piedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  size();  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	piedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  size();	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    new    String(buffer,    pos,    peekedNumberLength);    pos    +=    size();    }    	non-compiled	[CE]  	18	None	replace
15	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  size();  }  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  size();  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  size();  }	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    new    String(buffer,    pos,    peekedNumberLength);    pos    +=    size();    }    	non-compiled	[CE]  	18	None	replace
16	[BUG]  [BUGGY]  }  else  if(pos  >=  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(pos  >=  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(pos  >=  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(pos!=    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	42	None	replace
17	[BUG]  [BUGGY]  }  else  if(p!=  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p!=  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p!=  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(pos!=    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	42	None	replace
18	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  pos  <  =  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  pos  <  =  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  pos  <  =  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    &&    pos    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	8	None	replace
19	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  pos  >  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  pos  >  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  pos  >  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    &&    pos    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	8	None	replace
20	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  pos  >=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  pos  >=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  pos  >=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    &&    pos    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	8	None	replace
21	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  pos!=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  pos!=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  pos!=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    &&    pos    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	8	None	replace
22	[BUG]  [BUGGY]  }  else  if(p  <  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  <  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  <  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(pos    <    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	12	None	replace
23	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(buffer,  pos  +  1,  PEEKED_DOUBLE_QUOTED);	  peekedString    =    nextQuotedValue(buffer,    pos    +    1);    	non-compiled	[CE]  	32	None	replace
24	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  peekedNumber);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  peekedNumber);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(buffer,  pos  +  1,  peekedNumber);	  peekedString    =    nextQuotedValue(buffer,    pos    +    1);    	non-compiled	[CE]  	32	None	replace
25	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  2);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  2);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(buffer,  pos  +  2);	  peekedString    =    nextQuotedValue(buffer,    pos    +    1);    	non-compiled	[CE]  	32	None	replace
26	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  PEEKED_SINGLE_QUOTED);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  PEEKED_SINGLE_QUOTED);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(buffer,  pos  +  1,  PEEKED_SINGLE_QUOTED);	  peekedString    =    nextQuotedValue(buffer,    pos    +    1);    	non-compiled	[CE]  	32	None	replace
27	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  3);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  3);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(buffer,  pos  +  3);	  peekedString    =    nextQuotedValue(buffer,    pos    +    1);    	non-compiled	[CE]  	32	None	replace
28	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;  }	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	16	None	replace
29	[BUG]  [BUGGY]  pendString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  pendString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	pendString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	16	None	replace
30	[BUG]  [BUGGY]  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	16	None	replace
31	[BUG]  [BUGGY]  buckedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  buckedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	buckedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	16	None	replace
32	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  0,  peekedNumberLength);  pos  +=  1;  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  0,  peekedNumberLength);  pos  +=  1;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  0,  peekedNumberLength);  pos  +=  1;  }	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	16	None	replace
33	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  }	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos    +    1,    peekedNumberLength);    pos    +=    2;    }    	non-compiled	[CE]  	17	None	replace
34	[BUG]  [BUGGY]  pendString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  pendString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	pendString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos    +    1,    peekedNumberLength);    pos    +=    2;    }    	non-compiled	[CE]  	17	None	replace
35	[BUG]  [BUGGY]  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos    +    1,    peekedNumberLength);    pos    +=    2;    }    	non-compiled	[CE]  	17	None	replace
36	[BUG]  [BUGGY]  buckedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  buckedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	buckedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos    +    1,    peekedNumberLength);    pos    +=    2;    }    	non-compiled	[CE]  	17	None	replace
37	[BUG]  [BUGGY]  if(p  ==  1)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  1)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  1)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  }	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos    +    1,    peekedNumberLength);    pos    +=    2;    }    	non-compiled	[CE]  	17	None	replace
38	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0);  pos  +=  0;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0);  pos  +=  0;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0);  pos  +=  0;  }	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos,    0);    pos    +=    0;    }    	non-compiled	[CE]  	38	None	replace
39	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0,  peekedNumberLength);  pos  +=  0;  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0,  peekedNumberLength);  pos  +=  0;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0,  peekedNumberLength);  pos  +=  0;  }	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos,    0);    pos    +=    0;    }    	non-compiled	[CE]  	38	None	replace
40	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0,  null);  pos  +=  0;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0,  null);  pos  +=  0;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0,  null);  pos  +=  0;  }	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos,    0);    pos    +=    0;    }    	non-compiled	[CE]  	38	None	replace
41	[BUG]  [BUGGY]  pendString  =  new  String(buffer,  pos,  0,  peekedNumberLength);  pos  +=  0;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  pendString  =  new  String(buffer,  pos,  0,  peekedNumberLength);  pos  +=  0;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	pendString  =  new  String(buffer,  pos,  0,  peekedNumberLength);  pos  +=  0;	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos,    0);    pos    +=    0;    }    	non-compiled	[CE]  	38	None	replace
42	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  1);  pos  +=  1;  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  1);  pos  +=  1;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  1);  pos  +=  1;  }	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos,    0);    pos    +=    0;    }    	non-compiled	[CE]  	38	None	replace
43	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0);  pos  +=  1;  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0);  pos  +=  1;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0);  pos  +=  1;  }	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos,    0);    pos    +=    0;    }    	non-compiled	[CE]  	38	None	replace
44	[BUG]  [BUGGY]  peekedString  =  new  String(buffer,  pos,  0,  peekedNumberLength);  pos  +=  0;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  new  String(buffer,  pos,  0,  peekedNumberLength);  pos  +=  0;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  new  String(buffer,  pos,  0,  peekedNumberLength);  pos  +=  0;	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos,    0);    pos    +=    0;    }    	non-compiled	[CE]  	38	None	replace
45	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BEGIN_VALUE)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BEGIN_VALUE)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BEGIN_VALUE)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BEGIN_VALUE)    {    	non-compiled	[CE]  	24	None	replace
46	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEFORE_VALUE)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEFORE_VALUE)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEFORE_VALUE)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BEGIN_VALUE)    {    	non-compiled	[CE]  	24	None	replace
47	[BUG]  [BUGGY]  }  else  if(pos  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_VALUE)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(pos  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_VALUE)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(pos  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_VALUE)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BEGIN_VALUE)    {    	non-compiled	[CE]  	24	None	replace
48	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  >  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  >  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  >  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    &&    p    >=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	2	None	replace
49	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  <  =  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  <  =  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  <  =  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    &&    p    >=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	2	None	replace
50	[BUG]  [BUGGY]  }  else  if(p  >=  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  >=  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  >=  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    >=    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	4	None	replace
51	[BUG]  [BUGGY]  }  else  if(p  >  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  >  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  >  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    >=    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	4	None	replace
52	[BUG]  [BUGGY]  }  else  if(p  <  PEEKED_SINGLE_QUOTED  ||  p  >  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  <  PEEKED_SINGLE_QUOTED  ||  p  >  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  <  PEEKED_SINGLE_QUOTED  ||  p  >  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    >=    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	4	None	replace
53	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_BEGIN_ARRAY)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_BEGIN_ARRAY)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p!=    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  	25	None	replace
54	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  >=  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  >=  PEEKED_BEGIN_ARRAY)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  >=  PEEKED_BEGIN_ARRAY)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p!=    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  	25	None	replace
55	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  >=  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  >=  PEEKED_BEGIN_ARRAY)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  >=  PEEKED_BEGIN_ARRAY)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p!=    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  	25	None	replace
56	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED);	  peekedString    =    nextQuotedValue(peeked);    	non-compiled	[CE]  	30	None	replace
57	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED);	  peekedString    =    nextQuotedValue(peeked);    	non-compiled	[CE]  	30	None	replace
58	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_BUFFERED);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_BUFFERED);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(PEEKED_BUFFERED);	  peekedString    =    nextQuotedValue(peeked);    	non-compiled	[CE]  	30	None	replace
59	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(peeked,  pos);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(peeked,  pos);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(peeked,  pos);	  peekedString    =    nextQuotedValue(peeked);    	non-compiled	[CE]  	30	None	replace
60	[BUG]  [BUGGY]  }  else  if(pos  <  =  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(pos  <  =  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(pos  <  =  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    <    =    PEEKED_SINGLE_QUOTED    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	7	None	replace
61	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_BEGIN_ARRAY)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_BEGIN_ARRAY)  {	  }    else    if(pos    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  	22	None	replace
62	[BUG]  [BUGGY]  }  else  if(pos  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(pos  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BEGIN_ARRAY)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(pos  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BEGIN_ARRAY)  {	  }    else    if(pos    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  	22	None	replace
63	[BUG]  [BUGGY]  }  else  if(pos  <  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(pos  <  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(pos  <  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {	  }    else    if(pos    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  	22	None	replace
64	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(p  +  1);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(p  +  1);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(p  +  1);	  peekedString    =    nextQuotedValue(p);    	non-compiled	[CE]  	33	None	replace
65	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(p,  PEEKED_SINGLE_QUOTED);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(p,  PEEKED_SINGLE_QUOTED);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(p,  PEEKED_SINGLE_QUOTED);	  peekedString    =    nextQuotedValue(p);    	non-compiled	[CE]  	33	None	replace
66	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(p,  PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(p,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(p,  PEEKED_DOUBLE_QUOTED);	  peekedString    =    nextQuotedValue(p);    	non-compiled	[CE]  	33	None	replace
67	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(pos,  pos  +  1);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(pos,  pos  +  1);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(pos,  pos  +  1);	  peekedString    =    nextQuotedValue(pos    +    1);    	non-compiled	[CE]  	29	None	replace
68	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED  +  1);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED  +  1);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED  +  1);	  peekedString    =    nextQuotedValue(pos    +    1);    	non-compiled	[CE]  	29	None	replace
69	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(pos  -  1);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(pos  -  1);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(pos  -  1);	  peekedString    =    nextQuotedValue(pos    +    1);    	non-compiled	[CE]  	29	None	replace
70	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(pos  +  2);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(pos  +  2);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(pos  +  2);	  peekedString    =    nextQuotedValue(pos    +    1);    	non-compiled	[CE]  	29	None	replace
71	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BEGIN_OBJECT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BEGIN_OBJECT)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BEGIN_OBJECT)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BEGIN_OBJECT)    {    	non-compiled	[CE]  	21	None	replace
72	[BUG]  [BUGGY]  }  else  if(pos  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_OBJECT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(pos  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_OBJECT)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(pos  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_OBJECT)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BEGIN_OBJECT)    {    	non-compiled	[CE]  	21	None	replace
73	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEFORE_OBJECT)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEFORE_OBJECT)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEFORE_OBJECT)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BEGIN_OBJECT)    {    	non-compiled	[CE]  	21	None	replace
74	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  pos  +=  1;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  pos  +=  1;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  pos  +=  1;  }	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    nextQuotedValue(buffer,    pos);    pos    +=    1;    }    	non-compiled	[CE]  	40	None	replace
75	[BUG]  [BUGGY]  pendString  =  nextQuotedValue(buffer,  pos);  pos  +=  1;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  pendString  =  nextQuotedValue(buffer,  pos);  pos  +=  1;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	pendString  =  nextQuotedValue(buffer,  pos);  pos  +=  1;	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    nextQuotedValue(buffer,    pos);    pos    +=    1;    }    	non-compiled	[CE]  	40	None	replace
76	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos);  pos  +=  1;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos);  pos  +=  1;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(buffer,  pos);  pos  +=  1;	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    nextQuotedValue(buffer,    pos);    pos    +=    1;    }    	non-compiled	[CE]  	40	None	replace
77	[BUG]  [BUGGY]  piedString  =  nextQuotedValue(buffer,  pos);  pos  +=  1;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  piedString  =  nextQuotedValue(buffer,  pos);  pos  +=  1;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	piedString  =  nextQuotedValue(buffer,  pos);  pos  +=  1;	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    nextQuotedValue(buffer,    pos);    pos    +=    1;    }    	non-compiled	[CE]  	40	None	replace
78	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos  +  1);  pos  +=  1;  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos  +  1);  pos  +=  1;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos  +  1);  pos  +=  1;  }	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    nextQuotedValue(buffer,    pos);    pos    +=    1;    }    	non-compiled	[CE]  	40	None	replace
79	[BUG]  [BUGGY]  }  else  if(p  ==  NUMBER_CHAR_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  NUMBER_CHAR_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  NUMBER_CHAR_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    <    =    NUMBER_CHAR_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	27	None	replace
80	[BUG]  [BUGGY]  }  else  if(p  <  =  NUMBER_CHAR_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  <  =  NUMBER_CHAR_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  <  =  NUMBER_CHAR_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    <    =    NUMBER_CHAR_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	27	None	replace
81	[BUG]  [BUGGY]  }  else  if(p  <  NUMBER_CHAR_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  <  NUMBER_CHAR_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  <  NUMBER_CHAR_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    <    =    NUMBER_CHAR_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	27	None	replace
82	[BUG]  [BUGGY]  }  else  if(p  >=  NUMBER_CHAR_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  >=  NUMBER_CHAR_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  >=  NUMBER_CHAR_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    <    =    NUMBER_CHAR_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	27	None	replace
83	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  }	  peekedString    =    nextQuotedValue(buffer,    pos);    	non-compiled	[CE]  	28	None	replace
84	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  }	  peekedString    =    nextQuotedValue(buffer,    pos);    	non-compiled	[CE]  	28	None	replace
85	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  peekedString    =    nextQuotedValue(buffer,    pos);    	non-compiled	[CE]  	28	None	replace
86	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  peekedString    =    nextQuotedValue(buffer,    pos);    	non-compiled	[CE]  	28	None	replace
87	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  }  else  {  throw  new  JsonSyntaxException( " ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  }  else  {  throw  new  JsonSyntaxException( " ");  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  }  else  {  throw  new  JsonSyntaxException( " ");  }	  peekedString    =    nextQuotedValue(buffer,    pos);    	non-compiled	[CE]  	28	None	replace
88	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  >  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  >  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  >  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    >=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	3	None	replace
89	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  path);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  path);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(buffer,  pos  +  1,  path);	  peekedString    =    nextQuotedValue(buffer,    pos    +    1,    peekedNumberLength);    	non-compiled	[CE]  	19	None	replace
90	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  pathNames);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  pathNames);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(buffer,  pos  +  1,  pathNames);	  peekedString    =    nextQuotedValue(buffer,    pos    +    1,    peekedNumberLength);    	non-compiled	[CE]  	19	None	replace
91	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  PEEKED_NUMBER);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  PEEKED_NUMBER);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(buffer,  pos  +  1,  PEEKED_NUMBER);	  peekedString    =    nextQuotedValue(buffer,    pos    +    1,    peekedNumberLength);    	non-compiled	[CE]  	19	None	replace
92	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  null);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  null);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(buffer,  pos  +  1,  null);	  peekedString    =    nextQuotedValue(buffer,    pos    +    1,    peekedNumberLength);    	non-compiled	[CE]  	19	None	replace
93	[BUG]  [BUGGY]  pos  =  stack.size()  -  1;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  pos  =  stack.size()  -  1;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	pos  =  stack.size()  -  1;	  pos    =    stack.size();    	non-compiled	[CE]  	41	None	replace
94	[BUG]  [BUGGY]  pos  =  stack.size()  +  1;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  pos  =  stack.size()  +  1;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	pos  =  stack.size()  +  1;	  pos    =    stack.size();    	non-compiled	[CE]  	41	None	replace
95	[BUG]  [BUGGY]  pos  =  stack.get(peekedString);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  pos  =  stack.get(peekedString);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	pos  =  stack.get(peekedString);	  pos    =    stack.size();    	non-compiled	[CE]  	41	None	replace
96	[BUG]  [BUGGY]  pos  =  stack.size()  -  2;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  pos  =  stack.size()  -  2;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	pos  =  stack.size()  -  2;	  pos    =    stack.size();    	non-compiled	[CE]  	41	None	replace
97	[BUG]  [BUGGY]  pos  =  stack.getLength();  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  pos  =  stack.getLength();  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	pos  =  stack.getLength();	  pos    =    stack.size();    	non-compiled	[CE]  	41	None	replace
98	[BUG]  [BUGGY]  pos  =  stack.size()  +  2;  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  pos  =  stack.size()  +  2;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	pos  =  stack.size()  +  2;	  pos    =    stack.size();    	non-compiled	[CE]  	41	None	replace
99	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    &&    p    ==    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  	20	None	replace
100	[BUG]  [BUGGY]  }  else  if(p!=  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p!=  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BEGIN_ARRAY)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p!=  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_BEGIN_ARRAY)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    &&    p    ==    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  	20	None	replace
101	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  pos  ==  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  pos  ==  PEEKED_BEGIN_ARRAY)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  pos  ==  PEEKED_BEGIN_ARRAY)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    &&    p    ==    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  	20	None	replace
102	[BUG]  [BUGGY]  }  else  if(p  <  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  <  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  <  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    <    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	6	None	replace
103	[BUG]  [BUGGY]  }  else  if(p  <  PEEKED_SINGLE_QUOTED  ||  p  >=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  <  PEEKED_SINGLE_QUOTED  ||  p  >=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  <  PEEKED_SINGLE_QUOTED  ||  p  >=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    <    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	6	None	replace
104	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  pos  >=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  pos  >=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  pos  >=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    pos    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	11	None	replace
105	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  pos!=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  pos!=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  pos!=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    pos    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	11	None	replace
106	[BUG]  [BUGGY]  }  else  if(p  >=  PEEKED_SINGLE_QUOTED  ||  p  >  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  >=  PEEKED_SINGLE_QUOTED  ||  p  >  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  >=  PEEKED_SINGLE_QUOTED  ||  p  >  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    <    =    PEEKED_SINGLE_QUOTED    ||    p    >    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	5	None	replace
107	[BUG]  [BUGGY]  }  else  if(p!=  PEEKED_SINGLE_QUOTED  ||  p  >  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p!=  PEEKED_SINGLE_QUOTED  ||  p  >  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p!=  PEEKED_SINGLE_QUOTED  ||  p  >  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    <    =    PEEKED_SINGLE_QUOTED    ||    p    >    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	5	None	replace
108	[BUG]  [BUGGY]  }  else  if(p  <  =  PEEKED_SINGLE_QUOTED  ||  p  >=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  <  =  PEEKED_SINGLE_QUOTED  ||  p  >=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  <  =  PEEKED_SINGLE_QUOTED  ||  p  >=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    <    =    PEEKED_SINGLE_QUOTED    ||    p    >    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	5	None	replace
109	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(buffer);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(buffer);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(buffer);	  peekedString    =    nextQuotedValue(pos);    	non-compiled	[CE]  	31	None	replace
110	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(pos);  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(pos);  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(pos);  }	  peekedString    =    nextQuotedValue(pos);    	non-compiled	[CE]  	31	None	replace
111	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(pos);  }  else  {  try  {  result  =  Integer.parseInt(peekedString);  }  catch  (NumberFormatException  nfe)  {  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(pos);  }  else  {  try  {  result  =  Integer.parseInt(peekedString);  }  catch  (NumberFormatException  nfe)  {  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(pos);  }  else  {  try  {  result  =  Integer.parseInt(peekedString);  }  catch  (NumberFormatException  nfe)  {  }	  peekedString    =    nextQuotedValue(pos);    	non-compiled	[CE]  	31	None	replace
112	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  &&  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  &&  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_DOUBLE_QUOTED  &&  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_DOUBLE_QUOTED    ||    p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	26	None	replace
113	[BUG]  [BUGGY]  }  else  if(pos  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(pos  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(pos  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_DOUBLE_QUOTED    ||    p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	26	None	replace
114	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_DECIMAL  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_DECIMAL  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_DECIMAL  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_DOUBLE_QUOTED    ||    p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	26	None	replace
115	[BUG]  [BUGGY]  }  else  if(p  >=  PEEKED_SINGLE_QUOTED  ||  p!=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  >=  PEEKED_SINGLE_QUOTED  ||  p!=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  >=  PEEKED_SINGLE_QUOTED  ||  p!=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    >=    PEEKED_SINGLE_QUOTED    &&    p!=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	43	None	replace
116	[BUG]  [BUGGY]  }  else  if(p  >  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  >  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  >  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    >=    PEEKED_SINGLE_QUOTED    &&    p!=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	43	None	replace
117	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	35	None	replace
118	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED?  '''  :' "')  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED?  '''  :' "')  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED?  '''  :' "')  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	35	None	replace
119	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_BUFFERED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	35	None	replace
120	[BUG]  [BUGGY]  }  else  if(pos  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(pos  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(pos  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	35	None	replace
121	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos,  PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(buffer,  pos,  PEEKED_DOUBLE_QUOTED);	  peekedString    =    nextQuotedValue(pos,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  	39	None	replace
122	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(pos,  PEEKED_SINGLE_QUOTED);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(pos,  PEEKED_SINGLE_QUOTED);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(pos,  PEEKED_SINGLE_QUOTED);	  peekedString    =    nextQuotedValue(pos,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  	39	None	replace
123	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  nextQuotedValue(pos,  PEEKED_DOUBLE_QUOTED);  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  nextQuotedValue(pos,  PEEKED_DOUBLE_QUOTED);  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  nextQuotedValue(pos,  PEEKED_DOUBLE_QUOTED);  }	  peekedString    =    nextQuotedValue(pos,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  	39	None	replace
124	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  nextQuotedValue(pos,  PEEKED_DOUBLE_QUOTED);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  nextQuotedValue(pos,  PEEKED_DOUBLE_QUOTED);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  nextQuotedValue(pos,  PEEKED_DOUBLE_QUOTED);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  peekedString    =    nextQuotedValue(pos,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  	39	None	replace
125	[BUG]  [BUGGY]  }  else  if(p!=  PEEKED_SINGLE_QUOTED  &&  p  >=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p!=  PEEKED_SINGLE_QUOTED  &&  p  >=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p!=  PEEKED_SINGLE_QUOTED  &&  p  >=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p!=    PEEKED_SINGLE_QUOTED    &&    p!=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	34	None	replace
126	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos,  PEEKED_SINGLE_QUOTED);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos,  PEEKED_SINGLE_QUOTED);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(buffer,  pos,  PEEKED_SINGLE_QUOTED);	  peekedString    =    nextQuotedValue(pos,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  	39	None	replace
127	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(p,  PEEKED_SINGLE_QUOTED?  '''  :' "');  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(p,  PEEKED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(p,  PEEKED_SINGLE_QUOTED?  '''  :' "');	  peekedString    =    nextQuotedValue(pos,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  	39	None	replace
128	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(peeked,  PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(peeked,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(peeked,  PEEKED_DOUBLE_QUOTED);	  peekedString    =    nextQuotedValue(pos,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  	39	None	replace
129	[BUG]  [BUGGY]  }  else  if(p!=  NUMBER_CHAR_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p!=  NUMBER_CHAR_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p!=  NUMBER_CHAR_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    <    =    NUMBER_CHAR_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	27	None	replace
130	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_DOUBLE_QUOTED    ||    p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	26	None	replace
131	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_NUMBER_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_NUMBER_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_NUMBER_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_DOUBLE_QUOTED    ||    p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	26	None	replace
132	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_PREFIX  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_DOUBLE_QUOTED    ||    p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	26	None	replace
133	[BUG]  [BUGGY]  }  else  if(p  <  =  NUMBER_CHAR_QUOTED  ||  p  >  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  <  =  NUMBER_CHAR_QUOTED  ||  p  >  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  <  =  NUMBER_CHAR_QUOTED  ||  p  >  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    <    =    PEEKED_SINGLE_QUOTED    ||    p    >    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	5	None	replace
134	[BUG]  [BUGGY]  }  else  if(p  <  =  PEEKED_SINGLE_QUOTED  ||  p  >  1)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  <  =  PEEKED_SINGLE_QUOTED  ||  p  >  1)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  <  =  PEEKED_SINGLE_QUOTED  ||  p  >  1)  {	  }    else    if(p    <    =    PEEKED_SINGLE_QUOTED    ||    p    >    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	5	None	replace
135	[BUG]  [BUGGY]  piedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  piedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	piedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	16	None	replace
136	[BUG]  [BUGGY]  if(p  ==  1)  {  peekedString  =  new  String(buffer,  pos,  1);  pos  +=  1;  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  1)  {  peekedString  =  new  String(buffer,  pos,  1);  pos  +=  1;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  1)  {  peekedString  =  new  String(buffer,  pos,  1);  pos  +=  1;  }	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	16	None	replace
137	[BUG]  [BUGGY]  }  else  if(p  <  =  NUMBER_CHAR_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  <  =  NUMBER_CHAR_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  <  =  NUMBER_CHAR_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {	  }    else    if(p    <    =    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  	37	None	replace
138	[BUG]  [BUGGY]  if(p  ==  1)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  1)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  1)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  }	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos    +    1,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	13	None	replace
139	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_SIGN)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_SIGN)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  NUMBER_CHAR_EXP_SIGN)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  }	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos    +    1,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	13	None	replace
140	[BUG]  [BUGGY]  piedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  piedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	piedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos    +    1,    peekedNumberLength);    pos    +=    2;    }    	non-compiled	[CE]  	17	None	replace
141	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  NUMBER_CHAR_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  NUMBER_CHAR_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  }	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos    +    1,    peekedNumberLength);    pos    +=    2;    }    	non-compiled	[CE]  	17	None	replace
142	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_SIGN)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_SIGN)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  NUMBER_CHAR_EXP_SIGN)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  }	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos    +    1,    peekedNumberLength);    pos    +=    2;    }    	non-compiled	[CE]  	17	None	replace
143	[BUG]  [BUGGY]  }  else  if(pos  ==  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(pos  ==  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(pos  ==  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    pos    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	11	None	replace
144	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_BOOLEAN)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  pos  ==  PEEKED_BOOLEAN)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    pos    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	11	None	replace
145	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  peekedNumberLength  +  1);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  peekedNumberLength  +  1);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(buffer,  pos  +  1,  peekedNumberLength  +  1);	  peekedString    =    nextQuotedValue(buffer,    pos    +    1,    peekedNumberLength);    	non-compiled	[CE]  	19	None	replace
146	[BUG]  [BUGGY]  pos  =  stack.toArray(new  String[stack.size()  ]);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  pos  =  stack.toArray(new  String[stack.size()  ]);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	pos  =  stack.toArray(new  String[stack.size()  ]);	  pos    =    stack.size();    	non-compiled	[CE]  	41	None	replace
147	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  pos  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  pos  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  pos  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(pos    <    =    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	36	None	replace
148	[BUG]  [BUGGY]  }  else  if(p!=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p!=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p!=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	35	None	replace
149	[BUG]  [BUGGY]  }  else  if(p  >=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  >=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  >=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	35	None	replace
150	[BUG]  [BUGGY]  }  else  if(pos  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(pos  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(pos  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	35	None	replace
151	[BUG]  [BUGGY]  }  else  if(pos  >=  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(pos  >=  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(pos  >=  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    >=    PEEKED_SINGLE_QUOTED    &&    p!=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	43	None	replace
152	[BUG]  [BUGGY]  }  else  if(p!=  PEEKED_SINGLE_QUOTED  ||  p!=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p!=  PEEKED_SINGLE_QUOTED  ||  p!=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p!=  PEEKED_SINGLE_QUOTED  ||  p!=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p!=    PEEKED_SINGLE_QUOTED    &&    p!=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	34	None	replace
153	[BUG]  [BUGGY]  }  else  if(p  >>  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  >>  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  >>  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p!=    PEEKED_SINGLE_QUOTED    &&    p!=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	34	None	replace
154	[BUG]  [BUGGY]  }  else  if(p  >>  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  >>  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  >>  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p!=    PEEKED_SINGLE_QUOTED    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	9	None	replace
155	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  NUMBER_CHAR_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  NUMBER_CHAR_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;  }	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    new    String(buffer,    pos,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	15	None	replace
156	[BUG]  [BUGGY]  if(p  ==  NUMBER_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  NUMBER_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  NUMBER_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;  }	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    new    String(buffer,    pos,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	15	None	replace
157	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  &&  p  <  =  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  &&  p  <  =  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_DOUBLE_QUOTED  &&  p  <  =  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    <    =    PEEKED_SINGLE_QUOTED    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	7	None	replace
158	[BUG]  [BUGGY]  if(p  ==  NUMBER_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  NUMBER_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  NUMBER_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  }	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    new    String(buffer,    pos    +    1,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	14	None	replace
159	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  NUMBER_CHAR_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  NUMBER_CHAR_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  }	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    new    String(buffer,    pos    +    1,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	14	None	replace
160	[BUG]  [BUGGY]  }  else  if(p!=  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p!=  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_BEGIN_ARRAY)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p!=  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_BEGIN_ARRAY)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p!=    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  	25	None	replace
161	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(peekedString  +  1);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(peekedString  +  1);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(peekedString  +  1);	  peekedString    =    nextQuotedValue(pos    +    1);    	non-compiled	[CE]  	29	None	replace
162	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(p  +  ''');  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(p  +  ''');  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(p  +  ''');	  peekedString    =    nextQuotedValue(p);    	non-compiled	[CE]  	33	None	replace
163	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(p  -  1);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(p  -  1);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(p  -  1);	  peekedString    =    nextQuotedValue(p);    	non-compiled	[CE]  	33	None	replace
164	[BUG]  [BUGGY]  if(p  ==  1)  {  peekedString  =  nextQuotedValue(buffer,  pos);  pos  +=  1;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  1)  {  peekedString  =  nextQuotedValue(buffer,  pos);  pos  +=  1;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  1)  {  peekedString  =  nextQuotedValue(buffer,  pos);  pos  +=  1;  }	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    nextQuotedValue(buffer,    pos);    pos    +=    1;    }    	non-compiled	[CE]  	40	None	replace
165	[BUG]  [BUGGY]  }  else  if(p  >>  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  >>  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  >>  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {	  }    else    if(p!=    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  	23	None	replace
166	[BUG]  [BUGGY]  }  else  if(pos  >  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(pos  >  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(pos  >  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(pos    ==    PEEKED_SINGLE_QUOTED    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	10	None	replace
167	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  4);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  4);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(buffer,  pos  +  4);	  peekedString    =    nextQuotedValue(buffer,    pos);    	non-compiled	[CE]  	28	None	replace
168	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  10);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  10);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(buffer,  pos  +  10);	  peekedString    =    nextQuotedValue(buffer,    pos);    	non-compiled	[CE]  	28	None	replace
169	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  peekedNumberLen);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  peekedNumberLen);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(buffer,  pos  +  1,  peekedNumberLen);	  peekedString    =    nextQuotedValue(buffer,    pos    +    1);    	non-compiled	[CE]  	32	None	replace
170	[BUG]  [BUGGY]  peekedString  =  new  String(buffer,  pos,  0);  pos  +=  0;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  new  String(buffer,  pos,  0);  pos  +=  0;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  new  String(buffer,  pos,  0);  pos  +=  0;	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos,    0);    pos    +=    0;    }    	non-compiled	[CE]  	38	None	replace
171	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0,  pathNames.length);  pos  +=  0;  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0,  pathNames.length);  pos  +=  0;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0,  pathNames.length);  pos  +=  0;  }	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos,    0);    pos    +=    0;    }    	non-compiled	[CE]  	38	None	replace
172	[BUG]  [BUGGY]  piedString  =  new  String(buffer,  pos,  0);  pos  +=  0;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  piedString  =  new  String(buffer,  pos,  0);  pos  +=  0;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	piedString  =  new  String(buffer,  pos,  0);  pos  +=  0;	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos,    0);    pos    +=    0;    }    	non-compiled	[CE]  	38	None	replace
173	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_BUFFERED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  }	  peekedString    =    nextQuotedValue(buffer,    pos);    	non-compiled	[CE]  	28	None	replace
174	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_BUFFERED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  peekedString    =    nextQuotedValue(buffer,    pos);    	non-compiled	[CE]  	28	None	replace
175	[BUG]  [BUGGY]  }  else  if(pos!=  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(pos!=  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(pos!=  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p!=    PEEKED_SINGLE_QUOTED    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	9	None	replace
176	[BUG]  [BUGGY]  }  else  if(p!=  PEEKED_SINGLE_QUOTED  &&  pos  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p!=  PEEKED_SINGLE_QUOTED  &&  pos  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p!=  PEEKED_SINGLE_QUOTED  &&  pos  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p!=    PEEKED_SINGLE_QUOTED    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	9	None	replace
177	[BUG]  [BUGGY]  }  else  if(pos  >=  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(pos  >=  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(pos  >=  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(pos!=    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	42	None	replace
178	[BUG]  [BUGGY]  }  else  if(p  <  =  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_VALUE)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  <  =  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_VALUE)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  <  =  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_VALUE)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BEGIN_VALUE)    {    	non-compiled	[CE]  	24	None	replace
179	[BUG]  [BUGGY]  }  else  if(p  <  =  PEEKED_SINGLE_QUOTED  &&  p  >  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  <  =  PEEKED_SINGLE_QUOTED  &&  p  >  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  <  =  PEEKED_SINGLE_QUOTED  &&  p  >  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    <    =    PEEKED_SINGLE_QUOTED    ||    p    >    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	5	None	replace
180	[BUG]  [BUGGY]  }  else  if(p  <  PEEKED_SINGLE_QUOTED  &&  p  >  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  <  PEEKED_SINGLE_QUOTED  &&  p  >  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  <  PEEKED_SINGLE_QUOTED  &&  p  >  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    <    =    PEEKED_SINGLE_QUOTED    ||    p    >    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	5	None	replace
181	[BUG]  [BUGGY]  }  else  if(pos!=  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(pos!=  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(pos!=  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p!=    PEEKED_SINGLE_QUOTED    &&    p!=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	34	None	replace
182	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  peekedNumberLength);  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  peekedNumberLength);  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  peekedNumberLength);  }	  peekedString    =    nextQuotedValue(buffer,    pos    +    1,    peekedNumberLength);    	non-compiled	[CE]  	19	None	replace
183	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  peekedNumberLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  peekedNumberLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  peekedNumberLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  peekedString    =    nextQuotedValue(buffer,    pos    +    1,    peekedNumberLength);    	non-compiled	[CE]  	19	None	replace
184	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  pathIndices);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(buffer,  pos  +  1,  pathIndices);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(buffer,  pos  +  1,  pathIndices);	  peekedString    =    nextQuotedValue(buffer,    pos    +    1,    peekedNumberLength);    	non-compiled	[CE]  	19	None	replace
185	[BUG]  [BUGGY]  if(p  >=  PEEKED_SINGLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  pos  +=  1;  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  >=  PEEKED_SINGLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  pos  +=  1;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  >=  PEEKED_SINGLE_QUOTED)  {  peekedString  =  nextQuotedValue(buffer,  pos);  pos  +=  1;  }	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    nextQuotedValue(buffer,    pos);    pos    +=    1;    }    	non-compiled	[CE]  	40	None	replace
186	[BUG]  [BUGGY]  pos  =  nextQuotedValue(buffer,  pos);  pos  +=  1;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  pos  =  nextQuotedValue(buffer,  pos);  pos  +=  1;  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	pos  =  nextQuotedValue(buffer,  pos);  pos  +=  1;	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    nextQuotedValue(buffer,    pos);    pos    +=    1;    }    	non-compiled	[CE]  	40	None	replace
187	[BUG]  [BUGGY]  if(p  ==  PEEKED_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  1;  }	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    new    String(buffer,    pos    +    1,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	14	None	replace
188	[BUG]  [BUGGY]  pendString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :' "');  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  pendString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	pendString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :' "');	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    new    String(buffer,    pos    +    1,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	14	None	replace
189	[BUG]  [BUGGY]  }  else  if(pos  <  =  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(pos  <  =  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(pos  <  =  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {	  }    else    if(p    <    =    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  	37	None	replace
190	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_SIGN)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_SIGN)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  NUMBER_CHAR_EXP_SIGN)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  1;  }	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	16	None	replace
191	[BUG]  [BUGGY]  if(p  ==  PEEKED_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0);  pos  +=  1;  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0);  pos  +=  1;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0);  pos  +=  1;  }	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	16	None	replace
192	[BUG]  [BUGGY]  pokeedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  size();  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  pokeedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  size();  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	pokeedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  size();	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    new    String(buffer,    pos,    peekedNumberLength);    pos    +=    size();    }    	non-compiled	[CE]  	18	None	replace
193	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  NUMBER_CHAR_QUOTED)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  NUMBER_CHAR_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  NUMBER_CHAR_QUOTED)  {	  }    else    if(p    <    =    NUMBER_CHAR_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	27	None	replace
194	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  <  =  NUMBER_CHAR_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  <  =  NUMBER_CHAR_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  <  =  NUMBER_CHAR_QUOTED)  {	  }    else    if(p    <    =    NUMBER_CHAR_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	27	None	replace
195	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  >=  NUMBER_CHAR_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  >=  NUMBER_CHAR_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  >=  NUMBER_CHAR_QUOTED)  {	  }    else    if(p    <    =    NUMBER_CHAR_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	27	None	replace
196	[BUG]  [BUGGY]  }  else  if(p  >  PEEKED_SINGLE_QUOTED  &&  p  >=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  >  PEEKED_SINGLE_QUOTED  &&  p  >=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  >  PEEKED_SINGLE_QUOTED  &&  p  >=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    &&    p    >=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	2	None	replace
197	[BUG]  [BUGGY]  }  else  if(p  >=  PEEKED_SINGLE_QUOTED  &&  pos  >=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  >=  PEEKED_SINGLE_QUOTED  &&  pos  >=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  >=  PEEKED_SINGLE_QUOTED  &&  pos  >=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    &&    p    >=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	2	None	replace
198	[BUG]  [BUGGY]  }  else  if(pos  <  =  4  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(pos  <  =  4  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(pos  <  =  4  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(pos    <    =    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	36	None	replace
199	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  peekedString    =    nextQuotedValue(pos);    	non-compiled	[CE]  	31	None	replace
200	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :' "');  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :' "');	  if(p    ==    PEEKED_DOUBLE_QUOTED)    {    peekedString    =    new    String(buffer,    pos,    peekedNumberLength);    pos    +=    1;    }    	non-compiled	[CE]  	15	None	replace
201	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0,  pos);  pos  +=  0;  }  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0,  pos);  pos  +=  0;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0,  pos);  pos  +=  0;  }	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos,    0);    pos    +=    0;    }    	non-compiled	[CE]  	38	None	replace
202	[BUG]  [BUGGY]  if(p  ==  PEEKED_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0);  pos  +=  0;  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0);  pos  +=  0;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_QUOTED)  {  peekedString  =  new  String(buffer,  pos,  0);  pos  +=  0;  }	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos,    0);    pos    +=    0;    }    	non-compiled	[CE]  	38	None	replace
203	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_QUOTED  &&  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  ==  PEEKED_QUOTED  &&  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  ==  PEEKED_QUOTED  &&  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_DOUBLE_QUOTED    ||    p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  	26	None	replace
204	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(pos  +  1,  pos);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(pos  +  1,  pos);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(pos  +  1,  pos);	  peekedString    =    nextQuotedValue(pos    +    1);    	non-compiled	[CE]  	29	None	replace
205	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(pos  +  1,  p);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(pos  +  1,  p);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(pos  +  1,  p);	  peekedString    =    nextQuotedValue(pos    +    1);    	non-compiled	[CE]  	29	None	replace
206	[BUG]  [BUGGY]  if(p  ==  PEEKED_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  }  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_QUOTED)  {  peekedString  =  new  String(buffer,  pos  +  1,  peekedNumberLength);  pos  +=  2;  }	  if(p    ==    PEEKED_BUFFERED)    {    peekedString    =    new    String(buffer,    pos    +    1,    peekedNumberLength);    pos    +=    2;    }    	non-compiled	[CE]  	17	None	replace
207	[BUG]  [BUGGY]  }  else  if(p  <  =  1  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  <  =  1  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  <  =  1  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    <    =    PEEKED_SINGLE_QUOTED    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	7	None	replace
208	[BUG]  [BUGGY]  }  else  if(p  <  =  4  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  <  =  4  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  <  =  4  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    <    =    PEEKED_SINGLE_QUOTED    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	7	None	replace
209	[BUG]  [BUGGY]  }  else  if(pos  ==  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(pos  ==  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(pos  ==  PEEKED_SINGLE_QUOTED  &&  p!=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    &&    p!=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	1	None	replace
210	[BUG]  [BUGGY]  }  else  if(p  >=  PEEKED_SINGLE_QUOTED  &&  p  >=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  >=  PEEKED_SINGLE_QUOTED  &&  p  >=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  >=  PEEKED_SINGLE_QUOTED  &&  p  >=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    >=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	3	None	replace
211	[BUG]  [BUGGY]  }  else  if(p  >  PEEKED_SINGLE_QUOTED  ||  p  >=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  }  else  if(p  >  PEEKED_SINGLE_QUOTED  ||  p  >=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	}  else  if(p  >  PEEKED_SINGLE_QUOTED  ||  p  >=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    >=    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	3	None	replace
212	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(pos,  PEEKED_DOUBLE_QUOTED);  }  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(pos,  PEEKED_DOUBLE_QUOTED);  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(pos,  PEEKED_DOUBLE_QUOTED);  }	  peekedString    =    nextQuotedValue(pos,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  	39	None	replace
213	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(pos,  PEEKED_DOUBLE_QUOTED);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(pos,  PEEKED_DOUBLE_QUOTED);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(pos,  PEEKED_DOUBLE_QUOTED);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  peekedString    =    nextQuotedValue(pos,    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  	39	None	replace
214	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(p  +  1,  pos);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  peekedString  =  nextQuotedValue(p  +  1,  pos);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	peekedString  =  nextQuotedValue(p  +  1,  pos);	  peekedString    =    nextQuotedValue(p);    	non-compiled	[CE]  	33	None	replace
215	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  peekedString  =  nextQuotedValue(p);  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  if(p  ==  PEEKED_BUFFERED)  {  peekedString  =  nextQuotedValue(p);  }  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	if(p  ==  PEEKED_BUFFERED)  {  peekedString  =  nextQuotedValue(p);  }	  peekedString    =    nextQuotedValue(p);    	non-compiled	[CE]  	33	None	replace
216	[BUG]  [BUGGY]  pos  =  stack.get(p);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  pos  =  stack.get(p);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	pos  =  stack.get(p);	  pos    =    stack.size();    	non-compiled	[CE]  	41	None	replace
217	[BUG]  [BUGGY]  pos  =  stack.toArray(new  int[stack.size()  ]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  if  (p  ==  PEEKED_NUMBER)  {  peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;      [BUGGY]  pos  =  stack.toArray(new  int[stack.size()  ]);  [BUGGY]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	1182	1182	3	replace	pos  =  stack.toArray(new  int[stack.size()  ]);	  pos    =    stack.size();    	non-compiled	[CE]  	41	None	replace
