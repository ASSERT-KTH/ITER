bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  peeked  =  MIN_INCOMPLETE_INTEGER;  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  MIN_INCOMPLETE_INTEGER;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  MIN_INCOMPLETE_INTEGER;	  return    peeked    =    PEEKED_LONG;    	non-compiled	[CE]  	11	None	replace
2	[BUG]  [BUGGY]  return  peeked  =  PEEKED_EOF;  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_EOF;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_EOF;	  return    peeked    =    PEEKED_LONG;    	non-compiled	[CE]  	11	None	replace
3	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN;  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_BOOLEAN;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN;	  return    peeked    =    PEEKED_LONG;    	non-compiled	[CE]  	11	None	replace
4	[BUG]  [BUGGY]  return  peeked  =  PEEKED_NULL;  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_NULL;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_NULL;	  return    peeked    =    PEEKED_LONG;    	non-compiled	[CE]  	11	None	replace
5	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BEFORE;  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_BEFORE;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BEFORE;	  return    peeked    =    PEEKED_LONG;    	non-compiled	[CE]  	11	None	replace
6	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED;  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BEFORE_QUOTED;	  return    peeked    =    PEEKED_BEFORE_QUOTED_NAME;    	non-compiled	[CE]  	3	None	replace
7	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_NAME  +  1;  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_NAME  +  1;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BEFORE_QUOTED_NAME  +  1;	  return    peeked    =    PEEKED_BEFORE_QUOTED_NAME;    	non-compiled	[CE]  	3	None	replace
8	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_NAME.toLowerCase();  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_NAME.toLowerCase();  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BEFORE_QUOTED_NAME.toLowerCase();	  return    peeked    =    PEEKED_BEFORE_QUOTED_NAME;    	non-compiled	[CE]  	3	None	replace
9	[BUG]  [BUGGY]  return  peeked  =  NUMBER_CHAR_QUOTED_NAME;  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  NUMBER_CHAR_QUOTED_NAME;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  NUMBER_CHAR_QUOTED_NAME;	  return    peeked    =    PEEKED_BEFORE_QUOTED_NAME;    	non-compiled	[CE]  	3	None	replace
10	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BUFFERED_QUOTED_NAME;  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_BUFFERED_QUOTED_NAME;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BUFFERED_QUOTED_NAME;	  return    peeked    =    PEEKED_DOUBLE_QUOTED_NAME;    	non-compiled	[CE]  	9	None	replace
11	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED_NAME  +  1;  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED_NAME  +  1;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED_NAME  +  1;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED_NAME;    	non-compiled	[CE]  	2	None	replace
12	[BUG]  [BUGGY]  return  peeked  =  NUMBER_CHAR_QUOTED;  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  NUMBER_CHAR_QUOTED;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  NUMBER_CHAR_QUOTED;	  return    peeked    =    PEEKED_FALSE;    	non-compiled	[CE]  	10	None	replace
13	[BUG]  [BUGGY]  return  peeked  =  PEEKED_SINGLE_QUOTED;  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_SINGLE_QUOTED;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_SINGLE_QUOTED;	  return    peeked    =    0;    	non-compiled	[CE]  	4	None	replace
14	[BUG]  [BUGGY]  return  peeked  =  PEEKED_END_OBJECT;  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_END_OBJECT;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_END_OBJECT;	  return    peeked    =    0;    	non-compiled	[CE]  	4	None	replace
15	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BUFFER;  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_BUFFER;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BUFFER;	  return    peeked    =    0;    	non-compiled	[CE]  	4	None	replace
16	[BUG]  [BUGGY]  return  peeked  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  JsonScope.NONEMPTY_LONG;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.NONEMPTY_LONG;	  return    peeked    =    0;    	non-compiled	[CE]  	4	None	replace
17	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED;    	non-compiled	[CE]  	6	None	replace
18	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED;    	non-compiled	[CE]  	6	None	replace
19	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED;    	non-compiled	[CE]  	6	None	replace
20	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED;    	non-compiled	[CE]  	6	None	replace
21	[BUG]  [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED;  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_DOUBLE_QUOTED;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED;    	non-compiled	[CE]  	6	None	replace
22	[BUG]  [BUGGY]  return  peeked  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.NONEMPTY_OBJECT;	  return    peeked    =    PEEKED_BUFFERED;    	non-compiled	[CE]  	1	None	replace
23	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BACKSLASH  +  1;  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_BACKSLASH  +  1;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BACKSLASH  +  1;	  return    peeked    =    PEEKED_BACKSLASH;    	non-compiled	[CE]  	5	None	replace
24	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BACK_OBJECT;  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_BACK_OBJECT;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BACK_OBJECT;	  return    peeked    =    PEEKED_BACKSLASH;    	non-compiled	[CE]  	5	None	replace
25	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  {  throw  syntaxError( "Expected  name ");  }  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  {  throw  syntaxError( "Expected  name ");  }  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  {  throw  syntaxError( "Expected  name ");  }	      	non-compiled	[CE]  	8	None	replace
26	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxError( "Expected  name  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxError( "Expected  name  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxError( "Expected  name	      	non-compiled	[CE]  	8	None	replace
27	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }	      	non-compiled	[CE]  	8	None	replace
28	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name ");  }  [CE]  [FE]                            JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name ");  }  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name ");  }	      	non-compiled	[CE]  	8	None	replace
29	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  }  [CE]  [FE]                              JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  }  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  }	      	non-compiled	[CE]  	8	None	replace
30	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;  }  [CE]  [FE]                                JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;  }  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;  }	      	non-compiled	[CE]  	8	None	replace
31	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  [CE]  [FE]                                  JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }	      	non-compiled	[CE]  	8	None	replace
32	[BUG]  [BUGGY]  return  peeked  =  PEEKED_GLOBAL;  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_GLOBAL;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_GLOBAL;	  return    peeked    =    JsonScope.PEEKED_BUFFERED;    	non-compiled	[CE]  	12	None	replace
33	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BUCKET  +  1;  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_BUCKET  +  1;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BUCKET  +  1;	  return    peeked    =    PEEKED_BUCKET;    	non-compiled	[CE]  	7	None	replace
34	[BUG]  [BUGGY]  return  peeked  =  PEEKED_DOUBLE;  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_DOUBLE;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_DOUBLE;	  return    peeked    =    PEEKED_BUFFERED;    	non-compiled	[CE]  	1	None	replace
35	[BUG]  [BUGGY]  return  peeked  =  PEEKED_ELONG;  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_ELONG;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_ELONG;	  return    peeked    =    PEEKED_BUFFERED;    	non-compiled	[CE]  	1	None	replace
36	[BUG]  [BUGGY]  return  peeked  =  JsonScope.BACKSLASH;  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  JsonScope.BACKSLASH;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.BACKSLASH;	  return    peeked    =    PEEKED_BACKSLASH;    	non-compiled	[CE]  	5	None	replace
37	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED_OBJECT;  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED_OBJECT;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED_OBJECT;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED_NAME;    	non-compiled	[CE]  	2	None	replace
38	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(false);  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  pos  =  nextNonWhitespace(false);  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	pos  =  nextNonWhitespace(false);	      	non-compiled	[CE]  	8	None	replace
39	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(true);  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  pos  =  nextNonWhitespace(true);  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	pos  =  nextNonWhitespace(true);	      	non-compiled	[CE]  	8	None	replace
40	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(false);  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  int  stackSize  =  nextNonWhitespace(false);  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(false);	      	non-compiled	[CE]  	8	None	replace
41	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(false);  [CE]  [FE]                            JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  int  pos  =  nextNonWhitespace(false);  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  pos  =  nextNonWhitespace(false);	      	non-compiled	[CE]  	8	None	replace
42	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(false);  pos--;  [CE]  [FE]                              JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  int  stackSize  =  nextNonWhitespace(false);  pos--;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(false);  pos--;	      	non-compiled	[CE]  	8	None	replace
43	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(true);  [CE]  [FE]                                JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  int  pos  =  nextNonWhitespace(true);  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  pos  =  nextNonWhitespace(true);	      	non-compiled	[CE]  	8	None	replace
44	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(true);  [CE]  [FE]                                  JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  int  stackSize  =  nextNonWhitespace(true);  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(true);	      	non-compiled	[CE]  	8	None	replace
45	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BLOCK;  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_BLOCK;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BLOCK;	  return    peeked    =    PEEKED_LONG;    	non-compiled	[CE]  	11	None	replace
46	[BUG]  [BUGGY]  return  peeked  =  JsonScope.BUCKET;  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  JsonScope.BUCKET;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.BUCKET;	  return    peeked    =    PEEKED_BUCKET;    	non-compiled	[CE]  	7	None	replace
47	[BUG]  [BUGGY]  return  peeked  =  JsonScope.BEFORE_QUOTED_NAME;  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  JsonScope.BEFORE_QUOTED_NAME;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.BEFORE_QUOTED_NAME;	  return    peeked    =    PEEKED_BEFORE_QUOTED_NAME;    	non-compiled	[CE]  	3	None	replace
48	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_OBJECT;  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_OBJECT;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BEFORE_QUOTED_OBJECT;	  return    peeked    =    PEEKED_BEFORE_QUOTED_NAME;    	non-compiled	[CE]  	3	None	replace
49	[BUG]  [BUGGY]  return  peeked  =  JsonScope.PEEKED_LONG;  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  JsonScope.PEEKED_LONG;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.PEEKED_LONG;	  return    peeked    =    JsonScope.PEEKED_BUFFERED;    	non-compiled	[CE]  	12	None	replace
50	[BUG]  [BUGGY]  return  peeked  =  JsonScope.PEEKED_EOF;  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  JsonScope.PEEKED_EOF;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.PEEKED_EOF;	  return    peeked    =    JsonScope.PEEKED_BUFFERED;    	non-compiled	[CE]  	12	None	replace
51	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  +  1;  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  +  1;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  +  1;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED;    	non-compiled	[CE]  	6	None	replace
52	[BUG]  [BUGGY]  return  peeked  =  JsonScope.PEEKED_BUCKET;  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  JsonScope.PEEKED_BUCKET;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.PEEKED_BUCKET;	  return    peeked    =    PEEKED_BUCKET;    	non-compiled	[CE]  	7	None	replace
53	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(true);  pos--;  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  int  stackSize  =  nextNonWhitespace(true);  pos--;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(true);  pos--;	      	non-compiled	[CE]  	8	None	replace
54	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);	      	non-compiled	[CE]  	8	None	replace
55	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(false);  return  peeked;  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  int  stackSize  =  nextNonWhitespace(false);  return  peeked;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(false);  return  peeked;	      	non-compiled	[CE]  	8	None	replace
56	[BUG]  [BUGGY]  return  peeked  =  JsonScope.PEEKED_BOOLEAN_QUOTED_NAME;  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  JsonScope.PEEKED_BOOLEAN_QUOTED_NAME;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.PEEKED_BOOLEAN_QUOTED_NAME;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED_NAME;    	non-compiled	[CE]  	2	None	replace
57	[BUG]  [BUGGY]  return  peeked  =  JsonScope.PEEKED_DOUBLE_QUOTED_NAME;  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  JsonScope.PEEKED_DOUBLE_QUOTED_NAME;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.PEEKED_DOUBLE_QUOTED_NAME;	  return    peeked    =    PEEKED_DOUBLE_QUOTED_NAME;    	non-compiled	[CE]  	9	None	replace
58	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BACKSLASH  -  1;  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  PEEKED_BACKSLASH  -  1;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BACKSLASH  -  1;	  return    peeked    =    PEEKED_BACKSLASH;    	non-compiled	[CE]  	5	None	replace
59	[BUG]  [BUGGY]  return  peeked  =  JsonScope.PEEKED_BOOLEAN_QUOTED;  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(   "Expected  name   ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {    [BUGGY]  return  peeked  =  JsonScope.PEEKED_BOOLEAN_QUOTED;  [BUGGY]    }  else  {  throw  syntaxError(   "Expected  name   ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.PEEKED_BOOLEAN_QUOTED;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED;    	non-compiled	[CE]  	6	None	replace
