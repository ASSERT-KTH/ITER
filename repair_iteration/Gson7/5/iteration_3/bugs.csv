bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  c);  pos--;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  c);  pos--;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(false,  c);  pos--;	  int    stackSize    =    nextNonWhitespace(false);    pos--;    	non-compiled	[CE]  	42	None	replace
2	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  stackSize);  pos--;  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  stackSize);  pos--;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(false,  stackSize);  pos--;	  int    stackSize    =    nextNonWhitespace(false);    pos--;    	non-compiled	[CE]  	42	None	replace
3	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  0);  pos--;  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  0);  pos--;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(false,  0);  pos--;	  int    stackSize    =    nextNonWhitespace(false);    pos--;    	non-compiled	[CE]  	42	None	replace
4	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BUFFERED_NAME;  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BUFFERED_NAME;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BUFFERED_NAME;	  return    peeked    =    JsonScope.BEFORE_QUOTED_NAME;    	non-compiled	[CE]  	47	None	replace
5	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_OBJECT;  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_OBJECT;	  return    peeked    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	22	None	replace
6	[BUG]  [BUGGY]  return  peeked  =  PEEKED_LONG_OBJECT;  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_LONG_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_LONG_OBJECT;	  return    peeked    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	22	None	replace
7	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BUCKET_OBJECT;  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BUCKET_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BUCKET_OBJECT;	  return    peeked    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	22	None	replace
8	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  c);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  c);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(false,  c);	  int    stackSize    =    nextNonWhitespace(false);    	non-compiled	[CE]  	40	None	replace
9	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  0);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  0);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(false,  0);	  int    stackSize    =    nextNonWhitespace(false);    	non-compiled	[CE]  	40	None	replace
10	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  stackSize);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  stackSize);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(false,  stackSize);	  int    stackSize    =    nextNonWhitespace(false);    	non-compiled	[CE]  	40	None	replace
11	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  peekedLong);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  peekedLong);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(false,  peekedLong);	  int    stackSize    =    nextNonWhitespace(false);    	non-compiled	[CE]  	40	None	replace
12	[BUG]  [BUGGY]  int  pos  =  nextWhitespace(true);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  pos  =  nextWhitespace(true);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  pos  =  nextWhitespace(true);	  int    pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	41	None	replace
13	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(false,  peekedLong);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  pos  =  nextNonWhitespace(false,  peekedLong);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  pos  =  nextNonWhitespace(false,  peekedLong);	  int    pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	41	None	replace
14	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(false,  peekedString);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  pos  =  nextNonWhitespace(false,  peekedString);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  pos  =  nextNonWhitespace(false,  peekedString);	  int    pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	41	None	replace
15	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(false,  c);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  pos  =  nextNonWhitespace(false,  c);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  pos  =  nextNonWhitespace(false,  c);	  int    pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	41	None	replace
16	[BUG]  [BUGGY]  return  peeked  =  NUMBER_CHAR_FRACTION_DIGIT;  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  NUMBER_CHAR_FRACTION_DIGIT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  NUMBER_CHAR_FRACTION_DIGIT;	  return    peeked    =    NUMBER_CHAR_QUOTED;    	non-compiled	[CE]  	12	None	replace
17	[BUG]  [BUGGY]  return  peeked  =  PEEKED_FULL;  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_FULL;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_FULL;	  return    peeked    =    NUMBER_CHAR_QUOTED;    	non-compiled	[CE]  	12	None	replace
18	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(true);  return  peeked;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(true);  return  peeked;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(true);  return  peeked;	  int    stackSize    =    nextNonWhitespace(false);    return    peeked;    	non-compiled	[CE]  	55	None	replace
19	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(true);  return  stackSize;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(true);  return  stackSize;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(true);  return  stackSize;	  int    stackSize    =    nextNonWhitespace(false);    return    peeked;    	non-compiled	[CE]  	55	None	replace
20	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(false);  return  stackSize;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(false);  return  stackSize;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(false);  return  stackSize;	  int    stackSize    =    nextNonWhitespace(false);    return    peeked;    	non-compiled	[CE]  	55	None	replace
21	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(true);  return  peekedLong;  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(true);  return  peekedLong;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(true);  return  peekedLong;	  int    stackSize    =    nextNonWhitespace(false);    return    peeked;    	non-compiled	[CE]  	55	None	replace
22	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(true);  return  stack.length;  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(true);  return  stack.length;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(true);  return  stack.length;	  int    stackSize    =    nextNonWhitespace(false);    return    peeked;    	non-compiled	[CE]  	55	None	replace
23	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(false);  return  stack.length;  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(false);  return  stack.length;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(false);  return  stack.length;	  int    stackSize    =    nextNonWhitespace(false);    return    peeked;    	non-compiled	[CE]  	55	None	replace
24	[BUG]  [BUGGY]  int  pos  =  nextWhitespace(false);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  pos  =  nextWhitespace(false);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  pos  =  nextWhitespace(false);	  int    pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	43	None	replace
25	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(true,  false);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  pos  =  nextNonWhitespace(true,  false);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  pos  =  nextNonWhitespace(true,  false);	  int    pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	43	None	replace
26	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(true,  c);  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  pos  =  nextNonWhitespace(true,  c);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  pos  =  nextNonWhitespace(true,  c);	  int    pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	43	None	replace
27	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(true,  stack.length);  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  pos  =  nextNonWhitespace(true,  stack.length);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  pos  =  nextNonWhitespace(true,  stack.length);	  int    pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	43	None	replace
28	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(true,  c);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  pos  =  nextNonWhitespace(true,  c);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	pos  =  nextNonWhitespace(true,  c);	  pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	39	None	replace
29	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(true,  false);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  pos  =  nextNonWhitespace(true,  false);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	pos  =  nextNonWhitespace(true,  false);	  pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	39	None	replace
30	[BUG]  [BUGGY]  pos  =  nextWhitespace(false);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  pos  =  nextWhitespace(false);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	pos  =  nextWhitespace(false);	  pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	39	None	replace
31	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(true,  true);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  pos  =  nextNonWhitespace(true,  true);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	pos  =  nextNonWhitespace(true,  true);	  pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	39	None	replace
32	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BEFFERED;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BEFFERED;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BEFFERED;	  return    peeked    =    PEEKED_BEFORE;    	non-compiled	[CE]  	5	None	replace
33	[BUG]  [BUGGY]  return  peekedStack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peekedStack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peekedStack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;	  return    peeked    =    PEEKED_END_OBJECT;    	non-compiled	[CE]  	14	None	replace
34	[BUG]  [BUGGY]  return  peekedStack[stackSize  -  1];  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peekedStack[stackSize  -  1];  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peekedStack[stackSize  -  1];	  return    peeked    =    PEEKED_END_OBJECT;    	non-compiled	[CE]  	14	None	replace
35	[BUG]  [BUGGY]  return  peekedStack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peekedStack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peekedStack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  return    peeked    =    PEEKED_END_OBJECT;    	non-compiled	[CE]  	14	None	replace
36	[BUG]  [BUGGY]  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	25	None	replace
37	[BUG]  [BUGGY]  Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	25	None	replace
38	[BUG]  [BUGGY]  Stack.length[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  Stack.length[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	Stack.length[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	25	None	replace
39	[BUG]  [BUGGY]  StackElement[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  StackElement[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	StackElement[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	25	None	replace
40	[BUG]  [BUGGY]  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	25	None	replace
41	[BUG]  [BUGGY]  Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	25	None	replace
42	[BUG]  [BUGGY]  Stack.add(stack[stackSize  -  1]);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  Stack.add(stack[stackSize  -  1]);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	Stack.add(stack[stackSize  -  1]);	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	25	None	replace
43	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(true,  stackSize);  pos--;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(true,  stackSize);  pos--;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(true,  stackSize);  pos--;	  int    stackSize    =    nextNonWhitespace(true);    pos--;    	non-compiled	[CE]  	53	None	replace
44	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(true,  c);  pos--;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(true,  c);  pos--;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(true,  c);  pos--;	  int    stackSize    =    nextNonWhitespace(true);    pos--;    	non-compiled	[CE]  	53	None	replace
45	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_NAME  /  1;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_NAME  /  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BEFORE_QUOTED_NAME  /  1;	  return    peeked    =    PEEKED_BEFORE_QUOTED_NAME    +    1;    	non-compiled	[CE]  	7	None	replace
46	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BUFFERED_NAME  +  1;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BUFFERED_NAME  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BUFFERED_NAME  +  1;	  return    peeked    =    PEEKED_BEFORE_QUOTED_NAME    +    1;    	non-compiled	[CE]  	7	None	replace
47	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BUFFERED  +  1;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BUFFERED  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BUFFERED  +  1;	  return    peeked    =    PEEKED_BEFORE_QUOTED_NAME    +    1;    	non-compiled	[CE]  	7	None	replace
48	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_NAME  +  2;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_NAME  +  2;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BEFORE_QUOTED_NAME  +  2;	  return    peeked    =    PEEKED_BEFORE_QUOTED_NAME    +    1;    	non-compiled	[CE]  	7	None	replace
49	[BUG]  [BUGGY]  return  peeked  =  JsonScope.BACKSLASH  |  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.BACKSLASH  |  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.BACKSLASH  |  JsonScope.NONEMPTY_OBJECT;	  return    peeked    =    JsonScope.BACKSLASH;    	non-compiled	[CE]  	36	None	replace
50	[BUG]  [BUGGY]  return  peeked  =  JsonScope.BACKSLASH  +  1;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.BACKSLASH  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.BACKSLASH  +  1;	  return    peeked    =    JsonScope.BACKSLASH;    	non-compiled	[CE]  	36	None	replace
51	[BUG]  [BUGGY]  return  peeked  =  JsonScope.BACKSLASH  |  JsonScope.BACKSLASH;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.BACKSLASH  |  JsonScope.BACKSLASH;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.BACKSLASH  |  JsonScope.BACKSLASH;	  return    peeked    =    JsonScope.BACKSLASH;    	non-compiled	[CE]  	36	None	replace
52	[BUG]  [BUGGY]  return  peeked  =  JsonScope.BACKSLASH  |  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.BACKSLASH  |  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.BACKSLASH  |  JsonScope.NONEMPTY_LONG;	  return    peeked    =    JsonScope.BACKSLASH;    	non-compiled	[CE]  	36	None	replace
53	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG);    	non-compiled	[CE]  	18	None	replace
54	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG);    	non-compiled	[CE]  	18	None	replace
55	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BUFFERED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BUFFERED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BUFFERED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG);    	non-compiled	[CE]  	18	None	replace
56	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG);    	non-compiled	[CE]  	18	None	replace
57	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG);    	non-compiled	[CE]  	18	None	replace
58	[BUG]  [BUGGY]  return  peeked  =  MIN_INCOMPLETE_INTEGER  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  MIN_INCOMPLETE_INTEGER  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  MIN_INCOMPLETE_INTEGER  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG);    	non-compiled	[CE]  	18	None	replace
59	[BUG]  [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_DOUBLE_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG);    	non-compiled	[CE]  	18	None	replace
60	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_OBJECT  +  1;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_OBJECT  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BEFORE_QUOTED_OBJECT  +  1;	  return    peeked    =    PEEKED_BEFORE_QUOTED_OBJECT;    	non-compiled	[CE]  	48	None	replace
61	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BEFORE_QUOTED_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);	  return    peeked    =    PEEKED_BEFORE_QUOTED_OBJECT;    	non-compiled	[CE]  	48	None	replace
62	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BEFORE_QUOTED_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;	  return    peeked    =    PEEKED_BEFORE_QUOTED_OBJECT;    	non-compiled	[CE]  	48	None	replace
63	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BACKSLASH  /  1;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BACKSLASH  /  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BACKSLASH  /  1;	  return    peeked    =    PEEKED_BACKSLASH    +    1;    	non-compiled	[CE]  	23	None	replace
64	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BACKSLASH  +  2;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BACKSLASH  +  2;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BACKSLASH  +  2;	  return    peeked    =    PEEKED_BACKSLASH    +    1;    	non-compiled	[CE]  	23	None	replace
65	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BACKSLASH  +  4;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BACKSLASH  +  4;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BACKSLASH  +  4;	  return    peeked    =    PEEKED_BACKSLASH    +    1;    	non-compiled	[CE]  	23	None	replace
66	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BACKSLASH  +  3;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BACKSLASH  +  3;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BACKSLASH  +  3;	  return    peeked    =    PEEKED_BACKSLASH    +    1;    	non-compiled	[CE]  	23	None	replace
67	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BUFFERED.toLowerCase();  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BUFFERED.toLowerCase();  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BUFFERED.toLowerCase();	  return    peeked    =    PEEKED_BEFORE_QUOTED_NAME.toLowerCase();    	non-compiled	[CE]  	8	None	replace
68	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_NAME.toLowerCase(Locale.ENGLISH);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_NAME.toLowerCase(Locale.ENGLISH);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BEFORE_QUOTED_NAME.toLowerCase(Locale.ENGLISH);	  return    peeked    =    PEEKED_BEFORE_QUOTED_NAME.toLowerCase();    	non-compiled	[CE]  	8	None	replace
69	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED_NAME.toLowerCase();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED_NAME.toLowerCase();  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED_NAME.toLowerCase();	  return    peeked    =    PEEKED_BEFORE_QUOTED_NAME.toLowerCase();    	non-compiled	[CE]  	8	None	replace
70	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_NAME.toUpperCase();  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_NAME.toUpperCase();  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BEFORE_QUOTED_NAME.toUpperCase();	  return    peeked    =    PEEKED_BEFORE_QUOTED_NAME.toLowerCase();    	non-compiled	[CE]  	8	None	replace
71	[BUG]  [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED_NAME.toLowerCase();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED_NAME.toLowerCase();  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_DOUBLE_QUOTED_NAME.toLowerCase();	  return    peeked    =    PEEKED_BEFORE_QUOTED_NAME.toLowerCase();    	non-compiled	[CE]  	8	None	replace
72	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_NAME.toLowerCase(Locale.getDefault());  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_NAME.toLowerCase(Locale.getDefault());  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BEFORE_QUOTED_NAME.toLowerCase(Locale.getDefault());	  return    peeked    =    PEEKED_BEFORE_QUOTED_NAME.toLowerCase();    	non-compiled	[CE]  	8	None	replace
73	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  +  4;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  +  4;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  +  4;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    +    1;    	non-compiled	[CE]  	51	None	replace
74	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  /  1;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  /  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  /  1;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    +    1;    	non-compiled	[CE]  	51	None	replace
75	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED.length  +  1;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED.length  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED.length  +  1;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    +    1;    	non-compiled	[CE]  	51	None	replace
76	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  +  2;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  +  2;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  +  2;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    +    1;    	non-compiled	[CE]  	51	None	replace
77	[BUG]  [BUGGY]  pos  =  nextWhitespace(true);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  pos  =  nextWhitespace(true);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	pos  =  nextWhitespace(true);	  pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	38	None	replace
78	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(false,  peekedLong);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  pos  =  nextNonWhitespace(false,  peekedLong);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	pos  =  nextNonWhitespace(false,  peekedLong);	  pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	38	None	replace
79	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(false,  peekedString);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  pos  =  nextNonWhitespace(false,  peekedString);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	pos  =  nextNonWhitespace(false,  peekedString);	  pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	38	None	replace
80	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(0);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  pos  =  nextNonWhitespace(0);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	pos  =  nextNonWhitespace(0);	  pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	38	None	replace
81	[BUG]  [BUGGY]  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    break;    }    	non-compiled	[CE]  	30	None	replace
82	[BUG]  [BUGGY]  Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    break;    }    	non-compiled	[CE]  	30	None	replace
83	[BUG]  [BUGGY]  rack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  rack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	rack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    break;    }    	non-compiled	[CE]  	30	None	replace
84	[BUG]  [BUGGY]  Stack.length[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  Stack.length[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	Stack.length[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    break;    }    	non-compiled	[CE]  	30	None	replace
85	[BUG]  [BUGGY]  StaticBuffer  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;  [CE]  [FE]                                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  StaticBuffer  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	StaticBuffer  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    break;    }    	non-compiled	[CE]  	30	None	replace
86	[BUG]  [BUGGY]  Stack.add(stack[stackSize  -  1]);  break;  [CE]  [FE]                                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  Stack.add(stack[stackSize  -  1]);  break;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	Stack.add(stack[stackSize  -  1]);  break;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    break;    }    	non-compiled	[CE]  	30	None	replace
87	[BUG]  [BUGGY]  int  stackSize  =  stack[stackSize  -  1];  break;  [CE]  [FE]                                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  stack[stackSize  -  1];  break;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  stack[stackSize  -  1];  break;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    break;    }    	non-compiled	[CE]  	30	None	replace
88	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxError( "Expected  name  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxError( "Expected  name  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxError( "Expected  name	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    else    if(isLiteral((    char)c))    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	26	None	replace
89	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxError( "Expected  name  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxError( "Expected  name  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxError( "Expected  name	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    else    if(isLiteral((    char)c))    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	26	None	replace
90	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxError( "Expected  name  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxError( "Expected  name  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxError( "Expected  name	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    else    if(isLiteral((    char)c))    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	26	None	replace
91	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxErr  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxErr  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxErr	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    else    if(isLiteral((    char)c))    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	26	None	replace
92	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxErr  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxErr  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxErr	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    else    if(isLiteral((    char)c))    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	26	None	replace
93	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT);    	non-compiled	[CE]  	19	None	replace
94	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT);    	non-compiled	[CE]  	19	None	replace
95	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BUFFERED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BUFFERED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BUFFERED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT);    	non-compiled	[CE]  	19	None	replace
96	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT);    	non-compiled	[CE]  	19	None	replace
97	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT);    	non-compiled	[CE]  	19	None	replace
98	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED(stack[stackSize  -  1])  ==  JsonScope.NONEMPTY_OBJECT);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED(stack[stackSize  -  1])  ==  JsonScope.NONEMPTY_OBJECT);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED(stack[stackSize  -  1])  ==  JsonScope.NONEMPTY_OBJECT);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT);    	non-compiled	[CE]  	19	None	replace
99	[BUG]  [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_DOUBLE_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT);    	non-compiled	[CE]  	19	None	replace
100	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN  +  1;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN  +  1;	  return    peeked    =    PEEKED_BOOLEAN;    	non-compiled	[CE]  	3	None	replace
101	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(true,  c);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(true,  c);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(true,  c);	  int    stackSize    =    nextNonWhitespace(true);    	non-compiled	[CE]  	44	None	replace
102	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(true,  stackSize);  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(true,  stackSize);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(true,  stackSize);	  int    stackSize    =    nextNonWhitespace(true);    	non-compiled	[CE]  	44	None	replace
103	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(true,  0);  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(true,  0);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(true,  0);	  int    stackSize    =    nextNonWhitespace(true);    	non-compiled	[CE]  	44	None	replace
104	[BUG]  [BUGGY]  return  peeked  =  JsonScope.PEEKED_BUFFER;  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.PEEKED_BUFFER;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.PEEKED_BUFFER;	  return    peeked    =    JsonScope.PEEKED_EOF;    	non-compiled	[CE]  	50	None	replace
105	[BUG]  [BUGGY]  return  peeked  =  MIN_INCOMPLETE_INTEGER  +  1;  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  MIN_INCOMPLETE_INTEGER  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  MIN_INCOMPLETE_INTEGER  +  1;	  return    peeked    =    MIN_INCOMPLETE_INTEGER;    	non-compiled	[CE]  	1	None	replace
106	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  -  1]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  -  1]);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  -  1]);	  int[]    pathIndices    =    stack.toArray(new    String[pathNames.size()    ]);    	non-compiled	[CE]  	54	None	replace
107	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  +  1]);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  +  1]);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  +  1]);	  int[]    pathIndices    =    stack.toArray(new    String[pathNames.size()    ]);    	non-compiled	[CE]  	54	None	replace
108	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ],  peekedString);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ],  peekedString);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ],  peekedString);	  int[]    pathIndices    =    stack.toArray(new    String[pathNames.size()    ]);    	non-compiled	[CE]  	54	None	replace
109	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  -  2]);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  -  2]);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  -  2]);	  int[]    pathIndices    =    stack.toArray(new    String[pathNames.size()    ]);    	non-compiled	[CE]  	54	None	replace
110	[BUG]  [BUGGY]  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    pos--;    }    	non-compiled	[CE]  	27	None	replace
111	[BUG]  [BUGGY]  Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    pos--;    }    	non-compiled	[CE]  	27	None	replace
112	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_STRING)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(c  ==  JsonScope.NONEMPTY_STRING)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    pos--;    }    	non-compiled	[CE]  	27	None	replace
113	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(c  ==  JsonScope.NONEMPTY_OBJECT)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    pos--;    }    	non-compiled	[CE]  	27	None	replace
114	[BUG]  [BUGGY]  int  stackSize  =  stack[stackSize  -  1];  pos--;  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  stack[stackSize  -  1];  pos--;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  stack[stackSize  -  1];  pos--;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    pos--;    }    	non-compiled	[CE]  	27	None	replace
115	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    pos--;    }    	non-compiled	[CE]  	27	None	replace
116	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BUCKET  +  2;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BUCKET  +  2;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BUCKET  +  2;	  return    peeked    =    PEEKED_BUCKET    +    1;    	non-compiled	[CE]  	33	None	replace
117	[BUG]  [BUGGY]  return  peeked  =  PEEKED_EOF  +  1;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_EOF  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_EOF  +  1;	  return    peeked    =    PEEKED_BUCKET    +    1;    	non-compiled	[CE]  	33	None	replace
118	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOTH  +  1;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOTH  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOTH  +  1;	  return    peeked    =    PEEKED_BUCKET    +    1;    	non-compiled	[CE]  	33	None	replace
119	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BUFFERED  -  1;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BUFFERED  -  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BUFFERED  -  1;	  return    peeked    =    PEEKED_BACKSLASH    -    1;    	non-compiled	[CE]  	58	None	replace
120	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BACKSLASH  -  2;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BACKSLASH  -  2;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BACKSLASH  -  2;	  return    peeked    =    PEEKED_BACKSLASH    -    1;    	non-compiled	[CE]  	58	None	replace
121	[BUG]  [BUGGY]  return  peeked  =  stackSize  -  1;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  stackSize  -  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  stackSize  -  1;	  return    peeked    =    PEEKED_BACKSLASH    -    1;    	non-compiled	[CE]  	58	None	replace
122	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BACK_OBJECT  +  1;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BACK_OBJECT  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BACK_OBJECT  +  1;	  return    peeked    =    PEEKED_BACK_OBJECT;    	non-compiled	[CE]  	24	None	replace
123	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BACK_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BACK_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BACK_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);	  return    peeked    =    PEEKED_BACK_OBJECT;    	non-compiled	[CE]  	24	None	replace
124	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BACK_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BACK_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BACK_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;	  return    peeked    =    PEEKED_BACK_OBJECT;    	non-compiled	[CE]  	24	None	replace
125	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BACK_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_QUOTED);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BACK_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_QUOTED);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BACK_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_QUOTED);	  return    peeked    =    PEEKED_BACK_OBJECT;    	non-compiled	[CE]  	24	None	replace
126	[BUG]  [BUGGY]  return  peeked  =  JsonScope.BUCKET  ||  peeked  =  JsonScope.BUCKET;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.BUCKET  ||  peeked  =  JsonScope.BUCKET;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.BUCKET  ||  peeked  =  JsonScope.BUCKET;	  return    peeked    =    JsonScope.BUCKET;    	non-compiled	[CE]  	46	None	replace
127	[BUG]  [BUGGY]  return  peeked  =  JsonScope.BUCKET  |  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.BUCKET  |  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.BUCKET  |  JsonScope.NONEMPTY_LONG;	  return    peeked    =    JsonScope.BUCKET;    	non-compiled	[CE]  	46	None	replace
128	[BUG]  [BUGGY]  return  peeked  =  JsonScope.BUCKET_OBJECT;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.BUCKET_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.BUCKET_OBJECT;	  return    peeked    =    JsonScope.BUCKET;    	non-compiled	[CE]  	46	None	replace
129	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	28	None	replace
130	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	28	None	replace
131	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_STRING)  {  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	28	None	replace
132	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	28	None	replace
133	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_BLOCK)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_BLOCK)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_BLOCK)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	28	None	replace
134	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED_NAME  /  1;  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED_NAME  /  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED_NAME  /  1;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED_NAME    +    1;    	non-compiled	[CE]  	11	None	replace
135	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BUFFERED_QUOTED_NAME  +  1;  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BUFFERED_QUOTED_NAME  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BUFFERED_QUOTED_NAME  +  1;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED_NAME    +    1;    	non-compiled	[CE]  	11	None	replace
136	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED_NAME  -  1;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED_NAME  -  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED_NAME  -  1;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED_NAME    +    1;    	non-compiled	[CE]  	11	None	replace
137	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED_NAME  +  2;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED_NAME  +  2;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED_NAME  +  2;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED_NAME    +    1;    	non-compiled	[CE]  	11	None	replace
138	[BUG]  [BUGGY]  return  peeked  =  JsonScope.PEEKED_BOOLEAN_QUOTED  +  1;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.PEEKED_BOOLEAN_QUOTED  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.PEEKED_BOOLEAN_QUOTED  +  1;	  return    peeked    =    JsonScope.PEEKED_BOOLEAN_QUOTED;    	non-compiled	[CE]  	59	None	replace
139	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	20	None	replace
140	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	20	None	replace
141	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BUFFERED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BUFFERED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BUFFERED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	20	None	replace
142	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	20	None	replace
143	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	20	None	replace
144	[BUG]  [BUGGY]  return  peeked  =  MIN_INCOMPLETE_INTEGER  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  MIN_INCOMPLETE_INTEGER  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  MIN_INCOMPLETE_INTEGER  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	20	None	replace
145	[BUG]  [BUGGY]  return  peeked  =  NUMBER_CHAR_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  NUMBER_CHAR_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  NUMBER_CHAR_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	20	None	replace
146	[BUG]  [BUGGY]  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    return    peeked;    }    	non-compiled	[CE]  	29	None	replace
147	[BUG]  [BUGGY]  Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    return    peeked;    }    	non-compiled	[CE]  	29	None	replace
148	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  }  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    return    peeked;    }    	non-compiled	[CE]  	29	None	replace
149	[BUG]  [BUGGY]  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  PEEKED_END_OBJECT;  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  PEEKED_END_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  PEEKED_END_OBJECT;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    return    peeked;    }    	non-compiled	[CE]  	29	None	replace
150	[BUG]  [BUGGY]  while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  }  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    return    peeked;    }    	non-compiled	[CE]  	29	None	replace
151	[BUG]  [BUGGY]  while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  [CE]  [FE]                                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	while(peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    return    peeked;    }    	non-compiled	[CE]  	29	None	replace
152	[BUG]  [BUGGY]  while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  }  [CE]  [FE]                                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	while(peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    return    peeked;    }    	non-compiled	[CE]  	29	None	replace
153	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	17	None	replace
154	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	17	None	replace
155	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BUFFERED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BUFFERED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BUFFERED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	17	None	replace
156	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	17	None	replace
157	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  peekStack[stackSize  -  1]!=  JsonScope.NONEMPTY_OBJECT;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	17	None	replace
158	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BEFORE_QUOTED  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	17	None	replace
159	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED_OBJECT  +  1;  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED_OBJECT  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED_OBJECT  +  1;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED_OBJECT;    	non-compiled	[CE]  	37	None	replace
160	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED_OBJECT;    	non-compiled	[CE]  	37	None	replace
161	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED_OBJECT  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED_OBJECT;    	non-compiled	[CE]  	37	None	replace
162	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BUFFERED_OBJECT;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BUFFERED_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BUFFERED_OBJECT;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED_OBJECT;    	non-compiled	[CE]  	37	None	replace
163	[BUG]  [BUGGY]  int  stackSize  =  stack[stackSize  -  1];  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  stack[stackSize  -  1];  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  stack[stackSize  -  1];	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    	non-compiled	[CE]  	31	None	replace
164	[BUG]  [BUGGY]  StackEscaped(stack[stackSize  -  1])  {  JsonScope.NONEMPTY_LONG;  }  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  StackEscaped(stack[stackSize  -  1])  {  JsonScope.NONEMPTY_LONG;  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	StackEscaped(stack[stackSize  -  1])  {  JsonScope.NONEMPTY_LONG;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    	non-compiled	[CE]  	31	None	replace
165	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BLOCK  +  1;  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BLOCK  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BLOCK  +  1;	  return    peeked    =    PEEKED_BLOCK;    	non-compiled	[CE]  	45	None	replace
166	[BUG]  [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_DOUBLE_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG);    	non-compiled	[CE]  	18	None	replace
167	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG);    	non-compiled	[CE]  	18	None	replace
168	[BUG]  [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_DOUBLE_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT);    	non-compiled	[CE]  	19	None	replace
169	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT);    	non-compiled	[CE]  	19	None	replace
170	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  ||  stack[peekSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT);    	non-compiled	[CE]  	19	None	replace
171	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  pos--);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  pos--);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(false,  pos--);	  int    stackSize    =    nextNonWhitespace(true);    pos--;    	non-compiled	[CE]  	53	None	replace
172	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(true,  0);  pos--;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(true,  0);  pos--;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(true,  0);  pos--;	  int    stackSize    =    nextNonWhitespace(true);    pos--;    	non-compiled	[CE]  	53	None	replace
173	[BUG]  [BUGGY]  return  peeked  =  NUMBER_CHAR_LONG;  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  NUMBER_CHAR_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  NUMBER_CHAR_LONG;	  return    peeked    =    NUMBER_CHAR_QUOTED;    	non-compiled	[CE]  	12	None	replace
174	[BUG]  [BUGGY]  return  peeked  =  PEEKED_LOAD_QUOTED;  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_LOAD_QUOTED;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_LOAD_QUOTED;	  return    peeked    =    NUMBER_CHAR_QUOTED;    	non-compiled	[CE]  	12	None	replace
175	[BUG]  [BUGGY]  return  peeked  =  JsonScope.PEEKED_FALSE;  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.PEEKED_FALSE;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.PEEKED_FALSE;	  return    peeked    =    JsonScope.PEEKED_EOF;    	non-compiled	[CE]  	50	None	replace
176	[BUG]  [BUGGY]  return  peeked  =  JsonScope.NONEMPTY_LONG  +  1;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.NONEMPTY_LONG  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.NONEMPTY_LONG  +  1;	  return    peeked    =    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	16	None	replace
177	[BUG]  [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_DOUBLE_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	20	None	replace
178	[BUG]  [BUGGY]  return  peeked  =  PEEKED_LONG  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_LONG  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_LONG  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	20	None	replace
179	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_NAME.substring(0,  pos);  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_NAME.substring(0,  pos);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BEFORE_QUOTED_NAME.substring(0,  pos);	  return    peeked    =    PEEKED_BEFORE_QUOTED_NAME.toLowerCase();    	non-compiled	[CE]  	8	None	replace
180	[BUG]  [BUGGY]  return  peeked  =  JsonScope.PEEKED_BOOLEAN_QUOTED_NAME  +  1;  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.PEEKED_BOOLEAN_QUOTED_NAME  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.PEEKED_BOOLEAN_QUOTED_NAME  +  1;	  return    peeked    =    JsonScope.PEEKED_BOOLEAN_QUOTED_NAME;    	non-compiled	[CE]  	56	None	replace
181	[BUG]  [BUGGY]  return  peeked  =  JsonScope.PEEKED_BOOLEAN_QUOTED_OBJECT;  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.PEEKED_BOOLEAN_QUOTED_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.PEEKED_BOOLEAN_QUOTED_OBJECT;	  return    peeked    =    JsonScope.PEEKED_BOOLEAN_QUOTED_NAME;    	non-compiled	[CE]  	56	None	replace
182	[BUG]  [BUGGY]  return  peeked  =  JsonScope.PEEKED_BOOLEAN;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.PEEKED_BOOLEAN;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.PEEKED_BOOLEAN;	  return    peeked    =    JsonScope.PEEKED_BUCKET;    	non-compiled	[CE]  	52	None	replace
183	[BUG]  [BUGGY]  return  peeked  =  JsonScope.BUCKET  -  1;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.BUCKET  -  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.BUCKET  -  1;	  return    peeked    =    JsonScope.BUCKET;    	non-compiled	[CE]  	46	None	replace
184	[BUG]  [BUGGY]  return  peeked  =  JsonScope.BUCKET  +  1;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.BUCKET  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.BUCKET  +  1;	  return    peeked    =    JsonScope.BUCKET;    	non-compiled	[CE]  	46	None	replace
185	[BUG]  [BUGGY]  return  peeked  =  JsonScope.BUCKET  |  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.BUCKET  |  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.BUCKET  |  JsonScope.NONEMPTY_OBJECT;	  return    peeked    =    JsonScope.BUCKET;    	non-compiled	[CE]  	46	None	replace
186	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  {  throw  syntaxError( "Expected  name  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  {  throw  syntaxError( "Expected  name	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    else    if(isLiteral((    char)c))    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	26	None	replace
187	[BUG]  [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  {  throw  syntaxError( "Expected  name  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(peekStack  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  {  throw  syntaxError( "Expected  name	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    else    if(isLiteral((    char)c))    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	26	None	replace
188	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxError( "Expected  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxError( "Expected  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxError( "Expected	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    else    if(isLiteral((    char)c))    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	26	None	replace
189	[BUG]  [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED_NAME  +  1;  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED_NAME  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_DOUBLE_QUOTED_NAME  +  1;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED_NAME    +    1;    	non-compiled	[CE]  	11	None	replace
190	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED_NAME  +  4;  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED_NAME  +  4;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED_NAME  +  4;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED_NAME    +    1;    	non-compiled	[CE]  	11	None	replace
191	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_NAME  -  1;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BEFORE_QUOTED_NAME  -  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BEFORE_QUOTED_NAME  -  1;	  return    peeked    =    PEEKED_BEFORE_QUOTED_NAME    +    1;    	non-compiled	[CE]  	7	None	replace
192	[BUG]  [BUGGY]  return  peeked  =  PEEKED_FUNCTION;  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_FUNCTION;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_FUNCTION;	  return    peeked    =    MIN_INCOMPLETE_INTEGER;    	non-compiled	[CE]  	1	None	replace
193	[BUG]  [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_DOUBLE_QUOTED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	17	None	replace
194	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED  &&  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	17	None	replace
195	[BUG]  [BUGGY]  return  peeked  =  MIN_INCOMPLETE_INTEGER  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  MIN_INCOMPLETE_INTEGER  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  MIN_INCOMPLETE_INTEGER  ||  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	17	None	replace
196	[BUG]  [BUGGY]  return  peeked  =  JsonScope.PEEKED_DOUBLE_QUOTED;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.PEEKED_DOUBLE_QUOTED;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.PEEKED_DOUBLE_QUOTED;	  return    peeked    =    JsonScope.PEEKED_BOOLEAN_QUOTED;    	non-compiled	[CE]  	59	None	replace
197	[BUG]  [BUGGY]  StaticBucketMap.this.stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  StaticBucketMap.this.stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	StaticBucketMap.this.stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    break;    }    	non-compiled	[CE]  	30	None	replace
198	[BUG]  [BUGGY]  StackTop[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  StackTop[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	StackTop[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    break;    }    	non-compiled	[CE]  	30	None	replace
199	[BUG]  [BUGGY]  return  peeked  =  JsonScope.LONG;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.LONG;	  return    peeked    =    PEEKED_END_OBJECT;    	non-compiled	[CE]  	14	None	replace
200	[BUG]  [BUGGY]  return  peeked  =  JsonScope.BLOCK;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.BLOCK;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.BLOCK;	  return    peeked    =    PEEKED_END_OBJECT;    	non-compiled	[CE]  	14	None	replace
201	[BUG]  [BUGGY]  return  peeked  =  PEEKED_LOAD_QUOTED_NAME;  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_LOAD_QUOTED_NAME;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_LOAD_QUOTED_NAME;	  return    peeked    =    PEEKED_BUFFERED_QUOTED_NAME;    	non-compiled	[CE]  	10	None	replace
202	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  false);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  false);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(false,  false);	  int    stackSize    =    nextNonWhitespace(true);    	non-compiled	[CE]  	44	None	replace
203	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  PEEKED_END_OBJECT;  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  PEEKED_END_OBJECT;  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  PEEKED_END_OBJECT;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    return    peeked;    }    	non-compiled	[CE]  	29	None	replace
204	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    return    peeked;    }    	non-compiled	[CE]  	29	None	replace
205	[BUG]  [BUGGY]  Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  PEEKED_END_OBJECT;  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  PEEKED_END_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	Stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  PEEKED_END_OBJECT;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    return    peeked;    }    	non-compiled	[CE]  	29	None	replace
206	[BUG]  [BUGGY]  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  PEEKED_DOUBLE_QUOTED;  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  PEEKED_DOUBLE_QUOTED;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  PEEKED_DOUBLE_QUOTED;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    return    peeked;    }    	non-compiled	[CE]  	29	None	replace
207	[BUG]  [BUGGY]  StaticBucketMap.this.stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  StaticBucketMap.this.stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	StaticBucketMap.this.stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    	non-compiled	[CE]  	31	None	replace
208	[BUG]  [BUGGY]  StackTop[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  StackTop[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	StackTop[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    	non-compiled	[CE]  	31	None	replace
209	[BUG]  [BUGGY]  int  stackSize  -  1  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  -  1  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  -  1  =  JsonScope.NONEMPTY_LONG;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    	non-compiled	[CE]  	31	None	replace
210	[BUG]  [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED  +  1;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_DOUBLE_QUOTED  +  1;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    +    1;    	non-compiled	[CE]  	51	None	replace
211	[BUG]  [BUGGY]  return  peeked  =  JsonScope.BEFORE_QUOTED_OBJECT;  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.BEFORE_QUOTED_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.BEFORE_QUOTED_OBJECT;	  return    peeked    =    JsonScope.BEFORE_QUOTED_NAME;    	non-compiled	[CE]  	47	None	replace
212	[BUG]  [BUGGY]  return  peeked  =  JsonScope.BEFORE_QUOTED_NAME  +  1;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.BEFORE_QUOTED_NAME  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.BEFORE_QUOTED_NAME  +  1;	  return    peeked    =    JsonScope.BEFORE_QUOTED_NAME;    	non-compiled	[CE]  	47	None	replace
213	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(false,  c);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  pos  =  nextNonWhitespace(false,  c);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	pos  =  nextNonWhitespace(false,  c);	  pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	38	None	replace
214	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(false,  true);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  pos  =  nextNonWhitespace(false,  true);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	pos  =  nextNonWhitespace(false,  true);	  pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	38	None	replace
215	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(false,  peeked);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  pos  =  nextNonWhitespace(false,  peeked);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	pos  =  nextNonWhitespace(false,  peeked);	  pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	38	None	replace
216	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(false,  false);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  pos  =  nextNonWhitespace(false,  false);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	pos  =  nextNonWhitespace(false,  false);	  pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	38	None	replace
217	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(false,  1);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  pos  =  nextNonWhitespace(false,  1);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	pos  =  nextNonWhitespace(false,  1);	  pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	38	None	replace
218	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(true,  stackSize);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  pos  =  nextNonWhitespace(true,  stackSize);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  pos  =  nextNonWhitespace(true,  stackSize);	  int    pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	43	None	replace
219	[BUG]  [BUGGY]  int  pos  =  firstNonWhitespace(false);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  pos  =  firstNonWhitespace(false);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  pos  =  firstNonWhitespace(false);	  int    pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	43	None	replace
220	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(true,  true);  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  pos  =  nextNonWhitespace(true,  true);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  pos  =  nextNonWhitespace(true,  true);	  int    pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	43	None	replace
221	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(true);  return  PEEKED_DOUBLE_QUOTED;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(true);  return  PEEKED_DOUBLE_QUOTED;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(true);  return  PEEKED_DOUBLE_QUOTED;	  int    stackSize    =    nextNonWhitespace(false);    return    peeked;    	non-compiled	[CE]  	55	None	replace
222	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(false);  return  stackSize  -  1;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(false);  return  stackSize  -  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(false);  return  stackSize  -  1;	  int    stackSize    =    nextNonWhitespace(false);    return    peeked;    	non-compiled	[CE]  	55	None	replace
223	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  pathNames);  return  peeked;  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  pathNames);  return  peeked;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(false,  pathNames);  return  peeked;	  int    stackSize    =    nextNonWhitespace(false);    return    peeked;    	non-compiled	[CE]  	55	None	replace
224	[BUG]  [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED_OBJECT;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_DOUBLE_QUOTED_OBJECT;	  return    peeked    =    PEEKED_BEFORE_QUOTED_OBJECT;    	non-compiled	[CE]  	48	None	replace
225	[BUG]  [BUGGY]  return  peeked  =  JsonScope.BACKSLASH  -  1;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.BACKSLASH  -  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.BACKSLASH  -  1;	  return    peeked    =    JsonScope.BACKSLASH;    	non-compiled	[CE]  	36	None	replace
226	[BUG]  [BUGGY]  return  peeked  =  JsonScope.BACKSLASH  |  JsonScope.DANGLING_NAME;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.BACKSLASH  |  JsonScope.DANGLING_NAME;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.BACKSLASH  |  JsonScope.DANGLING_NAME;	  return    peeked    =    JsonScope.BACKSLASH;    	non-compiled	[CE]  	36	None	replace
227	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(true,  1);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  pos  =  nextNonWhitespace(true,  1);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	pos  =  nextNonWhitespace(true,  1);	  pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	39	None	replace
228	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(isLenient((  char)c))  {  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(isLenient((  char)c))  {  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	28	None	replace
229	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(isLenient((  char)c))  {  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(isLenient((  char)c))  {  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	28	None	replace
230	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[pos  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	28	None	replace
231	[BUG]  [BUGGY]  if(isLenient((  char)c))  {  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError(  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(isLenient((  char)c))  {  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError(  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(isLenient((  char)c))  {  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError(	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	28	None	replace
232	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	28	None	replace
233	[BUG]  [BUGGY]  return  peeked  =  JsonScope.PEEKED_BEFORE_QUOTED_NAME;  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.PEEKED_BEFORE_QUOTED_NAME;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.PEEKED_BEFORE_QUOTED_NAME;	  return    peeked    =    JsonScope.PEEKED_DOUBLE_QUOTED_NAME;    	non-compiled	[CE]  	57	None	replace
234	[BUG]  [BUGGY]  return  peeked  =  JsonScope.BOOLEAN_QUOTED_OBJECT;  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.BOOLEAN_QUOTED_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.BOOLEAN_QUOTED_OBJECT;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED_OBJECT;    	non-compiled	[CE]  	37	None	replace
235	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BEFORE_LONG;  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BEFORE_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BEFORE_LONG;	  return    peeked    =    PEEKED_BEFORE_QUOTED;    	non-compiled	[CE]  	6	None	replace
236	[BUG]  [BUGGY]  return  peeked  =  JsonScope.BACK_OBJECT;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.BACK_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.BACK_OBJECT;	  return    peeked    =    PEEKED_BACK_OBJECT;    	non-compiled	[CE]  	24	None	replace
237	[BUG]  [BUGGY]  if(isLenient(c))  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(isLenient(c))  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(isLenient(c))  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    pos--;    }    	non-compiled	[CE]  	27	None	replace
238	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_BLOCK)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_BLOCK)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(c  ==  JsonScope.NONEMPTY_BLOCK)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    pos--;    }    	non-compiled	[CE]  	27	None	replace
239	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(false,  0);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  pos  =  nextNonWhitespace(false,  0);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  pos  =  nextNonWhitespace(false,  0);	  int    pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	41	None	replace
240	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(false,  true);  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  pos  =  nextNonWhitespace(false,  true);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  pos  =  nextNonWhitespace(false,  true);	  int    pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	41	None	replace
241	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(false,  false);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  pos  =  nextNonWhitespace(false,  false);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  pos  =  nextNonWhitespace(false,  false);	  int    pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	41	None	replace
242	[BUG]  [BUGGY]  return  peeked  =  NUMBER_CHAR_QUOTED_NAME  +  1;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  NUMBER_CHAR_QUOTED_NAME  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  NUMBER_CHAR_QUOTED_NAME  +  1;	  return    peeked    =    NUMBER_CHAR_QUOTED_NAME;    	non-compiled	[CE]  	9	None	replace
243	[BUG]  [BUGGY]  return  peeked  =  NUMBER_CHAR_QUOTED_NAME  -  1;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  NUMBER_CHAR_QUOTED_NAME  -  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  NUMBER_CHAR_QUOTED_NAME  -  1;	  return    peeked    =    NUMBER_CHAR_QUOTED_NAME;    	non-compiled	[CE]  	9	None	replace
244	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  -1);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  -1);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(false,  -1);	  int    stackSize    =    nextNonWhitespace(false);    	non-compiled	[CE]  	40	None	replace
245	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  true);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(false,  true);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(false,  true);	  int    stackSize    =    nextNonWhitespace(false);    	non-compiled	[CE]  	40	None	replace
246	[BUG]  [BUGGY]  return  peeked  =  PEEKED_LONG  +  1;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_LONG  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_LONG  +  1;	  return    peeked    =    PEEKED_BUCKET    +    1;    	non-compiled	[CE]  	33	None	replace
247	[BUG]  [BUGGY]  return  peeked  =  PEEKED_NULL  +  1;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_NULL  +  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_NULL  +  1;	  return    peeked    =    PEEKED_BUCKET    +    1;    	non-compiled	[CE]  	33	None	replace
248	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  1]);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  1]);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  1]);	  int[]    pathIndices    =    stack.toArray(new    String[pathNames.size()    ]);    	non-compiled	[CE]  	54	None	replace
249	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BLOCK_OBJECT;  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BLOCK_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BLOCK_OBJECT;	  return    peeked    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	22	None	replace
250	[BUG]  [BUGGY]  return  peeked  =  PEEKED_FUNCTION_OBJECT;  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_FUNCTION_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_FUNCTION_OBJECT;	  return    peeked    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	22	None	replace
251	[BUG]  [BUGGY]  StaticBucketMap.this.stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  StaticBucketMap.this.stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	StaticBucketMap.this.stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	25	None	replace
252	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN  -  1;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN  -  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN  -  1;	  return    peeked    =    PEEKED_BACKSLASH    -    1;    	non-compiled	[CE]  	58	None	replace
253	[BUG]  [BUGGY]  return  peeked  =  JsonScope.PEEKED_BUFFERED_QUOTED_NAME;  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.PEEKED_BUFFERED_QUOTED_NAME;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.PEEKED_BUFFERED_QUOTED_NAME;	  return    peeked    =    PEEKED_BUFFERED_QUOTED_NAME;    	non-compiled	[CE]  	10	None	replace
254	[BUG]  [BUGGY]  return  peeked  =  JsonScope.PEEKED_BEFORE;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.PEEKED_BEFORE;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.PEEKED_BEFORE;	  return    peeked    =    PEEKED_BEFORE;    	non-compiled	[CE]  	5	None	replace
255	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BUFFERED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BUFFERED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BUFFERED  ||  stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	17	None	replace
256	[BUG]  [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_DOUBLE_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	17	None	replace
257	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(false,  isLiteral((  char)c));  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  pos  =  nextNonWhitespace(false,  isLiteral((  char)c));  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	pos  =  nextNonWhitespace(false,  isLiteral((  char)c));	  pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	38	None	replace
258	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  PEEKED_END_OBJECT;  }  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  PEEKED_END_OBJECT;  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  PEEKED_END_OBJECT;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    return    peeked;    }    	non-compiled	[CE]  	29	None	replace
259	[BUG]  [BUGGY]  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  PEEKED_BUFFERED;  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  PEEKED_BUFFERED;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  PEEKED_BUFFERED;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    return    peeked;    }    	non-compiled	[CE]  	29	None	replace
260	[BUG]  [BUGGY]  StackTop[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  StackTop[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	StackTop[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  peeked;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    return    peeked;    }    	non-compiled	[CE]  	29	None	replace
261	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  PEEKED_END_ARRAY;  }  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  PEEKED_END_ARRAY;  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  return  PEEKED_END_ARRAY;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    return    peeked;    }    	non-compiled	[CE]  	29	None	replace
262	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_DECIMAL)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxError( "Expected  name  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_DECIMAL)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxError( "Expected  name  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(c  ==  JsonScope.NONEMPTY_DECIMAL)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxError( "Expected  name	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    else    if(isLiteral((    char)c))    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	26	None	replace
263	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxError( "Expected  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxError( "Expected  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  throw  syntaxError( "Expected	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    else    if(isLiteral((    char)c))    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	26	None	replace
264	[BUG]  [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  return  syntaxError( "Expected  name  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  return  syntaxError( "Expected  name  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(c  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  else  if(isLiteral((  char)c))  {  return  syntaxError( "Expected  name	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    else    if(isLiteral((    char)c))    {    throw    syntaxError(   "Expected    name    	non-compiled	[CE]  	26	None	replace
265	[BUG]  [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_DOUBLE_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG;	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	20	None	replace
266	[BUG]  [BUGGY]  return  peeked  =  JsonScope.BUCKET  ||  peeked  =  PEEKED_DOUBLE_QUOTED;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.BUCKET  ||  peeked  =  PEEKED_DOUBLE_QUOTED;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.BUCKET  ||  peeked  =  PEEKED_DOUBLE_QUOTED;	  return    peeked    =    JsonScope.BUCKET;    	non-compiled	[CE]  	46	None	replace
267	[BUG]  [BUGGY]  return  peeked  =  JsonScope.PEEKED_BACK_OBJECT;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.PEEKED_BACK_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.PEEKED_BACK_OBJECT;	  return    peeked    =    PEEKED_BACK_OBJECT;    	non-compiled	[CE]  	24	None	replace
268	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BLACK;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BLACK;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BLACK;	  return    peeked    =    JsonScope.NONEMPTY_LONG;    	non-compiled	[CE]  	16	None	replace
269	[BUG]  [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(peekStack!=  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	28	None	replace
270	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name  [CE]  [FE]                                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	28	None	replace
271	[BUG]  [BUGGY]  if(isLenient(c))  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(isLenient(c))  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(isLenient(c))  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  else  {  throw  syntaxError( "Expected  name   ");  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    pos--;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	28	None	replace
272	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(stackSize);  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  pos  =  nextNonWhitespace(stackSize);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  pos  =  nextNonWhitespace(stackSize);	  int    pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	43	None	replace
273	[BUG]  [BUGGY]  int  pos  =  nextNonWhitespace(false,  stack.length);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  pos  =  nextNonWhitespace(false,  stack.length);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  pos  =  nextNonWhitespace(false,  stack.length);	  int    pos    =    nextNonWhitespace(false);    	non-compiled	[CE]  	41	None	replace
274	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BEGIN_OBJECT;  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BEGIN_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BEGIN_OBJECT;	  return    peeked    =    JsonScope.NONEMPTY_OBJECT;    	non-compiled	[CE]  	22	None	replace
275	[BUG]  [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_DOUBLE_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT);    	non-compiled	[CE]  	19	None	replace
276	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BUFFERED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BUFFERED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BUFFERED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_OBJECT);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_OBJECT);    	non-compiled	[CE]  	19	None	replace
277	[BUG]  [BUGGY]  return  peeked  =  JsonScope.PEEKED_BEFORE_QUOTED_OBJECT;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.PEEKED_BEFORE_QUOTED_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.PEEKED_BEFORE_QUOTED_OBJECT;	  return    peeked    =    PEEKED_BEFORE_QUOTED_OBJECT;    	non-compiled	[CE]  	48	None	replace
278	[BUG]  [BUGGY]  return  peeked  =  JsonScope.PEEKED_BLOCK;  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.PEEKED_BLOCK;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.PEEKED_BLOCK;	  return    peeked    =    PEEKED_BLOCK;    	non-compiled	[CE]  	45	None	replace
279	[BUG]  [BUGGY]  return  peeked  =  JsonScope.PEEKED_BEFORE_QUOTED;  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.PEEKED_BEFORE_QUOTED;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.PEEKED_BEFORE_QUOTED;	  return    peeked    =    PEEKED_BEFORE_QUOTED;    	non-compiled	[CE]  	6	None	replace
280	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(stackSize);  pos--;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(stackSize);  pos--;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(stackSize);  pos--;	  int    stackSize    =    nextNonWhitespace(true);    pos--;    	non-compiled	[CE]  	53	None	replace
281	[BUG]  [BUGGY]  return  peeked  =  NUMBER_CHAR_EXP_E;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  NUMBER_CHAR_EXP_E;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  NUMBER_CHAR_EXP_E;	  return    peeked    =    PEEKED_BUFFER;    	non-compiled	[CE]  	15	None	replace
282	[BUG]  [BUGGY]  return  peeked  =  c.toLowerCase();  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  c.toLowerCase();  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  c.toLowerCase();	  return    peeked    =    PEEKED_BEFORE_QUOTED_NAME.toLowerCase();    	non-compiled	[CE]  	8	None	replace
283	[BUG]  [BUGGY]  return  peeked  =  NUMBER_CHAR_QUOTED_NAME.toLowerCase();  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  NUMBER_CHAR_QUOTED_NAME.toLowerCase();  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  NUMBER_CHAR_QUOTED_NAME.toLowerCase();	  return    peeked    =    PEEKED_BEFORE_QUOTED_NAME.toLowerCase();    	non-compiled	[CE]  	8	None	replace
284	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOTH.toLowerCase();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOTH.toLowerCase();  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOTH.toLowerCase();	  return    peeked    =    PEEKED_BEFORE_QUOTED_NAME.toLowerCase();    	non-compiled	[CE]  	8	None	replace
285	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(true,  isLiteral((  char)c));  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  pos  =  nextNonWhitespace(true,  isLiteral((  char)c));  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	pos  =  nextNonWhitespace(true,  isLiteral((  char)c));	  pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	39	None	replace
286	[BUG]  [BUGGY]  pos  =  nextNonWhitespace(stackSize);  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  pos  =  nextNonWhitespace(stackSize);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	pos  =  nextNonWhitespace(stackSize);	  pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	39	None	replace
287	[BUG]  [BUGGY]  pos  =  firstNonWhitespace(false);  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  pos  =  firstNonWhitespace(false);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	pos  =  firstNonWhitespace(false);	  pos    =    nextNonWhitespace(true);    	non-compiled	[CE]  	39	None	replace
288	[BUG]  [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	if(stack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  pos--;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    pos--;    }    	non-compiled	[CE]  	27	None	replace
289	[BUG]  [BUGGY]  StackTopLevel[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  StackTopLevel[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	StackTopLevel[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    else    {    throw    syntaxError(   "Expected    name   ");    }    	non-compiled	[CE]  	25	None	replace
290	[BUG]  [BUGGY]  int  stackSize  =  nextNonWhitespace(stackSize);  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  int  stackSize  =  nextNonWhitespace(stackSize);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	int  stackSize  =  nextNonWhitespace(stackSize);	  int    stackSize    =    nextNonWhitespace(true);    	non-compiled	[CE]  	44	None	replace
291	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED.substring(pos  +  1);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BOOLEAN_QUOTED.substring(pos  +  1);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BOOLEAN_QUOTED.substring(pos  +  1);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    +    1;    	non-compiled	[CE]  	51	None	replace
292	[BUG]  [BUGGY]  return  peeked  =  JsonScope.PEEKED_END_OBJECT;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.PEEKED_END_OBJECT;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.PEEKED_END_OBJECT;	  return    peeked    =    PEEKED_END_OBJECT;    	non-compiled	[CE]  	14	None	replace
293	[BUG]  [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_DOUBLE_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_DOUBLE_QUOTED  &&  peekStack[stackSize  -  1]  ==  JsonScope.NONEMPTY_LONG);	  return    peeked    =    PEEKED_BOOLEAN_QUOTED    ||    peekStack[stackSize    -    1]    ==    JsonScope.NONEMPTY_LONG);    	non-compiled	[CE]  	18	None	replace
294	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BUCKET  /  1;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BUCKET  /  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BUCKET  /  1;	  return    peeked    =    PEEKED_BUCKET    +    1;    	non-compiled	[CE]  	33	None	replace
295	[BUG]  [BUGGY]  Stack.push(stack[stackSize  -  1]);  break;  [CE]  [FE]                                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  Stack.push(stack[stackSize  -  1]);  break;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	Stack.push(stack[stackSize  -  1]);  break;	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    break;    }    	non-compiled	[CE]  	30	None	replace
296	[BUG]  [BUGGY]  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;  }  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  break;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    break;    }    	non-compiled	[CE]  	30	None	replace
297	[BUG]  [BUGGY]  StackTrace()  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  [CE]  [FE]                                      JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  StackTrace()  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	StackTrace()  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_LONG;  }	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    	non-compiled	[CE]  	31	None	replace
298	[BUG]  [BUGGY]  Stack.push(stack[stackSize  -  1]);  [CE]  [FE]                                        JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  Stack.push(stack[stackSize  -  1]);  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	Stack.push(stack[stackSize  -  1]);	  if(c    ==    JsonScope.NONEMPTY_LONG)    {    stack[stackSize    -    1]    =    JsonScope.NONEMPTY_LONG;    }    	non-compiled	[CE]  	31	None	replace
299	[BUG]  [BUGGY]  return  peeked  =  JsonScope.BACKSLASH  |  JsonScope.BACKSLASH_LONG;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  JsonScope.BACKSLASH  |  JsonScope.BACKSLASH_LONG;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  JsonScope.BACKSLASH  |  JsonScope.BACKSLASH_LONG;	  return    peeked    =    JsonScope.BACKSLASH;    	non-compiled	[CE]  	36	None	replace
300	[BUG]  [BUGGY]  return  peeked  =  PEEKED_BACKSLASH.length  -  1;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      case  '}':  if  (peekStack  !=  JsonScope.NONEMPTY_OBJECT)  {  return  peeked  =  PEEKED_END_OBJECT;  }  else  {  throw  syntaxError(     "Expected  name     ");  }  default:  checkLenient();  pos--;  //  Don't  consume  the  first  character  in  an  unquoted  string.  if  (isLiteral((char)  c))  {      [BUGGY]  return  peeked  =  PEEKED_BACKSLASH.length  -  1;  [BUGGY]      }  else  {  throw  syntaxError(     "Expected  name     ");  }  }  }  else  if  (peekStack  ==  JsonScope.DANGLING_NAME)  {  stack[stackSize  -  1]  =  JsonScope.NONEMPTY_OBJECT;  int  c  =  nextNonWhitespace(true);  switch  (c)  {  case  ':':  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.4364357804719848	515	515	3	replace	return  peeked  =  PEEKED_BACKSLASH.length  -  1;	  return    peeked    =    PEEKED_BACKSLASH    -    1;    	non-compiled	[CE]  	58	None	replace
