bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  last  =  PEEKED_BEGIN_ARRAY;  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  PEEKED_BEGIN_ARRAY;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  PEEKED_BEGIN_ARRAY;	  last    =    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	4	None	replace
2	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_E;  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  NUMBER_CHAR_EXP_E;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  NUMBER_CHAR_EXP_E;	  last    =    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	4	None	replace
3	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_SIGN  +  1;  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  NUMBER_CHAR_SIGN  +  1;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  NUMBER_CHAR_SIGN  +  1;	  last    =    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	4	None	replace
4	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_FRACTION_DIGIT;  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  NUMBER_CHAR_FRACTION_DIGIT;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  NUMBER_CHAR_FRACTION_DIGIT;	  last    =    PEEKED_NONE;    	non-compiled	[CE]  	6	None	replace
5	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_DECIMAL;  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  NUMBER_CHAR_DECIMAL;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  NUMBER_CHAR_DECIMAL;	  last    =    PEEKED_NONE;    	non-compiled	[CE]  	6	None	replace
6	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_ESIGN;  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  NUMBER_CHAR_ESIGN;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  NUMBER_CHAR_ESIGN;	  last    =    PEEKED_NONE;    	non-compiled	[CE]  	6	None	replace
7	[BUG]  [BUGGY]  last  =  PEEKED_BE;  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  PEEKED_BE;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  PEEKED_BE;	  last    =    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	3	None	replace
8	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  +  1;  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  +  1;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  NUMBER_CHAR_EXP_SIGN  +  1;	  last    =    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	3	None	replace
9	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  -  1;  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  -  1;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  NUMBER_CHAR_EXP_SIGN  -  1;	  last    =    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	3	None	replace
10	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  ||  NUMBER_CHAR_FRACTION_DIGIT;  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  ||  NUMBER_CHAR_FRACTION_DIGIT;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  NUMBER_CHAR_EXP_SIGN  ||  NUMBER_CHAR_FRACTION_DIGIT;	  last    =    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	3	None	replace
11	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_FLOAT;  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  NUMBER_CHAR_FLOAT;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  NUMBER_CHAR_FLOAT;	  last    =    newValue;    	non-compiled	[CE]  	1	None	replace
12	[BUG]  [BUGGY]  return  PEEKED_BUFFER;  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  return  PEEKED_BUFFER;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	return  PEEKED_BUFFER;	      	non-compiled	[CE]  	8	None	replace
13	[BUG]  [BUGGY]  return  PEEKED_NUMBER;  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  return  PEEKED_NUMBER;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	return  PEEKED_NUMBER;	      	non-compiled	[CE]  	8	None	replace
14	[BUG]  [BUGGY]  pos  +=  i;  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  pos  +=  i;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	pos  +=  i;	      	non-compiled	[CE]  	8	None	replace
15	[BUG]  [BUGGY]  return  PEEKED_NONE;  [CE]  [FE]                            JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  return  PEEKED_NONE;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	return  PEEKED_NONE;	      	non-compiled	[CE]  	8	None	replace
16	[BUG]  [BUGGY]  return  PEEKED_BIGINT;  [CE]  [FE]                              JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  return  PEEKED_BIGINT;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	return  PEEKED_BIGINT;	      	non-compiled	[CE]  	8	None	replace
17	[BUG]  [BUGGY]  return  PEEKED_LONG;  [CE]  [FE]                                JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  return  PEEKED_LONG;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	return  PEEKED_LONG;	      	non-compiled	[CE]  	8	None	replace
18	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  ||  NUMBER_CHAR_EXP_E;  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  ||  NUMBER_CHAR_EXP_E;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  NUMBER_CHAR_EXP_SIGN  ||  NUMBER_CHAR_EXP_E;	  last    =    EXP_SIGN;    	non-compiled	[CE]  	9	None	replace
19	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_EXP_E;  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_EXP_E;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_EXP_E;	  last    =    EXP_SIGN;    	non-compiled	[CE]  	9	None	replace
20	[BUG]  [BUGGY]  last  =  Long.MIN_VALUE;  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  Long.MIN_VALUE;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  Long.MIN_VALUE;	  last    =    Integer.MIN_VALUE;    	non-compiled	[CE]  	5	None	replace
21	[BUG]  [BUGGY]  last  =  Integer.MIN_VALUE  -  1;  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  Integer.MIN_VALUE  -  1;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  Integer.MIN_VALUE  -  1;	  last    =    Integer.MIN_VALUE;    	non-compiled	[CE]  	5	None	replace
22	[BUG]  [BUGGY]  last  =  Integer.MAX_VALUE;  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  Integer.MAX_VALUE;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  Integer.MAX_VALUE;	  last    =    Integer.MIN_VALUE;    	non-compiled	[CE]  	5	None	replace
23	[BUG]  [BUGGY]  last  =  Integer.MIN_VALUE  +  1;  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  Integer.MIN_VALUE  +  1;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  Integer.MIN_VALUE  +  1;	  last    =    Integer.MIN_VALUE;    	non-compiled	[CE]  	5	None	replace
24	[BUG]  [BUGGY]  last  =  Integer.MIN_VALUE  /  2;  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  Integer.MIN_VALUE  /  2;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  Integer.MIN_VALUE  /  2;	  last    =    Integer.MIN_VALUE;    	non-compiled	[CE]  	5	None	replace
25	[BUG]  [BUGGY]  last  =  PEEKED_NUMBER;  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  PEEKED_NUMBER;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  PEEKED_NUMBER;	  last    =    SHORT_NUMBER_EXP_SIGN;    	non-compiled	[CE]  	13	None	replace
26	[BUG]  [BUGGY]  last  =  SHORT_NUMBER_EXP_SIGN  +  1;  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  SHORT_NUMBER_EXP_SIGN  +  1;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  SHORT_NUMBER_EXP_SIGN  +  1;	  last    =    SHORT_NUMBER_EXP_SIGN;    	non-compiled	[CE]  	13	None	replace
27	[BUG]  [BUGGY]  last  =  SHORT_NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  SHORT_NUMBER_CHAR_EXP_SIGN;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  SHORT_NUMBER_CHAR_EXP_SIGN;	  last    =    SHORT_NUMBER_EXP_SIGN;    	non-compiled	[CE]  	13	None	replace
28	[BUG]  [BUGGY]  last  =  STRICT_NUMBER_CHAR_EXP_SIGN  +  1;  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  STRICT_NUMBER_CHAR_EXP_SIGN  +  1;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  STRICT_NUMBER_CHAR_EXP_SIGN  +  1;	  last    =    STRICT_NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	11	None	replace
29	[BUG]  [BUGGY]  last  =  STRICT_NUMBER_CHAR_EXP_SIGN  -  1;  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  STRICT_NUMBER_CHAR_EXP_SIGN  -  1;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  STRICT_NUMBER_CHAR_EXP_SIGN  -  1;	  last    =    STRICT_NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	11	None	replace
30	[BUG]  [BUGGY]  last  =  STRICT_NUMBER_CHAR_EXP_SIGN  |  NUMBER_CHAR_EXP_E;  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  STRICT_NUMBER_CHAR_EXP_SIGN  |  NUMBER_CHAR_EXP_E;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  STRICT_NUMBER_CHAR_EXP_SIGN  |  NUMBER_CHAR_EXP_E;	  last    =    STRICT_NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	11	None	replace
31	[BUG]  [BUGGY]  last  =  STRICT_NUMBER_EXP_SIGN  |  NUMBER_CHAR_EXP_E;  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  STRICT_NUMBER_EXP_SIGN  |  NUMBER_CHAR_EXP_E;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  STRICT_NUMBER_EXP_SIGN  |  NUMBER_CHAR_EXP_E;	  last    =    STRICT_NUMBER_EXP_SIGN;    	non-compiled	[CE]  	10	None	replace
32	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_DEECIMAL;  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  NUMBER_CHAR_DEECIMAL;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  NUMBER_CHAR_DEECIMAL;	  last    =    PEEKED_BEGIN;    	non-compiled	[CE]  	2	None	replace
33	[BUG]  [BUGGY]  last  =  STRICT_NUMBER_CHAR_SIGN;  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  STRICT_NUMBER_CHAR_SIGN;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  STRICT_NUMBER_CHAR_SIGN;	  last    =    STRICT_NUMBER_CHAR_EXP_DIGIT;    	non-compiled	[CE]  	12	None	replace
34	[BUG]  [BUGGY]  last  =  STRICT_NUMBER_CHAR_FRACTION_DIGIT;  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  STRICT_NUMBER_CHAR_FRACTION_DIGIT;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  STRICT_NUMBER_CHAR_FRACTION_DIGIT;	  last    =    STRICT_NUMBER_CHAR_EXP_DIGIT;    	non-compiled	[CE]  	12	None	replace
35	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_DIGIT;  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  NUMBER_CHAR_DIGIT;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  NUMBER_CHAR_DIGIT;	  last    =    0;    	non-compiled	[CE]  	7	None	replace
36	[BUG]  [BUGGY]  last  =  EXP_NUMBER_EXP_SIGN;  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  EXP_NUMBER_EXP_SIGN;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  EXP_NUMBER_EXP_SIGN;	  last    =    SHORT_NUMBER_EXP_SIGN;    	non-compiled	[CE]  	13	None	replace
37	[BUG]  [BUGGY]  last  =  EXP_E;  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  EXP_E;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  EXP_E;	  last    =    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	3	None	replace
38	[BUG]  [BUGGY]  last  =  STRICT_NUMBER_EXP_SIGN  +  1;  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  STRICT_NUMBER_EXP_SIGN  +  1;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  STRICT_NUMBER_EXP_SIGN  +  1;	  last    =    STRICT_NUMBER_EXP_SIGN;    	non-compiled	[CE]  	10	None	replace
39	[BUG]  [BUGGY]  last  =  STRICT_NUMBER_EXP_SIGN  -  1;  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  STRICT_NUMBER_EXP_SIGN  -  1;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  STRICT_NUMBER_EXP_SIGN  -  1;	  last    =    STRICT_NUMBER_EXP_SIGN;    	non-compiled	[CE]  	10	None	replace
40	[BUG]  [BUGGY]  return  Integer.parseInt(pathNames[pos]);  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  return  Integer.parseInt(pathNames[pos]);  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	return  Integer.parseInt(pathNames[pos]);	      	non-compiled	[CE]  	8	None	replace
41	[BUG]  [BUGGY]  return  Integer.parseInt(newValue);  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  return  Integer.parseInt(newValue);  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	return  Integer.parseInt(newValue);	      	non-compiled	[CE]  	8	None	replace
42	[BUG]  [BUGGY]  return  Integer.parseInt(value);  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  return  Integer.parseInt(value);  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	return  Integer.parseInt(value);	      	non-compiled	[CE]  	8	None	replace
43	[BUG]  [BUGGY]  return  Integer.parseInt(peekNumber);  [CE]  [FE]                            JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  return  Integer.parseInt(peekNumber);  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	return  Integer.parseInt(peekNumber);	      	non-compiled	[CE]  	8	None	replace
44	[BUG]  [BUGGY]  last  =  Integer.MIN_VALUE  -  2;  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  Integer.MIN_VALUE  -  2;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  Integer.MIN_VALUE  -  2;	  last    =    Integer.MIN_VALUE;    	non-compiled	[CE]  	5	None	replace
45	[BUG]  [BUGGY]  last  =  DEFAULT_NUMBER_EXP_SIGN;  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  DEFAULT_NUMBER_EXP_SIGN;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  DEFAULT_NUMBER_EXP_SIGN;	  last    =    EXP_SIGN;    	non-compiled	[CE]  	9	None	replace
46	[BUG]  [BUGGY]  last  =  EXP_SIGN  +  1;  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  EXP_SIGN  +  1;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  EXP_SIGN  +  1;	  last    =    EXP_SIGN;    	non-compiled	[CE]  	9	None	replace
47	[BUG]  [BUGGY]  last  =  PEEKED_EXP_SIGN;  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  PEEKED_EXP_SIGN;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  PEEKED_EXP_SIGN;	  last    =    PEEKED_NONE;    	non-compiled	[CE]  	6	None	replace
48	[BUG]  [BUGGY]  last  =  EXP_NUMBER;  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  EXP_NUMBER;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  EXP_NUMBER;	  last    =    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	4	None	replace
49	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_FRACTION_DIGIT  &&  newValue  <  =  NUMBER_CHAR_DIGIT;  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  NUMBER_CHAR_FRACTION_DIGIT  &&  newValue  <  =  NUMBER_CHAR_DIGIT;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  NUMBER_CHAR_FRACTION_DIGIT  &&  newValue  <  =  NUMBER_CHAR_DIGIT;	      	non-compiled	[CE]  	8	None	replace
50	[BUG]  [BUGGY]  return  PEEKED_BUFFERED;  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  return  PEEKED_BUFFERED;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	return  PEEKED_BUFFERED;	      	non-compiled	[CE]  	8	None	replace
51	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_FRACTION_DIGIT;  pos  +=  i;  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  NUMBER_CHAR_FRACTION_DIGIT;  pos  +=  i;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  NUMBER_CHAR_FRACTION_DIGIT;  pos  +=  i;	      	non-compiled	[CE]  	8	None	replace
52	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_FRACTION_DIGIT  &&  value  <  =  NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]                            JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  NUMBER_CHAR_FRACTION_DIGIT  &&  value  <  =  NUMBER_CHAR_EXP_SIGN;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  NUMBER_CHAR_FRACTION_DIGIT  &&  value  <  =  NUMBER_CHAR_EXP_SIGN;	      	non-compiled	[CE]  	8	None	replace
53	[BUG]  [BUGGY]  last  =  PEEKED_BEGIN_OBJECT;  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  PEEKED_BEGIN_OBJECT;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  PEEKED_BEGIN_OBJECT;	  last    =    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	4	None	replace
54	[BUG]  [BUGGY]  last  =  STRICT_NUMBER_CHAR_DIGIT;  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  STRICT_NUMBER_CHAR_DIGIT;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  STRICT_NUMBER_CHAR_DIGIT;	  last    =    STRICT_NUMBER_CHAR_EXP_DIGIT;    	non-compiled	[CE]  	12	None	replace
55	[BUG]  [BUGGY]  last  =  STRICT_NUMBER_CHAR_EXP_DIGIT  +  1;  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  STRICT_NUMBER_CHAR_EXP_DIGIT  +  1;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  STRICT_NUMBER_CHAR_EXP_DIGIT  +  1;	  last    =    STRICT_NUMBER_CHAR_EXP_DIGIT;    	non-compiled	[CE]  	12	None	replace
56	[BUG]  [BUGGY]  last  =  PEEKED_LONG;  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  PEEKED_LONG;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  PEEKED_LONG;	  last    =    SHORT_NUMBER_EXP_SIGN;    	non-compiled	[CE]  	13	None	replace
57	[BUG]  [BUGGY]  last  =  PEEKED_SIGN;  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  PEEKED_SIGN;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  PEEKED_SIGN;	  last    =    SHORT_NUMBER_EXP_SIGN;    	non-compiled	[CE]  	13	None	replace
58	[BUG]  [BUGGY]  last  =  PEEKED_BUFFER;  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  PEEKED_BUFFER;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  PEEKED_BUFFER;	  last    =    0;    	non-compiled	[CE]  	7	None	replace
59	[BUG]  [BUGGY]  last  =  PEEKED_BIGINT;  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  PEEKED_BIGINT;  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  PEEKED_BIGINT;	  last    =    0;    	non-compiled	[CE]  	7	None	replace
60	[BUG]  [BUGGY]  last  =  Integer.parseInt(value);  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;  }  else  if  (last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {    [BUGGY]  last  =  Integer.parseInt(value);  [BUGGY]    }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  }  else  if  (last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2581988897471611	729	729	3	replace	last  =  Integer.parseInt(value);	  last    =    Integer.MIN_VALUE;    	non-compiled	[CE]  	5	None	replace
