bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  >=  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  >=  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  >=  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last!=    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	23	None	replace
2	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  last!=  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  last!=  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  last!=  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last!=    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	23	None	replace
3	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DECIMAL  ||  last!=  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DECIMAL  ||  last!=  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_DECIMAL  ||  last!=  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last!=    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	23	None	replace
4	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last!=  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last!=  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last!=  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last!=    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	23	None	replace
5	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  newValue  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  newValue  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  newValue  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    &&    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	20	None	replace
6	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DECIMAL  &&  last  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DECIMAL  &&  last  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_DECIMAL  &&  last  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    &&    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	20	None	replace
7	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    &&    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	20	None	replace
8	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  value  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  value  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  value  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    &&    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	20	None	replace
9	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  last  <  =  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  last  <  =  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  last  <  =  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    &&    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	20	None	replace
10	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_SIGN  +  1;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  NUMBER_CHAR_SIGN  +  1;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_CHAR_SIGN  +  1;	  last    =    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	9	None	replace
11	[BUG]  [BUGGY]  last  =  Integer.MIN_VALUE;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  Integer.MIN_VALUE;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  Integer.MIN_VALUE;	  last    =    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	9	None	replace
12	[BUG]  [BUGGY]  last  =  0;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  0;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  0;	  last    =    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	9	None	replace
13	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_FRACTION_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_DIGIT)    {    	non-compiled	[CE]  	18	None	replace
14	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_DIGIT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_DIGIT)    {    	non-compiled	[CE]  	18	None	replace
15	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_DIGIT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_DIGIT)    {    	non-compiled	[CE]  	18	None	replace
16	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last!=  NUMBER_CHAR_DIGIT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last!=  NUMBER_CHAR_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last!=  NUMBER_CHAR_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_DIGIT)    {    	non-compiled	[CE]  	18	None	replace
17	[BUG]  [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    newValue    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	26	None	replace
18	[BUG]  [BUGGY]  }  else  if(newValue  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(newValue  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(newValue  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    newValue    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	26	None	replace
19	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  newValue  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  newValue  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  newValue  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    newValue    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	26	None	replace
20	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    newValue    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	26	None	replace
21	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DECIMAL  ||  newValue  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DECIMAL  ||  newValue  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_DECIMAL  ||  newValue  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    newValue    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	26	None	replace
22	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    <    =    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	30	None	replace
23	[BUG]  [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  >=  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    <    =    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	30	None	replace
24	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    <    =    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	30	None	replace
25	[BUG]  [BUGGY]  }  else  if(last!=  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last!=  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last!=  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    <    =    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	30	None	replace
26	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  >=  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  >=  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  >=  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    <    =    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	30	None	replace
27	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_SIGN  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_SIGN  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_SIGN  ||  last  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_DECIMAL    ||    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	19	None	replace
28	[BUG]  [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_DECIMAL  ||  value  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_DECIMAL  ||  value  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  NUMBER_CHAR_DECIMAL  ||  value  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_DECIMAL    ||    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	19	None	replace
29	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_NONE  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_NONE  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_NONE  ||  last  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_DECIMAL    ||    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	19	None	replace
30	[BUG]  [BUGGY]  last  =  PEEKED_NUMBER;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  PEEKED_NUMBER;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  PEEKED_NUMBER;	  last    =    NUMBER_CHAR_EXP_LONG;    	non-compiled	[CE]  	35	None	replace
31	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    <    =    NUMBER_CHAR_EXP_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	37	None	replace
32	[BUG]  [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  >=  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    <    =    NUMBER_CHAR_EXP_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	37	None	replace
33	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    <    =    NUMBER_CHAR_DECIMAL    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	42	None	replace
34	[BUG]  [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  >=  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DECIMAL)  {	  }    else    if(last    <    =    NUMBER_CHAR_DECIMAL    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	42	None	replace
35	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_DECIMAL  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_DECIMAL  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_DECIMAL  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    <    =    NUMBER_CHAR_DECIMAL    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	42	None	replace
36	[BUG]  [BUGGY]  }  else  if(last!=  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last!=  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last!=  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DECIMAL)  {	  }    else    if(last    <    =    NUMBER_CHAR_DECIMAL    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	42	None	replace
37	[BUG]  [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_EXP_SIGN  ||  value  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_EXP_SIGN  ||  value  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  NUMBER_CHAR_EXP_SIGN  ||  value  ==  NUMBER_CHAR_DECIMAL)  {	  }    else    if(value    ==    NUMBER_CHAR_DECIMAL    ||    value    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	13	None	replace
38	[BUG]  [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_SIGN  ||  value  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_SIGN  ||  value  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  NUMBER_CHAR_SIGN  ||  value  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(value    ==    NUMBER_CHAR_DECIMAL    ||    value    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	13	None	replace
39	[BUG]  [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_DIGIT  ||  value  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_DIGIT  ||  value  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  NUMBER_CHAR_DIGIT  ||  value  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(value    ==    NUMBER_CHAR_DECIMAL    ||    value    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	13	None	replace
40	[BUG]  [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_DECIMAL  ||  value!=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_DECIMAL  ||  value!=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  NUMBER_CHAR_DECIMAL  ||  value!=  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(value    ==    NUMBER_CHAR_DECIMAL    ||    value    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	13	None	replace
41	[BUG]  [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_NONE  ||  value  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_NONE  ||  value  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  NUMBER_CHAR_NONE  ||  value  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(value    ==    NUMBER_CHAR_DECIMAL    ||    value    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	13	None	replace
42	[BUG]  [BUGGY]  }  else  if(value!=  NUMBER_CHAR_DECIMAL  ||  value  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value!=  NUMBER_CHAR_DECIMAL  ||  value  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value!=  NUMBER_CHAR_DECIMAL  ||  value  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(value    ==    NUMBER_CHAR_DECIMAL    ||    value    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	13	None	replace
43	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_FRACTION_DIGIT;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  NUMBER_CHAR_FRACTION_DIGIT;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_CHAR_FRACTION_DIGIT;	  last    =    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	4	None	replace
44	[BUG]  [BUGGY]  }  else  if(last  ==  0  ||  newValue  ==  0)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  0  ||  newValue  ==  0)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  0  ||  newValue  ==  0)  {	  }    else    if(last    ==    0    ||    last    ==    0)    {    	non-compiled	[CE]  	29	None	replace
45	[BUG]  [BUGGY]  }  else  if(last  ==  0  ||  value  ==  0)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  0  ||  value  ==  0)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  0  ||  value  ==  0)  {	  }    else    if(last    ==    0    ||    last    ==    0)    {    	non-compiled	[CE]  	29	None	replace
46	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_SIGN)  {	  }    else    if(last    ==    0    ||    last    ==    0)    {    	non-compiled	[CE]  	29	None	replace
47	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_DECIMAL)  {	  }    else    if(last    ==    0    ||    last    ==    0)    {    	non-compiled	[CE]  	29	None	replace
48	[BUG]  [BUGGY]  last  =  Integer.MAX_VALUE;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  Integer.MAX_VALUE;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  Integer.MAX_VALUE;	  last    =    NUMBER_CHAR_EXP_DIGIT;    	non-compiled	[CE]  	5	None	replace
49	[BUG]  [BUGGY]  last  =  Integer.parseInt(newValue);  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  Integer.parseInt(newValue);  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  Integer.parseInt(newValue);	  last    =    NUMBER_CHAR_EXP_DIGIT;    	non-compiled	[CE]  	5	None	replace
50	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    <    NUMBER_CHAR_EXP_SIGN    ||    last    >    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	22	None	replace
51	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  >=  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  >=  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  >=  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    <    NUMBER_CHAR_EXP_SIGN    ||    last    >    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	22	None	replace
52	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    <    NUMBER_CHAR_EXP_SIGN    ||    last    >    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	22	None	replace
53	[BUG]  [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  >=  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    <    NUMBER_CHAR_EXP_SIGN    ||    last    >    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	22	None	replace
54	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  &&  last  >  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  &&  last  >  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_EXP_SIGN  &&  last  >  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    <    NUMBER_CHAR_EXP_SIGN    ||    last    >    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	22	None	replace
55	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  &&  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  &&  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  &&  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_DIGIT    &&    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	2	None	replace
56	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  value  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  value  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  value  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_DIGIT    &&    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	2	None	replace
57	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DECIMAL  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DECIMAL  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_DECIMAL  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_DIGIT    &&    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	2	None	replace
58	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_SIGN  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_SIGN  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_SIGN  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_DECIMAL    ||    last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	25	None	replace
59	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_DECIMAL    ||    last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	25	None	replace
60	[BUG]  [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_DECIMAL  ||  value  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_DECIMAL  ||  value  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  NUMBER_CHAR_DECIMAL  ||  value  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_DECIMAL    ||    last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	25	None	replace
61	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_SIGN  ||  last  ==  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_SIGN  ||  last  ==  NUMBER_CHAR_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_SIGN  ||  last  ==  NUMBER_CHAR_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	21	None	replace
62	[BUG]  [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  >=  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    <    =    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	32	None	replace
63	[BUG]  [BUGGY]  }  else  if(last!=  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last!=  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last!=  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    <    =    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	32	None	replace
64	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    &&    last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	24	None	replace
65	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DECIMAL  &&  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DECIMAL  &&  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_DECIMAL  &&  last  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    &&    last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	24	None	replace
66	[BUG]  [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    &&    last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	24	None	replace
67	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    &&    last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	24	None	replace
68	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  PEEKED_NONE)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  PEEKED_NONE)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  PEEKED_NONE)  {	  }    else    if(last    ==    PEEKED_NONE    ||    last    ==    PEEKED_NONE)    {    	non-compiled	[CE]  	41	None	replace
69	[BUG]  [BUGGY]  }  else  if(last  ==  PEEKED_EXP_DIGIT  ||  last  ==  PEEKED_NONE)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  PEEKED_EXP_DIGIT  ||  last  ==  PEEKED_NONE)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  PEEKED_EXP_DIGIT  ||  last  ==  PEEKED_NONE)  {	  }    else    if(last    ==    PEEKED_NONE    ||    last    ==    PEEKED_NONE)    {    	non-compiled	[CE]  	41	None	replace
70	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  PEEKED_NONE)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  PEEKED_NONE)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  PEEKED_NONE)  {	  }    else    if(last    ==    PEEKED_NONE    ||    last    ==    PEEKED_NONE)    {    	non-compiled	[CE]  	41	None	replace
71	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  PEEKED_NONE)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  PEEKED_NONE)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  PEEKED_NONE)  {	  }    else    if(last    ==    PEEKED_NONE    ||    last    ==    PEEKED_NONE)    {    	non-compiled	[CE]  	41	None	replace
72	[BUG]  [BUGGY]  }  else  if(last!=  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  PEEKED_NONE)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last!=  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  PEEKED_NONE)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last!=  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  PEEKED_NONE)  {	  }    else    if(last    ==    PEEKED_NONE    ||    last    ==    PEEKED_NONE)    {    	non-compiled	[CE]  	41	None	replace
73	[BUG]  [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  PEEKED_NONE)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  PEEKED_NONE)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  >=  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  PEEKED_NONE)  {	  }    else    if(last    ==    PEEKED_NONE    ||    last    ==    PEEKED_NONE)    {    	non-compiled	[CE]  	41	None	replace
74	[BUG]  [BUGGY]  last  =  Long.MAX_VALUE  -  1;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  Long.MAX_VALUE  -  1;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  Long.MAX_VALUE  -  1;	  last    =    Long.MAX_VALUE;    	non-compiled	[CE]  	34	None	replace
75	[BUG]  [BUGGY]  last  =  Long.MAX_VALUE  +  1;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  Long.MAX_VALUE  +  1;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  Long.MAX_VALUE  +  1;	  last    =    Long.MAX_VALUE;    	non-compiled	[CE]  	34	None	replace
76	[BUG]  [BUGGY]  last  =  Long.MAX_VALUE  |  Long.MAX_VALUE;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  Long.MAX_VALUE  |  Long.MAX_VALUE;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  Long.MAX_VALUE  |  Long.MAX_VALUE;	  last    =    Long.MAX_VALUE;    	non-compiled	[CE]  	34	None	replace
77	[BUG]  [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_EXP_DIGIT  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_EXP_DIGIT  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  NUMBER_CHAR_EXP_DIGIT  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_DIGIT    ||    newValue    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	1	None	replace
78	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DIGIT  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DIGIT  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_DIGIT  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_DIGIT    ||    newValue    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	1	None	replace
79	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_DIGIT    ||    newValue    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	1	None	replace
80	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DIGIT  &&  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DIGIT  &&  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_DIGIT  &&  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT    &&    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	17	None	replace
81	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_DECIMAL)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT    &&    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	17	None	replace
82	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_SIGN  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_SIGN  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_SIGN  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT    &&    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	17	None	replace
83	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT    &&    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	17	None	replace
84	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_DIGIT  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_DIGIT  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_DIGIT  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    <    NUMBER_CHAR_DIGIT    ||    last    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	39	None	replace
85	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DIGIT  ||  last  >  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DIGIT  ||  last  >  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_DIGIT  ||  last  >  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    <    NUMBER_CHAR_DIGIT    ||    last    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	39	None	replace
86	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    <    NUMBER_CHAR_DIGIT    ||    last    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	39	None	replace
87	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DIGIT  ||  last  >=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DIGIT  ||  last  >=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_DIGIT  ||  last  >=  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    <    NUMBER_CHAR_DIGIT    ||    last    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	39	None	replace
88	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DIGIT  ||  last  >  NUMBER_CHAR_FRACTION_DIGIT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DIGIT  ||  last  >  NUMBER_CHAR_FRACTION_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_DIGIT  ||  last  >  NUMBER_CHAR_FRACTION_DIGIT)  {	  }    else    if(last    <    NUMBER_CHAR_DIGIT    ||    last    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	39	None	replace
89	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DIGIT  ||  last  >  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DIGIT  ||  last  >  NUMBER_CHAR_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_DIGIT  ||  last  >  NUMBER_CHAR_SIGN)  {	  }    else    if(last    <    NUMBER_CHAR_DIGIT    ||    last    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	39	None	replace
90	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT)    {    	non-compiled	[CE]  	40	None	replace
91	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT)    {    	non-compiled	[CE]  	40	None	replace
92	[BUG]  [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT)    {    	non-compiled	[CE]  	40	None	replace
93	[BUG]  [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT)    {    	non-compiled	[CE]  	40	None	replace
94	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT)    {    	non-compiled	[CE]  	40	None	replace
95	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT)    {    	non-compiled	[CE]  	40	None	replace
96	[BUG]  [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_DIGIT)  {  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  NUMBER_CHAR_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT)    {    	non-compiled	[CE]  	40	None	replace
97	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_INTEGER)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_INTEGER)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_INTEGER)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_INTEGER    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	3	None	replace
98	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_INT  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_INT  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_INT  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_INTEGER    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	3	None	replace
99	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_INTEGER  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_INTEGER  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_INTEGER  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_INTEGER    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	3	None	replace
100	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_L)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_L)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_L)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_L)    {    	non-compiled	[CE]  	33	None	replace
101	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_L)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_L)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_L)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_L)    {    	non-compiled	[CE]  	33	None	replace
102	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last!=  NUMBER_CHAR_EXP_L)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last!=  NUMBER_CHAR_EXP_L)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last!=  NUMBER_CHAR_EXP_L)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_L)    {    	non-compiled	[CE]  	33	None	replace
103	[BUG]  [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DIGIT)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  >=  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DIGIT)  {	  }    else    if(last    <    =    NUMBER_CHAR_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	31	None	replace
104	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    <    =    NUMBER_CHAR_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	31	None	replace
105	[BUG]  [BUGGY]  last  =  Long.MIN_VALUE  -  1;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  Long.MIN_VALUE  -  1;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  Long.MIN_VALUE  -  1;	  last    =    Long.MIN_VALUE;    	non-compiled	[CE]  	10	None	replace
106	[BUG]  [BUGGY]  last  =  Long.MIN_VALUE  +  1;  [CE]  [FE]                                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  Long.MIN_VALUE  +  1;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  Long.MIN_VALUE  +  1;	  last    =    Long.MIN_VALUE;    	non-compiled	[CE]  	10	None	replace
107	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_DEECIMAL;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  NUMBER_CHAR_DEECIMAL;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_CHAR_DEECIMAL;	  last    =    newValue;    	non-compiled	[CE]  	6	None	replace
108	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  +  1;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  +  1;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_CHAR_EXP_SIGN  +  1;	  last    =    NUMBER_CHAR_EXP_DIGIT    +    1;    	non-compiled	[CE]  	44	None	replace
109	[BUG]  [BUGGY]  last  =  newValue  +  1;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  newValue  +  1;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  newValue  +  1;	  last    =    NUMBER_CHAR_EXP_DIGIT    +    1;    	non-compiled	[CE]  	44	None	replace
110	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_DIGIT  +  2;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  NUMBER_CHAR_EXP_DIGIT  +  2;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_CHAR_EXP_DIGIT  +  2;	  last    =    NUMBER_CHAR_EXP_DIGIT    +    1;    	non-compiled	[CE]  	44	None	replace
111	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_DIGIT  -  1;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  NUMBER_CHAR_EXP_DIGIT  -  1;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_CHAR_EXP_DIGIT  -  1;	  last    =    NUMBER_CHAR_EXP_DIGIT    +    1;    	non-compiled	[CE]  	44	None	replace
112	[BUG]  [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  >=  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    <    NUMBER_CHAR_EXP_SIGN    ||    last    >    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	27	None	replace
113	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DECIMAL  ||  last  >  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DECIMAL  ||  last  >  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_DECIMAL  ||  last  >  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    <    NUMBER_CHAR_EXP_SIGN    ||    last    >    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	27	None	replace
114	[BUG]  [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DECIMAL)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	11	None	replace
115	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last!=  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last!=  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last!=  NUMBER_CHAR_DECIMAL)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	11	None	replace
116	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_DECIMAL)  {	  }    else    if(last    <    =    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	28	None	replace
117	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DECIMAL)  {	  }    else    if(last    <    =    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	28	None	replace
118	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_DECIMAL)  {	  }    else    if(last    <    =    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_DECIMAL)    {    	non-compiled	[CE]  	28	None	replace
119	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_SIGN)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	16	None	replace
120	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_E  ||  last  ==  NUMBER_CHAR_DECIMAL)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	16	None	replace
121	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_DIGIT  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_DIGIT  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_DIGIT  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    <    NUMBER_CHAR_EXP_DIGIT    ||    last    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	38	None	replace
122	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_DIGIT  ||  last  >=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_DIGIT  ||  last  >=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_EXP_DIGIT  ||  last  >=  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    <    NUMBER_CHAR_EXP_DIGIT    ||    last    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	38	None	replace
123	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    <    NUMBER_CHAR_EXP_DIGIT    ||    last    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	38	None	replace
124	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DECIMAL  ||  last  >  NUMBER_CHAR_FRACTION_DIGIT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DECIMAL  ||  last  >  NUMBER_CHAR_FRACTION_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_DECIMAL  ||  last  >  NUMBER_CHAR_FRACTION_DIGIT)  {	  }    else    if(last    <    NUMBER_CHAR_DECIMAL    ||    last    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	14	None	replace
125	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DECIMAL  ||  last  >=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DECIMAL  ||  last  >=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_DECIMAL  ||  last  >=  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    <    NUMBER_CHAR_DECIMAL    ||    last    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	14	None	replace
126	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DECIMAL  ||  last  >  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DECIMAL  ||  last  >  NUMBER_CHAR_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_DECIMAL  ||  last  >  NUMBER_CHAR_SIGN)  {	  }    else    if(last    <    NUMBER_CHAR_DECIMAL    ||    last    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	14	None	replace
127	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_SIGN    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	12	None	replace
128	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_SIGN  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_SIGN  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_SIGN  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_SIGN    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	12	None	replace
129	[BUG]  [BUGGY]  int  pos  =  stack.size()  -  1;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  int  pos  =  stack.size()  -  1;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	int  pos  =  stack.size()  -  1;	  int    pos    =    stack.size();    	non-compiled	[CE]  	43	None	replace
130	[BUG]  [BUGGY]  int  pos  =  stack.size()  +  1;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  int  pos  =  stack.size()  +  1;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	int  pos  =  stack.size()  +  1;	  int    pos    =    stack.size();    	non-compiled	[CE]  	43	None	replace
131	[BUG]  [BUGGY]  int  pos  =  stack.size()  -  2;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  int  pos  =  stack.size()  -  2;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	int  pos  =  stack.size()  -  2;	  int    pos    =    stack.size();    	non-compiled	[CE]  	43	None	replace
132	[BUG]  [BUGGY]  int  pos  =  stack.size()  -  4;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  int  pos  =  stack.size()  -  4;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	int  pos  =  stack.size()  -  4;	  int    pos    =    stack.size();    	non-compiled	[CE]  	43	None	replace
133	[BUG]  [BUGGY]  int  pos  =  pathIndices.size()  -  1;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  int  pos  =  pathIndices.size()  -  1;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	int  pos  =  pathIndices.size()  -  1;	  int    pos    =    pathIndices.size();    	non-compiled	[CE]  	7	None	replace
134	[BUG]  [BUGGY]  int  pos  =  pathIndices.size()  +  1;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  int  pos  =  pathIndices.size()  +  1;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	int  pos  =  pathIndices.size()  +  1;	  int    pos    =    pathIndices.size();    	non-compiled	[CE]  	7	None	replace
135	[BUG]  [BUGGY]  int  pos  =  pathNames.size();  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  int  pos  =  pathNames.size();  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	int  pos  =  pathNames.size();	  int    pos    =    pathIndices.size();    	non-compiled	[CE]  	7	None	replace
136	[BUG]  [BUGGY]  int  pos  =  pathIndices.size()  -  2;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  int  pos  =  pathIndices.size()  -  2;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	int  pos  =  pathIndices.size()  -  2;	  int    pos    =    pathIndices.size();    	non-compiled	[CE]  	7	None	replace
137	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    &&    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	20	None	replace
138	[BUG]  [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    &&    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	20	None	replace
139	[BUG]  [BUGGY]  }  else  if(last  <  0  ||  last  >  0)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  0  ||  last  >  0)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  0  ||  last  >  0)  {	  }    else    if(last    <    NUMBER_CHAR_DIGIT    ||    last    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	39	None	replace
140	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_DIGIT)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_DIGIT)  {	  }    else    if(last    <    NUMBER_CHAR_DIGIT    ||    last    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	39	None	replace
141	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_DIGIT;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  NUMBER_CHAR_DIGIT;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_CHAR_DIGIT;	  last    =    NUMBER_CHAR_DECIMAL;    	non-compiled	[CE]  	36	None	replace
142	[BUG]  [BUGGY]  last  =  NUMBER_EXP_DIGIT;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  NUMBER_EXP_DIGIT;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_EXP_DIGIT;	  last    =    NUMBER_CHAR_DECIMAL;    	non-compiled	[CE]  	36	None	replace
143	[BUG]  [BUGGY]  last  =  Long.MIN_VALUE  &&  newValue  <  =  Long.MAX_VALUE;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  Long.MIN_VALUE  &&  newValue  <  =  Long.MAX_VALUE;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  Long.MIN_VALUE  &&  newValue  <  =  Long.MAX_VALUE;	  last    =    Long.MIN_VALUE;    	non-compiled	[CE]  	10	None	replace
144	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  PEEKED_LONG)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  PEEKED_LONG)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  PEEKED_LONG)  {	  }    else    if(last    ==    PEEKED_NONE    ||    last    ==    PEEKED_NONE)    {    	non-compiled	[CE]  	41	None	replace
145	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  PEEKED_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  PEEKED_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  PEEKED_SIGN)  {	  }    else    if(last    ==    PEEKED_NONE    ||    last    ==    PEEKED_NONE)    {    	non-compiled	[CE]  	41	None	replace
146	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_DIGIT  +  3;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  NUMBER_CHAR_EXP_DIGIT  +  3;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_CHAR_EXP_DIGIT  +  3;	  last    =    NUMBER_CHAR_EXP_DIGIT    +    1;    	non-compiled	[CE]  	44	None	replace
147	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_DIGIT  +  4;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  NUMBER_CHAR_EXP_DIGIT  +  4;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_CHAR_EXP_DIGIT  +  4;	  last    =    NUMBER_CHAR_EXP_DIGIT    +    1;    	non-compiled	[CE]  	44	None	replace
148	[BUG]  [BUGGY]  }  else  if(last  ==  0)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  0)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  0)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT)    {    	non-compiled	[CE]  	40	None	replace
149	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_SIGN  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_SIGN  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_SIGN  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    <    NUMBER_CHAR_DECIMAL    ||    last    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	14	None	replace
150	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_E  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_E  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_E  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_DIGIT    ||    newValue    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	1	None	replace
151	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_SIGN  ||  last  >  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_SIGN  ||  last  >  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_SIGN  ||  last  >  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    <    NUMBER_CHAR_EXP_SIGN    ||    last    >    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	22	None	replace
152	[BUG]  [BUGGY]  }  else  if(last  >  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  >  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  >  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    <    NUMBER_CHAR_EXP_SIGN    ||    last    >    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	22	None	replace
153	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DIGIT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_DIGIT)    {    	non-compiled	[CE]  	18	None	replace
154	[BUG]  [BUGGY]  last  =  EXP_SIGN;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  EXP_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  EXP_SIGN;	  last    =    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	9	None	replace
155	[BUG]  [BUGGY]  last  =  NUMBER_EXP_SIGN;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  NUMBER_EXP_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_EXP_SIGN;	  last    =    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	9	None	replace
156	[BUG]  [BUGGY]  }  else  if(newValue  ==  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(newValue  ==  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(newValue  ==  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    newValue    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	26	None	replace
157	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    newValue    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	26	None	replace
158	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  &&  last  >  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  &&  last  >  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_EXP_SIGN  &&  last  >  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    <    NUMBER_CHAR_EXP_SIGN    ||    last    >    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	27	None	replace
159	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_DIGIT  +  1;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  NUMBER_CHAR_DIGIT  +  1;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_CHAR_DIGIT  +  1;	  last    =    NUMBER_CHAR_EXP_DIGIT;    	non-compiled	[CE]  	5	None	replace
160	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	16	None	replace
161	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_SIGN  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_SIGN  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_SIGN  ||  last  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	16	None	replace
162	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_NONE  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_NONE  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_NONE  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_DECIMAL    ||    last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	25	None	replace
163	[BUG]  [BUGGY]  }  else  if(value  ==  0  ||  value  ==  0)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  ==  0  ||  value  ==  0)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  0  ||  value  ==  0)  {	  }    else    if(value    ==    NUMBER_CHAR_DECIMAL    ||    value    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	13	None	replace
164	[BUG]  [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_EXP_E  ||  value  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_EXP_E  ||  value  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  NUMBER_CHAR_EXP_E  ||  value  ==  NUMBER_CHAR_DECIMAL)  {	  }    else    if(value    ==    NUMBER_CHAR_DECIMAL    ||    value    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	13	None	replace
165	[BUG]  [BUGGY]  }  else  if(value  ==  PEEKED_NONE  ||  value  ==  PEEKED_NONE)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  ==  PEEKED_NONE  ||  value  ==  PEEKED_NONE)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  PEEKED_NONE  ||  value  ==  PEEKED_NONE)  {	  }    else    if(value    ==    NUMBER_CHAR_DECIMAL    ||    value    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	13	None	replace
166	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  >=  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  >=  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  >=  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last!=    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	23	None	replace
167	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last!=  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last!=  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last!=  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last!=    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	23	None	replace
168	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_NONE)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_NONE)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_NONE)  {	  }    else    if(last    ==    NUMBER_CHAR_NONE    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	15	None	replace
169	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    <    NUMBER_CHAR_EXP_DIGIT    ||    last    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	38	None	replace
170	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_INTEGER)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_INTEGER)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_INTEGER)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_INTEGER    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	3	None	replace
171	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_NONE  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_NONE  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_NONE  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_INTEGER    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	3	None	replace
172	[BUG]  [BUGGY]  int  pos  =  stack.size()  -  3;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  int  pos  =  stack.size()  -  3;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	int  pos  =  stack.size()  -  3;	  int    pos    =    stack.size();    	non-compiled	[CE]  	43	None	replace
173	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_DIGIT    &&    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	2	None	replace
174	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_L)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_L)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_L)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_L)    {    	non-compiled	[CE]  	33	None	replace
175	[BUG]  [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  NUMBER_CHAR_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT    &&    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	17	None	replace
176	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  value  ==  NUMBER_CHAR_DIGIT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  value  ==  NUMBER_CHAR_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  value  ==  NUMBER_CHAR_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT    &&    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	17	None	replace
177	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_SIGN  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_SIGN  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_SIGN  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_SIGN    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	12	None	replace
178	[BUG]  [BUGGY]  }  else  if(last  ==  0  &&  last  ==  0)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  0  &&  last  ==  0)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  0  &&  last  ==  0)  {	  }    else    if(last    ==    0    ||    last    ==    0)    {    	non-compiled	[CE]  	29	None	replace
179	[BUG]  [BUGGY]  }  else  if(value  ==  0  ||  last  ==  0)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  ==  0  ||  last  ==  0)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  0  ||  last  ==  0)  {	  }    else    if(last    ==    0    ||    last    ==    0)    {    	non-compiled	[CE]  	29	None	replace
180	[BUG]  [BUGGY]  }  else  if(last  ==  -1  ||  last  ==  -1)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  -1  ||  last  ==  -1)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  -1  ||  last  ==  -1)  {	  }    else    if(last    ==    0    ||    last    ==    0)    {    	non-compiled	[CE]  	29	None	replace
181	[BUG]  [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	21	None	replace
182	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  -  1;  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN  -  1;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_CHAR_EXP_SIGN  -  1;	  last    =    NUMBER_CHAR_EXP_SIGN;    	non-compiled	[CE]  	4	None	replace
183	[BUG]  [BUGGY]  last  =  STRICT_NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  STRICT_NUMBER_CHAR_EXP_SIGN;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  STRICT_NUMBER_CHAR_EXP_SIGN;	  last    =    NUMBER_CHAR_EXP_E;    	non-compiled	[CE]  	8	None	replace
184	[BUG]  [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_DECIMAL  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_DECIMAL  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  >=  NUMBER_CHAR_DECIMAL  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    <    NUMBER_CHAR_DECIMAL    ||    last    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	14	None	replace
185	[BUG]  [BUGGY]  last  =  EXP_DIGIT;  [CE]  [FE]                            JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  EXP_DIGIT;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  EXP_DIGIT;	  last    =    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	9	None	replace
186	[BUG]  [BUGGY]  last  =  PEEKED_BEGIN_OBJECT;  [CE]  [FE]                              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  PEEKED_BEGIN_OBJECT;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  PEEKED_BEGIN_OBJECT;	  last    =    NUMBER_CHAR_SIGN;    	non-compiled	[CE]  	9	None	replace
187	[BUG]  [BUGGY]  int  pos  =  stack.getLength();  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  int  pos  =  stack.getLength();  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	int  pos  =  stack.getLength();	  int    pos    =    stack.size();    	non-compiled	[CE]  	43	None	replace
188	[BUG]  [BUGGY]  }  else  if(value  <  =  NUMBER_CHAR_DECIMAL  ||  value  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  <  =  NUMBER_CHAR_DECIMAL  ||  value  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  <  =  NUMBER_CHAR_DECIMAL  ||  value  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(value    ==    NUMBER_CHAR_DECIMAL    ||    value    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	13	None	replace
189	[BUG]  [BUGGY]  }  else  if(value  <  =  NUMBER_CHAR_DECIMAL  ||  value  >  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  <  =  NUMBER_CHAR_DECIMAL  ||  value  >  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  <  =  NUMBER_CHAR_DECIMAL  ||  value  >  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(value    ==    NUMBER_CHAR_DECIMAL    ||    value    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	13	None	replace
190	[BUG]  [BUGGY]  }  else  if(value  ==  PEEKED_NONE  ||  value  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  ==  PEEKED_NONE  ||  value  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  PEEKED_NONE  ||  value  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(value    ==    NUMBER_CHAR_DECIMAL    ||    value    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	13	None	replace
191	[BUG]  [BUGGY]  }  else  if(value  <  NUMBER_CHAR_DECIMAL  ||  value  >  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(value  <  NUMBER_CHAR_DECIMAL  ||  value  >  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  <  NUMBER_CHAR_DECIMAL  ||  value  >  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(value    ==    NUMBER_CHAR_DECIMAL    ||    value    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	13	None	replace
192	[BUG]  [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_EXP_DIGIT  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_EXP_DIGIT  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  >=  NUMBER_CHAR_EXP_DIGIT  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    <    NUMBER_CHAR_EXP_DIGIT    ||    last    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	38	None	replace
193	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DECIMAL  ||  last  >  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DECIMAL  ||  last  >  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_DECIMAL  ||  last  >  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    <    NUMBER_CHAR_EXP_SIGN    ||    last    >    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	22	None	replace
194	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_DIGIT  ||  last  >  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_DIGIT  ||  last  >  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_EXP_DIGIT  ||  last  >  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    <    NUMBER_CHAR_EXP_SIGN    ||    last    >    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	22	None	replace
195	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT    &&    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	17	None	replace
196	[BUG]  [BUGGY]  }  else  if(last  ==  PEEKED_NONE  &&  last  ==  PEEKED_NONE)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  PEEKED_NONE  &&  last  ==  PEEKED_NONE)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  PEEKED_NONE  &&  last  ==  PEEKED_NONE)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT    &&    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	17	None	replace
197	[BUG]  [BUGGY]  }  else  if(last!=  NUMBER_CHAR_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last!=  NUMBER_CHAR_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last!=  NUMBER_CHAR_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT    &&    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	17	None	replace
198	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  value  <  =  NUMBER_CHAR_DIGIT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  value  <  =  NUMBER_CHAR_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  value  <  =  NUMBER_CHAR_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT    &&    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	17	None	replace
199	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    <    =    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	30	None	replace
200	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_DECIMAL    ||    last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	25	None	replace
201	[BUG]  [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  >=  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    <    =    NUMBER_CHAR_DECIMAL    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	42	None	replace
202	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_EXP_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_DIGIT    &&    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	2	None	replace
203	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  &&  last!=  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  &&  last!=  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  &&  last!=  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_DIGIT    &&    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	2	None	replace
204	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_DIGIT  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_DIGIT  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_DIGIT  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_DIGIT    ||    newValue    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	1	None	replace
205	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_DIGIT  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_DIGIT  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_EXP_DIGIT  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_DIGIT    ||    newValue    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	1	None	replace
206	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    &&    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	20	None	replace
207	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	21	None	replace
208	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT)    {    	non-compiled	[CE]  	40	None	replace
209	[BUG]  [BUGGY]  }  else  if(last  ==  EXP_DIGIT)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT)    {    	non-compiled	[CE]  	40	None	replace
210	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_DIGIT)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT)    {    	non-compiled	[CE]  	40	None	replace
211	[BUG]  [BUGGY]  }  else  if(last!=  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last!=  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last!=  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT)    {    	non-compiled	[CE]  	40	None	replace
212	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    <    =    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	32	None	replace
213	[BUG]  [BUGGY]  last  =  PEEKED_DOUBLE_QUOTED;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  PEEKED_DOUBLE_QUOTED;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  PEEKED_DOUBLE_QUOTED;	  last    =    newValue;    	non-compiled	[CE]  	6	None	replace
214	[BUG]  [BUGGY]  last  =  MIN_INCOMPLETE_DIGIT;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  MIN_INCOMPLETE_DIGIT;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  MIN_INCOMPLETE_DIGIT;	  last    =    newValue;    	non-compiled	[CE]  	6	None	replace
215	[BUG]  [BUGGY]  last  =  PEEKED_BUFFERED;  [CE]  [FE]                          JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  PEEKED_BUFFERED;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  PEEKED_BUFFERED;	  last    =    newValue;    	non-compiled	[CE]  	6	None	replace
216	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_DECIMAL  +  1;  [CE]  [FE]                      JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  NUMBER_CHAR_DECIMAL  +  1;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_CHAR_DECIMAL  +  1;	  last    =    NUMBER_CHAR_DECIMAL;    	non-compiled	[CE]  	36	None	replace
217	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_DECIMAL  -  1;  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  NUMBER_CHAR_DECIMAL  -  1;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_CHAR_DECIMAL  -  1;	  last    =    NUMBER_CHAR_DECIMAL;    	non-compiled	[CE]  	36	None	replace
218	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_DIGIT  /  1;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  NUMBER_CHAR_EXP_DIGIT  /  1;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_CHAR_EXP_DIGIT  /  1;	  last    =    NUMBER_CHAR_EXP_DIGIT    +    1;    	non-compiled	[CE]  	44	None	replace
219	[BUG]  [BUGGY]  int  pos  =  this.pathIndices.size();  [CE]  [FE]                        JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  int  pos  =  this.pathIndices.size();  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	int  pos  =  this.pathIndices.size();	  int    pos    =    pathIndices.size();    	non-compiled	[CE]  	7	None	replace
220	[BUG]  [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_DIGIT  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  >=  NUMBER_CHAR_DIGIT  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  >=  NUMBER_CHAR_DIGIT  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    <    NUMBER_CHAR_DIGIT    ||    last    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	39	None	replace
221	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DIGIT  ||  last  >  NUMBER_CHAR_EXP_LONG)  {  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DIGIT  ||  last  >  NUMBER_CHAR_EXP_LONG)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_DIGIT  ||  last  >  NUMBER_CHAR_EXP_LONG)  {	  }    else    if(last    <    NUMBER_CHAR_DIGIT    ||    last    >    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	39	None	replace
222	[BUG]  [BUGGY]  last  =  STRICT_NUMBER_CHAR_EXP_DIGIT;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  STRICT_NUMBER_CHAR_EXP_DIGIT;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  STRICT_NUMBER_CHAR_EXP_DIGIT;	  last    =    NUMBER_CHAR_EXP_DIGIT;    	non-compiled	[CE]  	5	None	replace
223	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_L)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_L)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_L)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_L)    {    	non-compiled	[CE]  	33	None	replace
224	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_L)  {  [CE]  [FE]                  JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_L)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_L)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_L)    {    	non-compiled	[CE]  	33	None	replace
225	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_LIGIT;  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  last  =  NUMBER_CHAR_EXP_LIGIT;  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_CHAR_EXP_LIGIT;	  last    =    NUMBER_CHAR_EXP_LONG;    	non-compiled	[CE]  	35	None	replace
226	[BUG]  [BUGGY]  }  else  if(last  ==  EXP_DIGIT  ||  last  ==  PEEKED_NONE)  {  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;      [BUGGY]  }  else  if(last  ==  EXP_DIGIT  ||  last  ==  PEEKED_NONE)  {  [BUGGY]      last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  EXP_DIGIT  ||  last  ==  PEEKED_NONE)  {	  }    else    if(last    ==    PEEKED_NONE    ||    last    ==    PEEKED_NONE)    {    	non-compiled	[CE]  	41	None	replace
