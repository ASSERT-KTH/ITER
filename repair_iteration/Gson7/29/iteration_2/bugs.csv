bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  newValue  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	2	None	replace
2	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	2	None	replace
3	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_INTEGER  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_INTEGER  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_INTEGER  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	2	None	replace
4	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN;  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  last  =  NUMBER_CHAR_EXP_SIGN;  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_CHAR_EXP_SIGN;	      	non-compiled	[CE]  	4	None	replace
5	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_DIGIT;  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  last  =  NUMBER_CHAR_EXP_DIGIT;  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_CHAR_EXP_DIGIT;	      	non-compiled	[CE]  	4	None	replace
6	[BUG]  [BUGGY]  last  =  newValue;  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  last  =  newValue;  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  newValue;	      	non-compiled	[CE]  	4	None	replace
7	[BUG]  [BUGGY]  int  pos  =  pathIndices.size();  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  int  pos  =  pathIndices.size();  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	int  pos  =  pathIndices.size();	      	non-compiled	[CE]  	4	None	replace
8	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_E;  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  last  =  NUMBER_CHAR_EXP_E;  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_CHAR_EXP_E;	      	non-compiled	[CE]  	4	None	replace
9	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_SIGN;  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  last  =  NUMBER_CHAR_SIGN;  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_CHAR_SIGN;	      	non-compiled	[CE]  	4	None	replace
10	[BUG]  [BUGGY]  last  =  Long.MIN_VALUE;  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  last  =  Long.MIN_VALUE;  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  Long.MIN_VALUE;	      	non-compiled	[CE]  	4	None	replace
11	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DECIMAL)  {	  }    else    if(last    ==    NUMBER_CHAR_DECIMAL    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	1	None	replace
12	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_SIGN  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_SIGN  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_SIGN  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_DECIMAL    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	1	None	replace
13	[BUG]  [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_DECIMAL  ||  value  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(value  ==  NUMBER_CHAR_DECIMAL  ||  value  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(value  ==  NUMBER_CHAR_DECIMAL  ||  value  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_DECIMAL    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	1	None	replace
14	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DECIMAL  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DECIMAL  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_DECIMAL  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_DECIMAL    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	1	None	replace
15	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_NONE  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_NONE  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_NONE  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_DECIMAL    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	1	None	replace
16	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	5	None	replace
17	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_DIGIT  &&  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	5	None	replace
18	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DIGIT)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DIGIT)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	5	None	replace
19	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	6	None	replace
20	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	6	None	replace
21	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	6	None	replace
22	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_E)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	6	None	replace
23	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last!=  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last!=  NUMBER_CHAR_EXP_E)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last!=  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	6	None	replace
24	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  &&  last  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	3	None	replace
25	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	3	None	replace
26	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  newValue  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	3	None	replace
27	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_EXP_SIGN  ||  last  >  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	3	None	replace
28	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_DECIMAL)  {	  }    else    if(last    ==    NUMBER_CHAR_DECIMAL    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	1	None	replace
29	[BUG]  [BUGGY]  }  else  if(last  ==  0  ||  last  ==  0)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  ==  0  ||  last  ==  0)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  0  ||  last  ==  0)  {	  }    else    if(last    ==    NUMBER_CHAR_DECIMAL    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	1	None	replace
30	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_DIGIT)    {    	non-compiled	[CE]  	3	None	replace
31	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	5	None	replace
32	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_E)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	6	None	replace
33	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_L)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_L)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_EXP_SIGN  ||  last  ==  NUMBER_CHAR_EXP_L)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_SIGN    ||    last    ==    NUMBER_CHAR_EXP_E)    {    	non-compiled	[CE]  	6	None	replace
34	[BUG]  [BUGGY]  last  =  Long.MAX_VALUE;  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  last  =  Long.MAX_VALUE;  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  Long.MAX_VALUE;	      	non-compiled	[CE]  	4	None	replace
35	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_LONG;  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  last  =  NUMBER_CHAR_EXP_LONG;  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_CHAR_EXP_LONG;	      	non-compiled	[CE]  	4	None	replace
36	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_DECIMAL;  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  last  =  NUMBER_CHAR_DECIMAL;  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_CHAR_DECIMAL;	      	non-compiled	[CE]  	4	None	replace
37	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_EXP_DIGIT  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	2	None	replace
38	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_DIGIT  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  <  NUMBER_CHAR_EXP_DIGIT  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_EXP_DIGIT  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_EXP_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	2	None	replace
39	[BUG]  [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DIGIT  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  <  NUMBER_CHAR_DIGIT  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  NUMBER_CHAR_DIGIT  ||  last  >  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	5	None	replace
40	[BUG]  [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DIGIT)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  ==  NUMBER_CHAR_DIGIT)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  NUMBER_CHAR_DIGIT)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	5	None	replace
41	[BUG]  [BUGGY]  }  else  if(last  ==  PEEKED_NONE  ||  last  ==  PEEKED_NONE)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  ==  PEEKED_NONE  ||  last  ==  PEEKED_NONE)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  ==  PEEKED_NONE  ||  last  ==  PEEKED_NONE)  {	  }    else    if(last    ==    NUMBER_CHAR_DIGIT    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	5	None	replace
42	[BUG]  [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  }  else  if(last  <  =  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	}  else  if(last  <  =  NUMBER_CHAR_DECIMAL  ||  last  ==  NUMBER_CHAR_EXP_SIGN)  {	  }    else    if(last    ==    NUMBER_CHAR_DECIMAL    ||    last    ==    NUMBER_CHAR_EXP_SIGN)    {    	non-compiled	[CE]  	1	None	replace
43	[BUG]  [BUGGY]  int  pos  =  stack.size();  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  int  pos  =  stack.size();  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	int  pos  =  stack.size();	      	non-compiled	[CE]  	4	None	replace
44	[BUG]  [BUGGY]  last  =  NUMBER_CHAR_EXP_DIGIT  +  1;  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    }  else  if  (last  ==  NUMBER_CHAR_DIGIT)  {  if  (value  ==  0)  {  return  PEEKED_NONE;  //  Leading  '0'  prefix  is  not  allowed  (since  it  could  be  octal).  }  long  newValue  =  value  *  10  -  (c  -  '0');  fitsInLong  &=  value  >  MIN_INCOMPLETE_INTEGER  ||  (value  ==  MIN_INCOMPLETE_INTEGER  &&  newValue  <  value);  value  =  newValue;  }  else  if  (last  ==  NUMBER_CHAR_DECIMAL)  {  last  =  NUMBER_CHAR_FRACTION_DIGIT;    [BUGGY]  last  =  NUMBER_CHAR_EXP_DIGIT  +  1;  [BUGGY]    last  =  NUMBER_CHAR_EXP_DIGIT;  }  }  }  if  (last  ==  NUMBER_CHAR_DIGIT  &&  fitsInLong  &&  (value  !=  Long.MIN_VALUE  ||  negative))  {  peekedLong  =  negative  ?  value  :  -value;  pos  +=  i;  return  peeked  =  PEEKED_LONG;  [CLASS]  JsonReader  1  [METHOD]  peekNumber  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  char  c  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.2182178902359924	728	728	3	replace	last  =  NUMBER_CHAR_EXP_DIGIT  +  1;	      	non-compiled	[CE]  	4	None	replace
