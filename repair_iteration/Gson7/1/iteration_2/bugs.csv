bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]    JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]      result  =  Integer.parseInt(peekedString);  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	add	        result  =  Integer.parseInt(peekedString);	  	compilable	  [FE]  JsonSyntaxException  	2	2	add
2	[BUG]  [BUGGY]      result  =  Integer.parseInt(peekedString);  [FE]  JsonSyntaxException  [FE]    JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]      result  =  Integer.parseInt(peekedString);  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	        result  =  Integer.parseInt(peekedString);	  	compilable	  [FE]  JsonSyntaxException  	2	2	add
3	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]      JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]      int  lineNumber  =  pathIndices[stackSize  -  1];  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	add	        int  lineNumber  =  pathIndices[stackSize  -  1];	  	compilable	  [FE]  JsonSyntaxException  	2	2	add
4	[BUG]  [BUGGY]      int  lineNumber  =  pathIndices[stackSize  -  1];  [FE]  JsonSyntaxException  [FE]      JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]      int  lineNumber  =  pathIndices[stackSize  -  1];  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	        int  lineNumber  =  pathIndices[stackSize  -  1];	  	compilable	  [FE]  JsonSyntaxException  	2	2	add
5	[BUG]  [BUGGY]      result  =  nextInt(PEEKED_SINGLE_QUOTED?  '''  :  ' "');  [CE]  empty  character  literal  [FE]        JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]      result  =  nextInt(PEEKED_SINGLE_QUOTED?  '''  :  ' "');  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	        result  =  nextInt(PEEKED_SINGLE_QUOTED?  '''  :  ' "');	  	non-compiled	[CE]  empty  character  literal	2	None	add
6	[BUG]  [BUGGY]      Integer  atLeast(PEEKED_SINGLE_QUOTED);  [CE]  ';'  expected  [FE]          JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]      Integer  atLeast(PEEKED_SINGLE_QUOTED);  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	        Integer  atLeast(PEEKED_SINGLE_QUOTED);	  	non-compiled	[CE]  ';'  expected	2	None	add
7	[BUG]  [BUGGY]      Integer  at  =  nextInt(PEEKED_SINGLE_QUOTED);  [CE]  method  nextInt  in  class  JsonReader  cannot  be  applied  to  given  types;  [FE]            JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]      Integer  at  =  nextInt(PEEKED_SINGLE_QUOTED);  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	        Integer  at  =  nextInt(PEEKED_SINGLE_QUOTED);	  	non-compiled	[CE]  method  nextInt  in  class  JsonReader  cannot  be  applied  to  given  types;	2	None	add
8	[BUG]  [BUGGY]      result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_SINGLE_QUOTED);  [CE]  method  nextInt  in  class  JsonReader  cannot  be  applied  to  given  types;  [FE]              JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]      result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_SINGLE_QUOTED);  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	        result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_SINGLE_QUOTED);	  	non-compiled	[CE]  method  nextInt  in  class  JsonReader  cannot  be  applied  to  given  types;	2	None	add
9	[BUG]  [BUGGY]      int[]  pathIndices  =  peeked.getValues();  [CE]  int  cannot  be  dereferenced  [FE]                JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]      int[]  pathIndices  =  peeked.getValues();  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	        int[]  pathIndices  =  peeked.getValues();	  	non-compiled	[CE]  int  cannot  be  dereferenced	2	None	add
10	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Expected  an  int  but  was     "  +  peek()  +   ",  at  line     "  +  getLineNumber()  +   "  column     "  +  getColumnNumber()  +   "  path     "  +  getPath());  throw  new  IllegalStateException(   "Expected  an  int  but  was   "  +  peek()  +   ",  at  line   "  +  getLineNumber()  +   "  column   "  +  getColumnNumber()  +   "  path   "  +  getPath());  [CE]  unreachable  statement  [FE]    JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]  throw  new  IllegalStateException(   "Expected  an  int  but  was     "  +  peek()  +   ",  at  line     "  +  getLineNumber()  +   "  column     "  +  getColumnNumber()  +   "  path     "  +  getPath());  throw  new  IllegalStateException(   "Expected  an  int  but  was   "  +  peek()  +   ",  at  line   "  +  getLineNumber()  +   "  column   "  +  getColumnNumber()  +   "  path   "  +  getPath());  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	throw    new    IllegalStateException(   "Expected    an    int    but    was       "    +    peek()    +   ",    at    line       "    +    getLineNumber()    +   "    column       "    +    getColumnNumber()    +   "    path       "    +    getPath());    throw  new  IllegalStateException(   "Expected  an  int  but  was   "  +  peek()  +   ",  at  line   "  +  getLineNumber()  +   "  column   "  +  getColumnNumber()  +   "  path   "  +  getPath());	  	non-compiled	[CE]  unreachable  statement	4	None	add
11	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Expected  an  int  but  was     "  +  peek()  +   ",  at  line     "  +  getLineNumber()  +   "  column     "  +  getColumnNumber()  +   "  path     "  +  getPath());  Throw  new  IllegalStateException(   "Expected  an  int  but  was   "  +  peek()  +   ",  at  line   "  +  getLineNumber()  +   "  column   "  +  getColumnNumber()  +   "  path   "  +  getPath());  [CE]  not  a  statement  [FE]      JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]  throw  new  IllegalStateException(   "Expected  an  int  but  was     "  +  peek()  +   ",  at  line     "  +  getLineNumber()  +   "  column     "  +  getColumnNumber()  +   "  path     "  +  getPath());  Throw  new  IllegalStateException(   "Expected  an  int  but  was   "  +  peek()  +   ",  at  line   "  +  getLineNumber()  +   "  column   "  +  getColumnNumber()  +   "  path   "  +  getPath());  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	throw    new    IllegalStateException(   "Expected    an    int    but    was       "    +    peek()    +   ",    at    line       "    +    getLineNumber()    +   "    column       "    +    getColumnNumber()    +   "    path       "    +    getPath());    Throw  new  IllegalStateException(   "Expected  an  int  but  was   "  +  peek()  +   ",  at  line   "  +  getLineNumber()  +   "  column   "  +  getColumnNumber()  +   "  path   "  +  getPath());	  	non-compiled	[CE]  not  a  statement	4	None	add
12	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path   "  +  getPath());  [CE]  illegal  start  of  expression  [FE]    JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]  throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path   "  +  getPath());  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path   "  +  getPath());	  throw    new    IllegalStateException(   "Expected    an    int    but    was       "    +    peek()    +   ",    at    line       "    +    getLineNumber()    +   "    column       "    +    getColumnNumber()    +   "    path       "    +    getPath());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
13	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path "  +  getPath());  [CE]  <identifier>  expected  [FE]      JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path "  +  getPath());  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Throwables.throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path "  +  getPath());	  throw    new    IllegalStateException(   "Expected    an    int    but    was       "    +    peek()    +   ",    at    line       "    +    getLineNumber()    +   "    column       "    +    getColumnNumber()    +   "    path       "    +    getPath());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
14	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  an  int  but  was: "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());  [CE]  illegal  start  of  expression  [FE]        JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]  throw  new  IllegalStateException( "Expected  an  int  but  was: "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	throw  new  IllegalStateException( "Expected  an  int  but  was: "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());	  throw    new    IllegalStateException(   "Expected    an    int    but    was       "    +    getPeek()    +   "    at    line       "    +    getLineNumber()    +   "    column       "    +    getColumnNumber()    +   "    path       "    +    getPath());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
15	[BUG]  [BUGGY]      if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  [CE]  empty  character  literal  [FE]    JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]      if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	        if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }	  	non-compiled	[CE]  empty  character  literal	2	None	add
16	[BUG]  [BUGGY]      if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  throw  new  NumberFormatException( " ");  }  [CE]  empty  character  literal  [FE]      JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]      if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  throw  new  NumberFormatException( " ");  }  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	        if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  throw  new  NumberFormatException( " ");  }	  	non-compiled	[CE]  empty  character  literal	2	None	add
17	[BUG]  [BUGGY]      if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  result  =  Integer.parseInt(peekedString);  }  [CE]  empty  character  literal  [FE]        JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]      if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  result  =  Integer.parseInt(peekedString);  }  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	        if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  result  =  Integer.parseInt(peekedString);  }	  	non-compiled	[CE]  empty  character  literal	2	None	add
18	[BUG]  [BUGGY]      if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  result  =  Integer.parseInt(pe  [CE]  empty  character  literal  [FE]          JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]      if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  result  =  Integer.parseInt(pe  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	        if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  result  =  Integer.parseInt(pe	  	non-compiled	[CE]  empty  character  literal	2	None	add
19	[BUG]  [BUGGY]      if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  result  =  Integer.parseInt(peekedString  [CE]  empty  character  literal  [FE]            JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]      if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  result  =  Integer.parseInt(peekedString  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	        if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  result  =  Integer.parseInt(peekedString	  	non-compiled	[CE]  empty  character  literal	2	None	add
20	[BUG]  [BUGGY]      if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  result  =  Integer.parseInt(peekedString);  [CE]  empty  character  literal  [FE]              JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]      if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  result  =  Integer.parseInt(peekedString);  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	        if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  result  =  Integer.parseInt(peekedString);	  	non-compiled	[CE]  empty  character  literal	2	None	add
21	[BUG]  [BUGGY]  new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());  [CE]  illegal  start  of  expression  [FE]        JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]  new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());	  throw    new    IllegalStateException(   "Expected    an    int    but    was       "    +    getPeek()    +   "    at    line       "    +    getLineNumber()    +   "    column       "    +    getColumnNumber()    +   "    path       "    +    getPath());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
22	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + "  path "  +  getPath());  [CE]  illegal  start  of  expression  [FE]          JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]  throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + "  path "  +  getPath());  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + "  path "  +  getPath());	  throw    new    IllegalStateException(   "Expected    an    int    but    was       "    +    getPeek()    +   "    at    line       "    +    getLineNumber()    +   "    column       "    +    getColumnNumber()    +   "    path       "    +    getPath());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
23	[BUG]  [BUGGY]      if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :  ' "');  }  else  {  peekedString  =  pathIndices[stackSize  -  1];  }  [CE]  empty  character  literal  [FE]    JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]      if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :  ' "');  }  else  {  peekedString  =  pathIndices[stackSize  -  1];  }  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	        if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :  ' "');  }  else  {  peekedString  =  pathIndices[stackSize  -  1];  }	  	non-compiled	[CE]  empty  character  literal	2	None	add
24	[BUG]  [BUGGY]      int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED);  [CE]  illegal  start  of  expression  [FE]      JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]      int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED);  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	        int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED);	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
25	[BUG]  [BUGGY]      if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :  ' "');  }  else  {  peekedString  =  pathIndices[stackSize  -  1];  [CE]  empty  character  literal  [FE]        JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]      if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :  ' "');  }  else  {  peekedString  =  pathIndices[stackSize  -  1];  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	        if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :  ' "');  }  else  {  peekedString  =  pathIndices[stackSize  -  1];	  	non-compiled	[CE]  empty  character  literal	2	None	add
26	[BUG]  [BUGGY]      int  line  =  nextInt(PEEKED_SINGLE_QUOTED);  [CE]  illegal  start  of  expression  [FE]          JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]      int  line  =  nextInt(PEEKED_SINGLE_QUOTED);  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	        int  line  =  nextInt(PEEKED_SINGLE_QUOTED);	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
27	[BUG]  [BUGGY]      if(result  ==  null)  {  peekedString  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :  ' "');  }  [CE]  empty  character  literal  [FE]            JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]      if(result  ==  null)  {  peekedString  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :  ' "');  }  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	        if(result  ==  null)  {  peekedString  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :  ' "');  }	  	non-compiled	[CE]  empty  character  literal	2	None	add
28	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  an  int  but  was: "  +  peek()  + ",  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());  [CE]  illegal  start  of  expression  [FE]    JsonSyntaxException    [CONTEXT]    peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {    [BUGGY]  throw  new  IllegalStateException( "Expected  an  int  but  was: "  +  peek()  + ",  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());  [BUGGY]    +     "  at  line     "  +  getLineNumber()  +     "  column     "  +  getColumnNumber()  +     "  path     "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	throw  new  IllegalStateException( "Expected  an  int  but  was: "  +  peek()  + ",  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());	  throw    new    IllegalStateException(   "Expected    an    int    but    was       "    +    peek()    +   ",    at    line       "    +    getLineNumber()    +   "    column       "    +    getColumnNumber()    +   "    path       "    +    getPath());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
