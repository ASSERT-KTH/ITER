bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  line  =  nextInt(PEEKED_BUFFERED);  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  line  =  nextInt(PEEKED_BUFFERED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  line  =  nextInt(PEEKED_BUFFERED);	          int    line    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
2	[BUG]  [BUGGY]  int  line  =  nextInt(PEEKED_DOUBLE_QUOTED);  [CE]  ']'  expected  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  line  =  nextInt(PEEKED_DOUBLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  line  =  nextInt(PEEKED_DOUBLE_QUOTED);	          int    line    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  ']'  expected	26	None	replace
3	[BUG]  [BUGGY]  int  line  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_BUFFERED);  [CE]  ']'  expected  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  line  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_BUFFERED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  line  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_BUFFERED);	          int    line    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  ']'  expected	26	None	replace
4	[BUG]  [BUGGY]  int  line  =  nextInt(PEEKED_SINGLE_QUOTED,  0);  [CE]  ']'  expected  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  line  =  nextInt(PEEKED_SINGLE_QUOTED,  0);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  line  =  nextInt(PEEKED_SINGLE_QUOTED,  0);	          int    line    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  ']'  expected	26	None	replace
5	[BUG]  [BUGGY]  int  line  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED);  [CE]  ']'  expected  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  line  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  line  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED);	          int    line    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  ']'  expected	26	None	replace
6	[BUG]  [BUGGY]  int  line  =  nextInt(PEEKED_BUFFERED,  PEEKED_SINGLE_QUOTED);  [CE]  ']'  expected  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  line  =  nextInt(PEEKED_BUFFERED,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  line  =  nextInt(PEEKED_BUFFERED,  PEEKED_SINGLE_QUOTED);	          int    line    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  ']'  expected	26	None	replace
7	[BUG]  [BUGGY]  int  line  =  nextInt(PEEKED_DOUBLE_QUOTED,  PEEKED_SINGLE_QUOTED);  [CE]  ']'  expected  [FE]                          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  line  =  nextInt(PEEKED_DOUBLE_QUOTED,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  line  =  nextInt(PEEKED_DOUBLE_QUOTED,  PEEKED_SINGLE_QUOTED);	          int    line    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  ']'  expected	26	None	replace
8	[BUG]  [BUGGY]  new  IllegalStateException( "Expected  an  int  but  was: "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());  [CE]  ']'  expected  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  new  IllegalStateException( "Expected  an  int  but  was: "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	new  IllegalStateException( "Expected  an  int  but  was: "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());	  new    IllegalStateException(   "Expected    an    int    but    was       "    +    getPeek()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  ']'  expected	21	None	replace
9	[BUG]  [BUGGY]  result  =  Integer.parseInt(pathIndices[stackSize  -  1]);  [CE]  empty  character  literal  [FE]    JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  Integer.parseInt(pathIndices[stackSize  -  1]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  Integer.parseInt(pathIndices[stackSize  -  1]);	          result    =    Integer.parseInt(peekedString);    	non-compiled	[CE]  empty  character  literal	2	None	replace
10	[BUG]  [BUGGY]  result  =  Integer.parseInt(path);  [CE]  empty  character  literal  [FE]      JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  Integer.parseInt(path);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  Integer.parseInt(path);	          result    =    Integer.parseInt(peekedString);    	non-compiled	[CE]  empty  character  literal	2	None	replace
11	[BUG]  [BUGGY]  result  =  Integer.parseInt(pathIndices[stackSize]);  [CE]  empty  character  literal  [FE]        JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  Integer.parseInt(pathIndices[stackSize]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  Integer.parseInt(pathIndices[stackSize]);	          result    =    Integer.parseInt(peekedString);    	non-compiled	[CE]  empty  character  literal	2	None	replace
12	[BUG]  [BUGGY]  result  =  Integer.parseInt(pathNames[stackSize  -  1]);  [CE]  empty  character  literal  [FE]          JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  Integer.parseInt(pathNames[stackSize  -  1]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  Integer.parseInt(pathNames[stackSize  -  1]);	          result    =    Integer.parseInt(peekedString);    	non-compiled	[CE]  empty  character  literal	2	None	replace
13	[BUG]  [BUGGY]  result  =  Integer.parseInt(pathNames);  [CE]  empty  character  literal  [FE]            JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  Integer.parseInt(pathNames);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  Integer.parseInt(pathNames);	          result    =    Integer.parseInt(peekedString);    	non-compiled	[CE]  empty  character  literal	2	None	replace
14	[BUG]  [BUGGY]  result  =  Integer.parseInt(peeked);  [CE]  empty  character  literal  [FE]              JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  Integer.parseInt(peeked);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  Integer.parseInt(peeked);	          result    =    Integer.parseInt(peekedString);    	non-compiled	[CE]  empty  character  literal	2	None	replace
15	[BUG]  [BUGGY]  result  =  nextInt(peeked,  PEEKED_SINGLE_QUOTED);  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  nextInt(peeked,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  nextInt(peeked,  PEEKED_SINGLE_QUOTED);	          result    =    nextInt(PEEKED_SINGLE_QUOTED,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  empty  character  literal	8	None	replace
16	[BUG]  [BUGGY]  result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED_NAME,  PEEKED_SINGLE_QUOTED);  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED_NAME,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED_NAME,  PEEKED_SINGLE_QUOTED);	          result    =    nextInt(PEEKED_SINGLE_QUOTED,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  empty  character  literal	8	None	replace
17	[BUG]  [BUGGY]  result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_SINGLE_QUOTED,  PEEKED_BUFFERED);  [CE]  empty  character  literal  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_SINGLE_QUOTED,  PEEKED_BUFFERED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_SINGLE_QUOTED,  PEEKED_BUFFERED);	          result    =    nextInt(PEEKED_SINGLE_QUOTED,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  empty  character  literal	8	None	replace
18	[BUG]  [BUGGY]  result  =  nextInt(peekedString,  PEEKED_SINGLE_QUOTED);  [CE]  empty  character  literal  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  nextInt(peekedString,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  nextInt(peekedString,  PEEKED_SINGLE_QUOTED);	          result    =    nextInt(PEEKED_SINGLE_QUOTED,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  empty  character  literal	8	None	replace
19	[BUG]  [BUGGY]  result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_SINGLE_QUOTED,  pathIndices);  [CE]  empty  character  literal  [FE]                          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_SINGLE_QUOTED,  pathIndices);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_SINGLE_QUOTED,  pathIndices);	          result    =    nextInt(PEEKED_SINGLE_QUOTED,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  empty  character  literal	8	None	replace
20	[BUG]  [BUGGY]  result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_BUFFERED);  [CE]  empty  character  literal  [FE]                            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_BUFFERED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_BUFFERED);	          result    =    nextInt(PEEKED_SINGLE_QUOTED,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  empty  character  literal	8	None	replace
21	[BUG]  [BUGGY]  result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_SINGLE_QUOTED,  pathNames);  [CE]  illegal  start  of  expression  [FE]                              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_SINGLE_QUOTED,  pathNames);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_SINGLE_QUOTED,  pathNames);	          result    =    nextInt(PEEKED_SINGLE_QUOTED,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
22	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  an  int  but  was: "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path "  +  getPath());  [CE]  <identifier>  expected  [FE]        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  an  int  but  was: "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Throwables.throw  new  IllegalStateException( "Expected  an  int  but  was: "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path "  +  getPath());	  throw    new    IllegalStateException(   "Expected    an    int    but    was:   "    +    peek()    +   ",    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  <identifier>  expected	28	None	replace
23	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.getValues();  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int[]  pathIndices  =  stack.getValues();  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int[]  pathIndices  =  stack.getValues();	          int[]    pathIndices    =    peeked.getValues();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
24	[BUG]  [BUGGY]  int[]  pathIndices  =  peeked.getKeys();  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int[]  pathIndices  =  peeked.getKeys();  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int[]  pathIndices  =  peeked.getKeys();	          int[]    pathIndices    =    peeked.getValues();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
25	[BUG]  [BUGGY]  int[]  pathIndices  =  peeked.cloneTree();  [CE]  'else'  without  'if'  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int[]  pathIndices  =  peeked.cloneTree();  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int[]  pathIndices  =  peeked.cloneTree();	          int[]    pathIndices    =    peeked.getValues();    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
26	[BUG]  [BUGGY]  int[]  pathIndices  =  peer.getValues();  [CE]  'else'  without  'if'  [FE]                          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int[]  pathIndices  =  peer.getValues();  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int[]  pathIndices  =  peer.getValues();	          int[]    pathIndices    =    peeked.getValues();    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
27	[BUG]  [BUGGY]  int[]  pathIndices  =  peeked.clone();  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int[]  pathIndices  =  peeked.clone();  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int[]  pathIndices  =  peeked.clone();	          int[]    pathIndices    =    peeked.getValues();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
28	[BUG]  [BUGGY]  int[]  pathIndices  =  peeked.getPaths();  [CE]  'else'  without  'if'  [FE]                              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int[]  pathIndices  =  peeked.getPaths();  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int[]  pathIndices  =  peeked.getPaths();	          int[]    pathIndices    =    peeked.getValues();    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
29	[BUG]  [BUGGY]  pendString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pendString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	pendString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    }    else    {    result    =    Integer.parseInt(pe    	non-compiled	[CE]  empty  character  literal	18	None	replace
30	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    }    else    {    result    =    Integer.parseInt(pe    	non-compiled	[CE]  empty  character  literal	18	None	replace
31	[BUG]  [BUGGY]  peechedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peechedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	peechedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    }    else    {    result    =    Integer.parseInt(pe    	non-compiled	[CE]  empty  character  literal	18	None	replace
32	[BUG]  [BUGGY]  Integer  at  =  nextInt(peeked,  PEEKED_SINGLE_QUOTED);  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Integer  at  =  nextInt(peeked,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Integer  at  =  nextInt(peeked,  PEEKED_SINGLE_QUOTED);	          Integer    at    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
33	[BUG]  [BUGGY]  Integer  at  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_BUFFERED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Integer  at  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_BUFFERED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Integer  at  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_BUFFERED);	          Integer    at    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
34	[BUG]  [BUGGY]  Integer  at  =  nextInt(PEEKED_SINGLE_QUOTED,  peeked);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Integer  at  =  nextInt(PEEKED_SINGLE_QUOTED,  peeked);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Integer  at  =  nextInt(PEEKED_SINGLE_QUOTED,  peeked);	          Integer    at    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
35	[BUG]  [BUGGY]  Integer  at  =  nextInt(PEEKED_BUFFERED,  PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Integer  at  =  nextInt(PEEKED_BUFFERED,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Integer  at  =  nextInt(PEEKED_BUFFERED,  PEEKED_SINGLE_QUOTED);	          Integer    at    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
36	[BUG]  [BUGGY]  Integer  at  =  nextInt(PEEKED_DOUBLE_QUOTED,  PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Integer  at  =  nextInt(PEEKED_DOUBLE_QUOTED,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Integer  at  =  nextInt(PEEKED_DOUBLE_QUOTED,  PEEKED_SINGLE_QUOTED);	          Integer    at    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
37	[BUG]  [BUGGY]  Integer  at  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Integer  at  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Integer  at  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED);	          Integer    at    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
38	[BUG]  [BUGGY]  Integer  at  =  nextInt(peekedString,  PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Integer  at  =  nextInt(peekedString,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Integer  at  =  nextInt(peekedString,  PEEKED_SINGLE_QUOTED);	          Integer    at    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
39	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(p  {  PEEKED_SINGLE_QUOTED?  '''  :' "');  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(p  {  PEEKED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	peekedString  =  nextQuotedValue(p  {  PEEKED_SINGLE_QUOTED?  '''  :' "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    }    else    {    result    =    Integer.parseInt(peekedString    	non-compiled	[CE]  	19	None	replace
40	[BUG]  [BUGGY]  Result  <  Integer>  result  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Result  <  Integer>  result  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Result  <  Integer>  result  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    }    else    {    result    =    Integer.parseInt(peekedString    	non-compiled	[CE]  empty  character  literal	19	None	replace
41	[BUG]  [BUGGY]  int  atLeast(PEEKED_SINGLE_QUOTED);  [CE]  ';'  expected  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  atLeast(PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  atLeast(PEEKED_SINGLE_QUOTED);	          Integer    atLeast(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  ';'  expected	6	None	replace
42	[BUG]  [BUGGY]  Integer  atLeast(PEEKED_SINGLE_QUOTED,  0);  [CE]  ';'  expected  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Integer  atLeast(PEEKED_SINGLE_QUOTED,  0);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Integer  atLeast(PEEKED_SINGLE_QUOTED,  0);	          Integer    atLeast(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  ';'  expected	6	None	replace
43	[BUG]  [BUGGY]  Integer  atLeast(PEEKED_DOUBLE_QUOTED);  [CE]  ';'  expected  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Integer  atLeast(PEEKED_DOUBLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Integer  atLeast(PEEKED_DOUBLE_QUOTED);	          Integer    atLeast(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  ';'  expected	6	None	replace
44	[BUG]  [BUGGY]  Integer  atLeast(PEEKED_BUFFERED);  [CE]  ';'  expected  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Integer  atLeast(PEEKED_BUFFERED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Integer  atLeast(PEEKED_BUFFERED);	          Integer    atLeast(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  ';'  expected	6	None	replace
45	[BUG]  [BUGGY]  Integer  atLeast(pathIndices[stackSize  -  1]);  [CE]  ';'  expected  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Integer  atLeast(pathIndices[stackSize  -  1]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Integer  atLeast(pathIndices[stackSize  -  1]);	          Integer    atLeast(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  ';'  expected	6	None	replace
46	[BUG]  [BUGGY]  Integer  atLeast(PEEKED_SINGLE_QUOTED,  PEEKED_BUFFERED);  [CE]  ';'  expected  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Integer  atLeast(PEEKED_SINGLE_QUOTED,  PEEKED_BUFFERED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Integer  atLeast(PEEKED_SINGLE_QUOTED,  PEEKED_BUFFERED);	          Integer    atLeast(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  ';'  expected	6	None	replace
47	[BUG]  [BUGGY]  buckedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  [CE]  empty  character  literal  [FE]        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  buckedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	buckedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :    '   "');    }    else    {    peekedString    =    pathIndices[stackSize    -    1];    }    	non-compiled	[CE]  empty  character  literal	23	None	replace
48	[BUG]  [BUGGY]  buckedString  =  nextQuotedValue(peeked?  '''  :' "');  [CE]  empty  character  literal  [FE]          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  buckedString  =  nextQuotedValue(peeked?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	buckedString  =  nextQuotedValue(peeked?  '''  :' "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :    '   "');    }    else    {    peekedString    =    pathIndices[stackSize    -    1];    }    	non-compiled	[CE]  empty  character  literal	23	None	replace
49	[BUG]  [BUGGY]  buckedString  =  nextQuotedValue(p  {  PEEKED_SINGLE_QUOTED?  '''  :' "');  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  buckedString  =  nextQuotedValue(p  {  PEEKED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	buckedString  =  nextQuotedValue(p  {  PEEKED_SINGLE_QUOTED?  '''  :' "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :    '   "');    }    else    {    peekedString    =    pathIndices[stackSize    -    1];    }    	non-compiled	[CE]  	23	None	replace
50	[BUG]  [BUGGY]  buckedString  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :' "');  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  buckedString  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	buckedString  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :' "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :    '   "');    }    else    {    peekedString    =    pathIndices[stackSize    -    1];    }    	non-compiled	[CE]  empty  character  literal	23	None	replace
51	[BUG]  [BUGGY]  peedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  [CE]  empty  character  literal  [FE]        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	peedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    }    	non-compiled	[CE]  empty  character  literal	15	None	replace
52	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  an  int  but  was: "  +  getPeek()  + ",  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());  [CE]  'try'  without  'catch'  or  'finally'  [FE]        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  throw  new  IllegalStateException( "Expected  an  int  but  was: "  +  getPeek()  + ",  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	throw  new  IllegalStateException( "Expected  an  int  but  was: "  +  getPeek()  + ",  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());	  throw    new    IllegalStateException(   "Expected    an    int    but    was       "    +    getPeek()    +   ",    at    line       "    +    getLineNumber()    +   "    column       "    +    getColumnNumber()    +   "    path       "    +    getPath());    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
53	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path "  +  getPath());  [CE]  [FE]          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Throwables.throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path "  +  getPath());	  throw    new    IllegalStateException(   "Expected    an    int    but    was       "    +    getPeek()    +   ",    at    line       "    +    getLineNumber()    +   "    column       "    +    getColumnNumber()    +   "    path       "    +    getPath());    	non-compiled	[CE]  	12	None	replace
54	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :' "');  [CE]  [FE]          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	peekedString  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :' "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    }    else    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	16	None	replace
55	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices[stackSize  -  1]  +  1;  [CE]  ')'  expected  [FE]    JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  pathIndices[stackSize  -  1]  +  1;  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  lineNumber  =  pathIndices[stackSize  -  1]  +  1;	          int    lineNumber    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  ')'  expected	4	None	replace
56	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices[stackSize  -  1]++;  [CE]  ')'  expected  [FE]      JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  pathIndices[stackSize  -  1]++;  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  lineNumber  =  pathIndices[stackSize  -  1]++;	          int    lineNumber    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  ')'  expected	4	None	replace
57	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices[pathSize  -  1];  [CE]  ')'  expected  [FE]        JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  pathIndices[pathSize  -  1];  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  lineNumber  =  pathIndices[pathSize  -  1];	          int    lineNumber    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  ')'  expected	4	None	replace
58	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices[stackSize  -  1]  +  2;  [CE]  ')'  expected  [FE]          JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  pathIndices[stackSize  -  1]  +  2;  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  lineNumber  =  pathIndices[stackSize  -  1]  +  2;	          int    lineNumber    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  ')'  expected	4	None	replace
59	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices[peeked.length  -  1];  [CE]  ')'  expected  [FE]            JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  pathIndices[peeked.length  -  1];  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  lineNumber  =  pathIndices[peeked.length  -  1];	          int    lineNumber    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  ')'  expected	4	None	replace
60	[BUG]  [BUGGY]  pendString  =  nextQuotedValue(peeked?  '''  :' "');  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pendString  =  nextQuotedValue(peeked?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	pendString  =  nextQuotedValue(peeked?  '''  :' "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :    '   "');    }    else    {    peekedString    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  	25	None	replace
61	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  an  int  but  was: "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path   "  +  getPath());  [CE]  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  an  int  but  was: "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path   "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Throwables.throw  new  IllegalStateException( "Expected  an  int  but  was: "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path   "  +  getPath());	  throw    new    IllegalStateException(   "Expected    an    int    but    was:   "    +    getPeek()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  	14	None	replace
62	[BUG]  [BUGGY]  peedString  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :' "');  [CE]  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peedString  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	peedString  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :' "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(peekED_SINGLE_QUOTED?    '''    :    '   "');    }    	non-compiled	[CE]  	27	None	replace
63	[BUG]  [BUGGY]  pendString  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :' "');  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pendString  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	pendString  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :' "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(peekED_SINGLE_QUOTED?    '''    :    '   "');    }    	non-compiled	[CE]  empty  character  literal	27	None	replace
64	[BUG]  [BUGGY]  peechedString  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :' "');  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peechedString  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	peechedString  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :' "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(peekED_SINGLE_QUOTED?    '''    :    '   "');    }    	non-compiled	[CE]  empty  character  literal	27	None	replace
65	[BUG]  [BUGGY]  result  =  nextInt(peekedString?  '''  :' "');  [CE]  empty  character  literal  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  nextInt(peekedString?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  nextInt(peekedString?  '''  :' "');	          result    =    nextInt(PEEKED_SINGLE_QUOTED?    '''    :    '   "');    	non-compiled	[CE]  empty  character  literal	5	None	replace
66	[BUG]  [BUGGY]  result  =  nextInt(PEEKED_DOUBLE_QUOTED?  '''  :' "');  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  nextInt(PEEKED_DOUBLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  nextInt(PEEKED_DOUBLE_QUOTED?  '''  :' "');	          result    =    nextInt(PEEKED_SINGLE_QUOTED?    '''    :    '   "');    	non-compiled	[CE]  empty  character  literal	5	None	replace
67	[BUG]  [BUGGY]  result  =  nextInt(PEEKED_BUFFERED?  '''  :' "');  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  nextInt(PEEKED_BUFFERED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  nextInt(PEEKED_BUFFERED?  '''  :' "');	          result    =    nextInt(PEEKED_SINGLE_QUOTED?    '''    :    '   "');    	non-compiled	[CE]  empty  character  literal	5	None	replace
68	[BUG]  [BUGGY]  result  =  nextInt(peeked?  '''  :' "');  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  nextInt(peeked?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  nextInt(peeked?  '''  :' "');	          result    =    nextInt(PEEKED_SINGLE_QUOTED?    '''    :    '   "');    	non-compiled	[CE]  empty  character  literal	5	None	replace
69	[BUG]  [BUGGY]  Integer  at  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Integer  at  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Integer  at  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    }    else    {    result    =    Integer.parseInt(peekedString);    	non-compiled	[CE]  empty  character  literal	20	None	replace
70	[BUG]  [BUGGY]          int  lineNumber  =  pathIndices[stackSize  -  1];  int  lineNumber  =  pathIndices[stackSize  -  1];  [CE]  empty  character  literal  [FE]    JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          int  lineNumber  =  pathIndices[stackSize  -  1];  int  lineNumber  =  pathIndices[stackSize  -  1];  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                int    lineNumber    =    pathIndices[stackSize    -    1];    int  lineNumber  =  pathIndices[stackSize  -  1];	  	non-compiled	[CE]  empty  character  literal	3	None	add
71	[BUG]  [BUGGY]          int  lineNumber  =  pathIndices[stackSize  -  1];  Integer  lineNumber  =  pathIndices[stackSize  -  1];  [CE]  empty  character  literal  [FE]      JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          int  lineNumber  =  pathIndices[stackSize  -  1];  Integer  lineNumber  =  pathIndices[stackSize  -  1];  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                int    lineNumber    =    pathIndices[stackSize    -    1];    Integer  lineNumber  =  pathIndices[stackSize  -  1];	  	non-compiled	[CE]  empty  character  literal	3	None	add
72	[BUG]  [BUGGY]          int  lineNumber  =  pathIndices[stackSize  -  1];  int  lineNumber  =  pathIndices[stackSsize  -  1];  [CE]  empty  character  literal  [FE]        JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          int  lineNumber  =  pathIndices[stackSize  -  1];  int  lineNumber  =  pathIndices[stackSsize  -  1];  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                int    lineNumber    =    pathIndices[stackSize    -    1];    int  lineNumber  =  pathIndices[stackSsize  -  1];	  	non-compiled	[CE]  empty  character  literal	3	None	add
73	[BUG]  [BUGGY]          int  lineNumber  =  pathIndices[stackSize  -  1];  Int  lineNumber  =  pathIndices[stackSize  -  1];  [CE]  empty  character  literal  [FE]          JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          int  lineNumber  =  pathIndices[stackSize  -  1];  Int  lineNumber  =  pathIndices[stackSize  -  1];  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                int    lineNumber    =    pathIndices[stackSize    -    1];    Int  lineNumber  =  pathIndices[stackSize  -  1];	  	non-compiled	[CE]  empty  character  literal	3	None	add
74	[BUG]  [BUGGY]          int  lineNumber  =  pathIndices[stackSize  -  1];  int  lineNumber  =  pathIndices[stackSize  -  1].;  [CE]  <identifier>  expected  [FE]            JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          int  lineNumber  =  pathIndices[stackSize  -  1];  int  lineNumber  =  pathIndices[stackSize  -  1].;  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                int    lineNumber    =    pathIndices[stackSize    -    1];    int  lineNumber  =  pathIndices[stackSize  -  1].;	  	non-compiled	[CE]  <identifier>  expected	3	None	add
75	[BUG]  [BUGGY]          result  =  Integer.parseInt(peekedString);  result  =  Integer.parseInt(peekedString);  [CE]  empty  character  literal  [FE]    JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          result  =  Integer.parseInt(peekedString);  result  =  Integer.parseInt(peekedString);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                result    =    Integer.parseInt(peekedString);    result  =  Integer.parseInt(peekedString);	  	non-compiled	[CE]  empty  character  literal	1	None	add
76	[BUG]  [BUGGY]          result  =  Integer.parseInt(peekedString);  Result  =  Integer.parseInt(peekedString);  [CE]  empty  character  literal  [FE]      JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          result  =  Integer.parseInt(peekedString);  Result  =  Integer.parseInt(peekedString);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                result    =    Integer.parseInt(peekedString);    Result  =  Integer.parseInt(peekedString);	  	non-compiled	[CE]  empty  character  literal	1	None	add
77	[BUG]  [BUGGY]          result  =  Integer.parseInt(peekedString);  Integer  at  line  =  Integer.parseInt(peekedString);  [CE]  [FE]        JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          result  =  Integer.parseInt(peekedString);  Integer  at  line  =  Integer.parseInt(peekedString);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                result    =    Integer.parseInt(peekedString);    Integer  at  line  =  Integer.parseInt(peekedString);	  	non-compiled	[CE]  	1	None	add
78	[BUG]  [BUGGY]          result  =  Integer.parseInt(peekedString);  Integer  result  =  Integer.parseInt(peekedString);  [CE]  empty  character  literal  [FE]          JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          result  =  Integer.parseInt(peekedString);  Integer  result  =  Integer.parseInt(peekedString);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                result    =    Integer.parseInt(peekedString);    Integer  result  =  Integer.parseInt(peekedString);	  	non-compiled	[CE]  empty  character  literal	1	None	add
79	[BUG]  [BUGGY]          result  =  Integer.parseInt(peekedString);  Integer  at  =  Integer.parseInt(peekedString);  [CE]  empty  character  literal  [FE]            JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          result  =  Integer.parseInt(peekedString);  Integer  at  =  Integer.parseInt(peekedString);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                result    =    Integer.parseInt(peekedString);    Integer  at  =  Integer.parseInt(peekedString);	  	non-compiled	[CE]  empty  character  literal	1	None	add
80	[BUG]  [BUGGY]          result  =  Integer.parseInt(peekedString);  =  Integer.parseInt(peekedString);  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          result  =  Integer.parseInt(peekedString);  =  Integer.parseInt(peekedString);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                result    =    Integer.parseInt(peekedString);    =  Integer.parseInt(peekedString);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
81	[BUG]  [BUGGY]          result  =  Integer.parseInt(peekedString);  Integer.parseInt(peekedString);  [CE]  empty  character  literal  [FE]                JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          result  =  Integer.parseInt(peekedString);  Integer.parseInt(peekedString);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                result    =    Integer.parseInt(peekedString);    Integer.parseInt(peekedString);	  	non-compiled	[CE]  empty  character  literal	1	None	add
82	[BUG]  [BUGGY]          result  =  Integer.parseInt(peekedString);  JsonSyntaxException  e  =  nextQuotedValue(peekedString);  [CE]  empty  character  literal  [FE]                  JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          result  =  Integer.parseInt(peekedString);  JsonSyntaxException  e  =  nextQuotedValue(peekedString);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                result    =    Integer.parseInt(peekedString);    JsonSyntaxException  e  =  nextQuotedValue(peekedString);	  	non-compiled	[CE]  empty  character  literal	1	None	add
83	[BUG]  [BUGGY]  int  lineNumber  =  nextInt(PEEKED_DOUBLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  nextInt(PEEKED_DOUBLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  lineNumber  =  nextInt(PEEKED_DOUBLE_QUOTED);	          int    lineNumber    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
84	[BUG]  [BUGGY]  int  lineNumber  =  nextInt(PEEKED_BUFFERED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  nextInt(PEEKED_BUFFERED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  lineNumber  =  nextInt(PEEKED_BUFFERED);	          int    lineNumber    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
85	[BUG]  [BUGGY]  int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_BUFFERED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_BUFFERED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_BUFFERED);	          int    lineNumber    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
86	[BUG]  [BUGGY]  int  lineNumber  =  nextInt(PEEKED_DOUBLE_QUOTED,  PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  nextInt(PEEKED_DOUBLE_QUOTED,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  lineNumber  =  nextInt(PEEKED_DOUBLE_QUOTED,  PEEKED_SINGLE_QUOTED);	          int    lineNumber    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
87	[BUG]  [BUGGY]  int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED);	          int    lineNumber    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
88	[BUG]  [BUGGY]  int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED,  0);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED,  0);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED,  0);	          int    lineNumber    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
89	[BUG]  [BUGGY]  int  lineNumber  =  nextInt(PEEKED_BUFFERED,  PEEKED_SINGLE_QUOTED);  [CE]  not  a  statement  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  nextInt(PEEKED_BUFFERED,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  lineNumber  =  nextInt(PEEKED_BUFFERED,  PEEKED_SINGLE_QUOTED);	          int    lineNumber    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  not  a  statement	24	None	replace
90	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  missing  path "  +  getPath());  [CE]  <identifier>  expected  [FE]          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  missing  path "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Throwables.throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  missing  path "  +  getPath());	  Throwables.throw    new    IllegalStateException(   "Expected    an    int    but    was       "    +    peek()    +   ",    at    line       "    +    getLineNumber()    +   "    column       "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  <identifier>  expected	13	None	replace
91	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path "  +  getString());  [CE]  <identifier>  expected  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path "  +  getString());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Throwables.throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path "  +  getString());	  Throwables.throw    new    IllegalStateException(   "Expected    an    int    but    was       "    +    peek()    +   ",    at    line       "    +    getLineNumber()    +   "    column       "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  <identifier>  expected	13	None	replace
92	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  is  not  a  valid  type "  +  getPath());  [CE]  <identifier>  expected  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  is  not  a  valid  type "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Throwables.throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  is  not  a  valid  type "  +  getPath());	  Throwables.throw    new    IllegalStateException(   "Expected    an    int    but    was       "    +    peek()    +   ",    at    line       "    +    getLineNumber()    +   "    column       "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  <identifier>  expected	13	None	replace
93	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path   "  +  getPath());  [CE]  not  a  statement  [FE]          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path   "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path   "  +  getPath());	  throw    new    IllegalStateException(       "Expected    an    int    but    was           "    +    peek()    +       ",    at    line           "    +    getLineNumber()    +       "    column           "    +    getColumnNumber()    +       "    path           "    +    getPath());    Throw    new    IllegalStateException(       "Expected    an    int    but    was       "    +    peek()    +       ",    at    line       "    +    getLineNumber()    +       "    column       "    +    getColumnNumber()    +       "    path       "    +    getPath());    	non-compiled	[CE]  not  a  statement	11	None	replace
94	[BUG]  [BUGGY]  result  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  [CE]  empty  character  literal  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    }    else    {    result    =    Integer.parseInt(peekedString);    }    	non-compiled	[CE]  empty  character  literal	17	None	replace
95	[BUG]  [BUGGY]  bucket  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  [CE]  empty  character  literal  [FE]        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  bucket  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	bucket  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :    '   "');    }    else    {    peekedString    =    pathIndices[stackSize    -    1];    }    	non-compiled	[CE]  empty  character  literal	23	None	replace
96	[BUG]  [BUGGY]  buckedString  =  nextQuotedValue(pathIndices[stackSize  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  buckedString  =  nextQuotedValue(pathIndices[stackSize  -  1]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	buckedString  =  nextQuotedValue(pathIndices[stackSize  -  1]);	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :    '   "');    }    else    {    peekedString    =    pathIndices[stackSize    -    1];    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	23	None	replace
97	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(pathIndices[stackSize  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(pathIndices[stackSize  -  1]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	peekedString  =  nextQuotedValue(pathIndices[stackSize  -  1]);	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :    '   "');    }    else    {    peekedString    =    pathIndices[stackSize    -    1];    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	23	None	replace
98	[BUG]  [BUGGY]          result  =  Integer.parseInt(peekedString);  JsonSyntaxException  result  =  Integer.parseInt(peekedString);  [CE]  empty  character  literal  [FE]    JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          result  =  Integer.parseInt(peekedString);  JsonSyntaxException  result  =  Integer.parseInt(peekedString);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                result    =    Integer.parseInt(peekedString);    JsonSyntaxException  result  =  Integer.parseInt(peekedString);	  	non-compiled	[CE]  empty  character  literal	1	None	add
99	[BUG]  [BUGGY]          result  =  Integer.parseInt(peekedString);  result  =  Integer.parseInt(peekedString).intValue();  [CE]  empty  character  literal  [FE]      JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          result  =  Integer.parseInt(peekedString);  result  =  Integer.parseInt(peekedString).intValue();  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                result    =    Integer.parseInt(peekedString);    result  =  Integer.parseInt(peekedString).intValue();	  	non-compiled	[CE]  empty  character  literal	1	None	add
100	[BUG]  [BUGGY]  int[]  pathIndices  =  next.getValues();  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int[]  pathIndices  =  next.getValues();  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int[]  pathIndices  =  next.getValues();	          int[]    pathIndices    =    peeked.getValues();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	9	None	replace
101	[BUG]  [BUGGY]  int[]  pathIndices  =  list.getValues();  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int[]  pathIndices  =  list.getValues();  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int[]  pathIndices  =  list.getValues();	          int[]    pathIndices    =    peeked.getValues();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	9	None	replace
102	[BUG]  [BUGGY]  Integer  atLeast(pathIndices,  PEEKED_SINGLE_QUOTED);  [CE]  ';'  expected  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Integer  atLeast(pathIndices,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Integer  atLeast(pathIndices,  PEEKED_SINGLE_QUOTED);	          Integer    atLeast(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  ';'  expected	6	None	replace
103	[BUG]  [BUGGY]  Integer  atLeast(pathIndices.length);  [CE]  ';'  expected  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Integer  atLeast(pathIndices.length);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Integer  atLeast(pathIndices.length);	          Integer    atLeast(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  ';'  expected	6	None	replace
104	[BUG]  [BUGGY]  Integer  atLeast(peeked);  [CE]  ';'  expected  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Integer  atLeast(peeked);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Integer  atLeast(peeked);	          Integer    atLeast(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  ';'  expected	6	None	replace
105	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(peeked?  '''  :' "');  [CE]  empty  character  literal  [FE]          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(peeked?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	peekedString  =  nextQuotedValue(peeked?  '''  :' "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    }    else    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  empty  character  literal	16	None	replace
106	[BUG]  [BUGGY]  result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED);	          result    =    nextInt(PEEKED_SINGLE_QUOTED,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	8	None	replace
107	[BUG]  [BUGGY]  result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED,  PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED,  PEEKED_SINGLE_QUOTED);	          result    =    nextInt(PEEKED_SINGLE_QUOTED,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	8	None	replace
108	[BUG]  [BUGGY]  result  =  nextInt(result,  PEEKED_SINGLE_QUOTED,  PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  nextInt(result,  PEEKED_SINGLE_QUOTED,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  nextInt(result,  PEEKED_SINGLE_QUOTED,  PEEKED_SINGLE_QUOTED);	          result    =    nextInt(PEEKED_SINGLE_QUOTED,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	8	None	replace
109	[BUG]  [BUGGY]  result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED,  pathNames);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED,  pathNames);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED,  pathNames);	          result    =    nextInt(PEEKED_SINGLE_QUOTED,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	8	None	replace
110	[BUG]  [BUGGY]  result  =  nextInt(PEEKED_FALSE?  '''  :' "');  [CE]  empty  character  literal  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  nextInt(PEEKED_FALSE?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  nextInt(PEEKED_FALSE?  '''  :' "');	          result    =    nextInt(PEEKED_SINGLE_QUOTED?    '''    :    '   "');    	non-compiled	[CE]  empty  character  literal	5	None	replace
111	[BUG]  [BUGGY]  result  =  nextInt(PEEKED_LONG?  '''  :' "');  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  nextInt(PEEKED_LONG?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  nextInt(PEEKED_LONG?  '''  :' "');	          result    =    nextInt(PEEKED_SINGLE_QUOTED?    '''    :    '   "');    	non-compiled	[CE]  empty  character  literal	5	None	replace
112	[BUG]  [BUGGY]  pendString  =  nextQuotedValue(pathIndices[stackSize  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pendString  =  nextQuotedValue(pathIndices[stackSize  -  1]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	pendString  =  nextQuotedValue(pathIndices[stackSize  -  1]);	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :    '   "');    }    else    {    peekedString    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	25	None	replace
113	[BUG]  [BUGGY]  result  =  Integer.parseInt(pathNames[stackSize]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]    JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  Integer.parseInt(pathNames[stackSize]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  Integer.parseInt(pathNames[stackSize]);	          result    =    Integer.parseInt(peekedString);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	2	None	replace
114	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices[peeked  -  1];  [CE]  'try'  without  'catch'  or  'finally'  [FE]    JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  pathIndices[peeked  -  1];  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  lineNumber  =  pathIndices[peeked  -  1];	          int    lineNumber    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
115	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices[pathSize  -  1]  +  1;  [CE]  'try'  without  'catch'  or  'finally'  [FE]      JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  pathIndices[pathSize  -  1]  +  1;  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  lineNumber  =  pathIndices[pathSize  -  1]  +  1;	          int    lineNumber    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
116	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices[pathNames.length  -  1];  [CE]  'try'  without  'catch'  or  'finally'  [FE]        JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  pathIndices[pathNames.length  -  1];  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  lineNumber  =  pathIndices[pathNames.length  -  1];	          int    lineNumber    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
117	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices[pathCount  -  1];  [CE]  'try'  without  'catch'  or  'finally'  [FE]          JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  pathIndices[pathCount  -  1];  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  lineNumber  =  pathIndices[pathCount  -  1];	          int    lineNumber    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
118	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices[pathSize  -  1]++;  [CE]  'try'  without  'catch'  or  'finally'  [FE]            JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  pathIndices[pathSize  -  1]++;  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  lineNumber  =  pathIndices[pathSize  -  1]++;	          int    lineNumber    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
119	[BUG]  [BUGGY]  Integer  at  =  nextInt(pathIndices,  PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Integer  at  =  nextInt(pathIndices,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Integer  at  =  nextInt(pathIndices,  PEEKED_SINGLE_QUOTED);	          Integer    at    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
120	[BUG]  [BUGGY]  Integer  at  =  nextInt(PEEKED_SINGLE_QUOTED,  pathIndices);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Integer  at  =  nextInt(PEEKED_SINGLE_QUOTED,  pathIndices);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Integer  at  =  nextInt(PEEKED_SINGLE_QUOTED,  pathIndices);	          Integer    at    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
121	[BUG]  [BUGGY]          int  lineNumber  =  pathIndices[stackSize  -  1];  int  lineNumber  =  pathIndices[stackSize  -  1]  +   "  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  +  getPath());  [CE]  [FE]    JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          int  lineNumber  =  pathIndices[stackSize  -  1];  int  lineNumber  =  pathIndices[stackSize  -  1]  +   "  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                int    lineNumber    =    pathIndices[stackSize    -    1];    int  lineNumber  =  pathIndices[stackSize  -  1]  +   "  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  +  getPath());	  	non-compiled	[CE]  	3	None	add
122	[BUG]  [BUGGY]          int  lineNumber  =  pathIndices[stackSize  -  1];  int  lineNumber  =  pathIndices[stackSize  -  1]  +   "  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber();  [CE]  [FE]      JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          int  lineNumber  =  pathIndices[stackSize  -  1];  int  lineNumber  =  pathIndices[stackSize  -  1]  +   "  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber();  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                int    lineNumber    =    pathIndices[stackSize    -    1];    int  lineNumber  =  pathIndices[stackSize  -  1]  +   "  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber();	  	non-compiled	[CE]  	3	None	add
123	[BUG]  [BUGGY]          int  lineNumber  =  pathIndices[stackSize  -  1];  int  lineNumber  =  pathIndices[stackSize  -  1]  +   "  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber());  [CE]  [FE]        JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          int  lineNumber  =  pathIndices[stackSize  -  1];  int  lineNumber  =  pathIndices[stackSize  -  1]  +   "  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                int    lineNumber    =    pathIndices[stackSize    -    1];    int  lineNumber  =  pathIndices[stackSize  -  1]  +   "  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber());	  	non-compiled	[CE]  	3	None	add
124	[BUG]  [BUGGY]  new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + ",  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());  [CE]  'try'  without  'catch'  or  'finally'  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + ",  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + ",  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());	  new    IllegalStateException(   "Expected    an    int    but    was       "    +    getPeek()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	21	None	replace
125	[BUG]  [BUGGY]  new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + "  path "  +  getPath());  [CE]  'try'  without  'catch'  or  'finally'  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + "  path "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + "  path "  +  getPath());	  new    IllegalStateException(   "Expected    an    int    but    was       "    +    getPeek()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	21	None	replace
126	[BUG]  [BUGGY]  int  lineNumber  =  nextInt(PEEKED_LONG);  [CE]  'try'  without  'catch'  or  'finally'  [FE]          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  nextInt(PEEKED_LONG);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  lineNumber  =  nextInt(PEEKED_LONG);	          int    lineNumber    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
127	[BUG]  [BUGGY]  int  lineNumber  =  nextInt(PEEKED_FALSE);  [CE]  'try'  without  'catch'  or  'finally'  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  nextInt(PEEKED_FALSE);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  lineNumber  =  nextInt(PEEKED_FALSE);	          int    lineNumber    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
128	[BUG]  [BUGGY]  int  lineNumber  =  nextInt(PEEKED_LINE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  nextInt(PEEKED_LINE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  lineNumber  =  nextInt(PEEKED_LINE_QUOTED);	          int    lineNumber    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
129	[BUG]  [BUGGY]  int  lineNumber  =  nextInt(PEEKED_LOAD_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  nextInt(PEEKED_LOAD_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  lineNumber  =  nextInt(PEEKED_LOAD_QUOTED);	          int    lineNumber    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
130	[BUG]  [BUGGY]  if(pathIndices!=  null)  {  if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  if(pathIndices!=  null)  {  if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	if(pathIndices!=  null)  {  if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    }    else    {    result    =    Integer.parseInt(pe    	non-compiled	[CE]  empty  character  literal	18	None	replace
131	[BUG]  [BUGGY]  if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED?  '''  :' "');  }  else  {  result  =  Integer.parseInt(pe  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED?  '''  :' "');  }  else  {  result  =  Integer.parseInt(pe  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED?  '''  :' "');  }  else  {  result  =  Integer.parseInt(pe	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    }    else    {    result    =    Integer.parseInt(pe    	non-compiled	[CE]  empty  character  literal	18	None	replace
132	[BUG]  [BUGGY]  buckedString  =  nextQuotedValue(peekedString?  '''  :' "');  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  buckedString  =  nextQuotedValue(peekedString?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	buckedString  =  nextQuotedValue(peekedString?  '''  :' "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(peekED_SINGLE_QUOTED?    '''    :    '   "');    }    	non-compiled	[CE]  empty  character  literal	27	None	replace
133	[BUG]  [BUGGY]  result  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :' "');  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :' "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(peekED_SINGLE_QUOTED?    '''    :    '   "');    }    	non-compiled	[CE]  empty  character  literal	27	None	replace
134	[BUG]  [BUGGY]  int  line  =  nextInt(PEEKED_LONG);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  line  =  nextInt(PEEKED_LONG);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  line  =  nextInt(PEEKED_LONG);	          int    line    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	26	None	replace
135	[BUG]  [BUGGY]  int  line  =  nextQuotedValue(PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  line  =  nextQuotedValue(PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  line  =  nextQuotedValue(PEEKED_SINGLE_QUOTED);	          int    line    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	26	None	replace
136	[BUG]  [BUGGY]  int  line  =  nextInt(PEEKED_FALSE);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  line  =  nextInt(PEEKED_FALSE);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  line  =  nextInt(PEEKED_FALSE);	          int    line    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	26	None	replace
137	[BUG]  [BUGGY]  Integer  at  =  nextInt(PEEKED_LONG,  PEEKED_SINGLE_QUOTED);  [CE]  illegal  start  of  expression  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Integer  at  =  nextInt(PEEKED_LONG,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	Integer  at  =  nextInt(PEEKED_LONG,  PEEKED_SINGLE_QUOTED);	          Integer    at    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
138	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  an  int  but  was:   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path   "  +  getPath());  [CE]  illegal  start  of  expression  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  throw  new  IllegalStateException( "Expected  an  int  but  was:   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path   "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	throw  new  IllegalStateException( "Expected  an  int  but  was:   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path   "  +  getPath());	  throw    new    IllegalStateException(   "Expected    an    int    but    was:   "    +    getPeek()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
139	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :' "');  }  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :' "');  }  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(peekED_SINGLE_QUOTED?  '''  :' "');  }	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(peekED_SINGLE_QUOTED?    '''    :    '   "');    }    	non-compiled	[CE]  empty  character  literal	27	None	replace
140	[BUG]  [BUGGY]  if(result  ==  null)  {  peekedString  =  nextQuotedValue(peekedString?  '''  : "');  }  else  {  result  =  Integer.parseInt(peekedString);  }  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  if(result  ==  null)  {  peekedString  =  nextQuotedValue(peekedString?  '''  : "');  }  else  {  result  =  Integer.parseInt(peekedString);  }  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	if(result  ==  null)  {  peekedString  =  nextQuotedValue(peekedString?  '''  : "');  }  else  {  result  =  Integer.parseInt(peekedString);  }	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    }    else    {    result    =    Integer.parseInt(peekedString);    	non-compiled	[CE]  empty  character  literal	20	None	replace
141	[BUG]  [BUGGY]  result  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :'   "');  [CE]  empty  character  literal  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :'   "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :'   "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    }    else    {    result    =    Integer.parseInt(peekedString);    	non-compiled	[CE]  empty  character  literal	20	None	replace
142	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :'   "');  }  else  {  result  =  Integer.parseInt(peekedString);  }  [CE]  empty  character  literal  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :'   "');  }  else  {  result  =  Integer.parseInt(peekedString);  }  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :'   "');  }  else  {  result  =  Integer.parseInt(peekedString);  }	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    }    else    {    result    =    Integer.parseInt(peekedString);    	non-compiled	[CE]  empty  character  literal	20	None	replace
143	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  an  int  but  was:   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + ",  column   "  +  getColumnNumber()  + "  path   "  +  getPath());  [CE]  illegal  start  of  expression  [FE]        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  throw  new  IllegalStateException( "Expected  an  int  but  was:   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + ",  column   "  +  getColumnNumber()  + "  path   "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	throw  new  IllegalStateException( "Expected  an  int  but  was:   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + ",  column   "  +  getColumnNumber()  + "  path   "  +  getPath());	  throw    new    IllegalStateException(   "Expected    an    int    but    was:   "    +    peek()    +   ",    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
144	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED;  [CE]  illegal  start  of  expression  [FE]    JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  pathIndices[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED;  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  lineNumber  =  pathIndices[stackSize  -  1]  +  PEEKED_DOUBLE_QUOTED;	          int    lineNumber    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
145	[BUG]  [BUGGY]  new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path   "  +  getPath());  [CE]  illegal  start  of  expression  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path   "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path   "  +  getPath());	  new    IllegalStateException(   "Expected    an    int    but    was       "    +    getPeek()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
146	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  result  =  Integer.parseInt(pe  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  result  =  Integer.parseInt(pe  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  result  =  Integer.parseInt(pe	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    }    else    {    result    =    Integer.parseInt(pe    	non-compiled	[CE]  empty  character  literal	18	None	replace
147	[BUG]  [BUGGY]          result  =  Integer.parseInt(peekedString);  if(result  ==  null)  {  peekedString  =  nextQuotedValue(peeked);  }  else  {  peekedString  =  Integer.parseInt(peekedString);  }  [CE]  empty  character  literal  [FE]    JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          result  =  Integer.parseInt(peekedString);  if(result  ==  null)  {  peekedString  =  nextQuotedValue(peeked);  }  else  {  peekedString  =  Integer.parseInt(peekedString);  }  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                result    =    Integer.parseInt(peekedString);    if(result  ==  null)  {  peekedString  =  nextQuotedValue(peeked);  }  else  {  peekedString  =  Integer.parseInt(peekedString);  }	  	non-compiled	[CE]  empty  character  literal	1	None	add
148	[BUG]  [BUGGY]          result  =  Integer.parseInt(peekedString);  if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED);  }  else  {  peekedString  =  Integer.parseInt(peekedString);  }  [CE]  empty  character  literal  [FE]      JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          result  =  Integer.parseInt(peekedString);  if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED);  }  else  {  peekedString  =  Integer.parseInt(peekedString);  }  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                result    =    Integer.parseInt(peekedString);    if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED);  }  else  {  peekedString  =  Integer.parseInt(peekedString);  }	  	non-compiled	[CE]  empty  character  literal	1	None	add
149	[BUG]  [BUGGY]          result  =  Integer.parseInt(peekedString);  if(result  ==  null)  {  peekedString  =  nextQuotedValue(peeked);  }  else  {  return  Integer.parseInt(peekedString);  }  [CE]  empty  character  literal  [FE]        JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          result  =  Integer.parseInt(peekedString);  if(result  ==  null)  {  peekedString  =  nextQuotedValue(peeked);  }  else  {  return  Integer.parseInt(peekedString);  }  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                result    =    Integer.parseInt(peekedString);    if(result  ==  null)  {  peekedString  =  nextQuotedValue(peeked);  }  else  {  return  Integer.parseInt(peekedString);  }	  	non-compiled	[CE]  empty  character  literal	1	None	add
150	[BUG]  [BUGGY]          result  =  Integer.parseInt(peekedString);  if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED);  }  else  {  peeked  =  Integer.parseInt(peekedString);  }  [CE]  empty  character  literal  [FE]          JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          result  =  Integer.parseInt(peekedString);  if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED);  }  else  {  peeked  =  Integer.parseInt(peekedString);  }  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                result    =    Integer.parseInt(peekedString);    if(result  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED);  }  else  {  peeked  =  Integer.parseInt(peekedString);  }	  	non-compiled	[CE]  empty  character  literal	1	None	add
151	[BUG]  [BUGGY]          result  =  Integer.parseInt(peekedString);  if(result  ==  null)  {  peekedString  =  nextQuotedValue(peeked,  PEEKED_SINGLE_QUOTED);  }  else  {  peekedString  =  Integer.parseInt(peekedString);  }  [CE]  empty  character  literal  [FE]            JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          result  =  Integer.parseInt(peekedString);  if(result  ==  null)  {  peekedString  =  nextQuotedValue(peeked,  PEEKED_SINGLE_QUOTED);  }  else  {  peekedString  =  Integer.parseInt(peekedString);  }  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                result    =    Integer.parseInt(peekedString);    if(result  ==  null)  {  peekedString  =  nextQuotedValue(peeked,  PEEKED_SINGLE_QUOTED);  }  else  {  peekedString  =  Integer.parseInt(peekedString);  }	  	non-compiled	[CE]  empty  character  literal	1	None	add
152	[BUG]  [BUGGY]          result  =  Integer.parseInt(peekedString);  if(result  ==  null)  {  peekedString  =  nextQuotedValue(peeked);  return  Integer.parseInt(peekedString);  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]          result  =  Integer.parseInt(peekedString);  if(result  ==  null)  {  peekedString  =  nextQuotedValue(peeked);  return  Integer.parseInt(peekedString);  }  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	                result    =    Integer.parseInt(peekedString);    if(result  ==  null)  {  peekedString  =  nextQuotedValue(peeked);  return  Integer.parseInt(peekedString);  }	  	non-compiled	[CE]  empty  character  literal	1	None	add
153	[BUG]  [BUGGY]  result  =  Integer.parseInt(pathIndices);  [CE]  illegal  start  of  expression  [FE]    JsonSyntaxException    [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  Integer.parseInt(pathIndices);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  Integer.parseInt(pathIndices);	          result    =    Integer.parseInt(peekedString);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
154	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :'   "');  [CE]  empty  character  literal  [FE]          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :'   "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :'   "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    }    else    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  empty  character  literal	16	None	replace
155	[BUG]  [BUGGY]  buckedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :'   "');  [CE]  empty  character  literal  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  buckedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :'   "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	buckedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :'   "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    }    else    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  empty  character  literal	16	None	replace
156	[BUG]  [BUGGY]  pokeedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :'   "');  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pokeedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :'   "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	pokeedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :'   "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    }    else    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  empty  character  literal	16	None	replace
157	[BUG]  [BUGGY]  pendString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :'   "');  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pendString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :'   "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	pendString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :'   "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    }    else    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  empty  character  literal	16	None	replace
158	[BUG]  [BUGGY]  result  =  nextInt(PEEKED_SINGLE_QUOTED,  pathIndices,  PEEKED_SINGLE_QUOTED);  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  nextInt(PEEKED_SINGLE_QUOTED,  pathIndices,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  nextInt(PEEKED_SINGLE_QUOTED,  pathIndices,  PEEKED_SINGLE_QUOTED);	          result    =    nextInt(PEEKED_SINGLE_QUOTED,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
159	[BUG]  [BUGGY]  result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED,  pathIndices);  [CE]  illegal  start  of  expression  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED,  pathIndices);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	result  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED,  pathIndices);	          result    =    nextInt(PEEKED_SINGLE_QUOTED,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
160	[BUG]  [BUGGY]  int[]  pathIndices  =  stack,  peeked.getValues();  [CE]  ';'  expected  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int[]  pathIndices  =  stack,  peeked.getValues();  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int[]  pathIndices  =  stack,  peeked.getValues();	          int[]    pathIndices    =    peeked.getValues();    	non-compiled	[CE]  ';'  expected	9	None	replace
161	[BUG]  [BUGGY]  int[]  pathIndices  =  peeked.cloneTree().getValues();  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int[]  pathIndices  =  peeked.cloneTree().getValues();  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int[]  pathIndices  =  peeked.cloneTree().getValues();	          int[]    pathIndices    =    peeked.getValues();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
162	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(pathIndices,  PEEKED_SINGLE_QUOTED?  '''  :' "');  [CE]  empty  character  literal  [FE]        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(pathIndices,  PEEKED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	peekedString  =  nextQuotedValue(pathIndices,  PEEKED_SINGLE_QUOTED?  '''  :' "');	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :    '   "');    }    else    {    peekedString    =    pathIndices[stackSize    -    1];    }    	non-compiled	[CE]  empty  character  literal	23	None	replace
163	[BUG]  [BUGGY]  int  line  =  nextInt(PEEKED_LINE_QUOTED);  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  line  =  nextInt(PEEKED_LINE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	int  line  =  nextInt(PEEKED_LINE_QUOTED);	          int    line    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
164	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  peekedString  =  pathIndices[stackSize  -  1]  [CE]  empty  character  literal  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  peekedString  =  pathIndices[stackSize  -  1]  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  peekedString  =  pathIndices[stackSize  -  1]	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :    '   "');    }    else    {    peekedString    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  empty  character  literal	25	None	replace
165	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  peekedString  =  pathIndices[stackSize  -  1];  }  [CE]  empty  character  literal  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  peekedString  =  pathIndices[stackSize  -  1];  }  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  peekedString  =  pathIndices[stackSize  -  1];  }	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :    '   "');    }    else    {    peekedString    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  empty  character  literal	25	None	replace
166	[BUG]  [BUGGY]  if(peeked  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  peekedString  =  pathIndices[stackSize  -  1];  }  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  if(peeked  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  peekedString  =  pathIndices[stackSize  -  1];  }  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	if(peeked  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  peekedString  =  pathIndices[stackSize  -  1];  }	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :    '   "');    }    else    {    peekedString    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  empty  character  literal	25	None	replace
167	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  peekedString  =  pathIndices[stackSize  -  1];  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  peekedString  =  pathIndices[stackSize  -  1];  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	if(peekedString  ==  null)  {  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED?  '''  :' "');  }  else  {  peekedString  =  pathIndices[stackSize  -  1];	          if(result    ==    null)    {    peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :    '   "');    }    else    {    peekedString    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  empty  character  literal	25	None	replace
168	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + ",  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + "  path   "  +  getPath());  [CE]  illegal  start  of  expression  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  result  =  Integer.parseInt(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + ",  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + "  path   "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextInt  [RETURN_TYPE]  int  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  start  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.8164965809277261	1193	1194	3	replace	throw  new  IllegalStateException( "Expected  an  int  but  was   "  +  getPeek()  + ",  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + "  path   "  +  getPath());	  throw    new    IllegalStateException(   "Expected    an    int    but    was       "    +    getPeek()    +   "    at    line   "    +    getLineNumber()    +   ",    column   "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
