bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(p  >=  PEEKED_BUFFER)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  >=  PEEKED_BUFFER)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  >=  PEEKED_BUFFER)  {	  if(p!=    PEEKED_BUFFER)    {    	non-compiled	[CE]  	12	None	replace
2	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p!=    PEEKED_BUFFER)    {    	non-compiled	[CE]  	12	None	replace
3	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE_QUOTE)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE_QUOTE)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE_QUOTE)  {	  if(p!=    PEEKED_BUFFER)    {    	non-compiled	[CE]  	12	None	replace
4	[BUG]  [BUGGY]  if(p  <  =  PEEKED_BUFFER)  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  <  =  PEEKED_BUFFER)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  <  =  PEEKED_BUFFER)  {	  if(p!=    PEEKED_BUFFER)    {    	non-compiled	[CE]  	12	None	replace
5	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p!=    PEEKED_BUFFER)    {    	non-compiled	[CE]  	12	None	replace
6	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_BOOLEAN)  {	  if(p    ==    PEEKED_BUFFER    ||    p    ==    PEEKED_NUMBER)    {    	non-compiled	[CE]  	11	None	replace
7	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_LONG)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_LONG)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_LONG)  {	  if(p    ==    PEEKED_BUFFER    ||    p    ==    PEEKED_NUMBER)    {    	non-compiled	[CE]  	11	None	replace
8	[BUG]  [BUGGY]  if(p!=  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p!=  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p!=  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p    ==    PEEKED_BUFFER    ||    p    ==    PEEKED_NUMBER)    {    	non-compiled	[CE]  	11	None	replace
9	[BUG]  [BUGGY]  if(p!=  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p!=  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p!=  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	14	None	replace
10	[BUG]  [BUGGY]  if(p  >=  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  >=  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  >=  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	14	None	replace
11	[BUG]  [BUGGY]  if(p  <  =  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  <  =  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  <  =  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	14	None	replace
12	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUCKET  ||  p  ==  PEEKED_DOUBLE)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUCKET  ||  p  ==  PEEKED_DOUBLE)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUCKET  ||  p  ==  PEEKED_DOUBLE)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	14	None	replace
13	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p!=  PEEKED_DOUBLE)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p!=  PEEKED_DOUBLE)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p!=  PEEKED_DOUBLE)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	14	None	replace
14	[BUG]  [BUGGY]  if(p  ==  PEEKED_BEFORE  ||  p  ==  PEEKED_DOUBLE)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BEFORE  ||  p  ==  PEEKED_DOUBLE)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BEFORE  ||  p  ==  PEEKED_DOUBLE)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	14	None	replace
15	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  NUMBER_CHAR_FRACTION_DIGIT)  {	  if(p    ==    NUMBER_CHAR_OBJECT)    {    	non-compiled	[CE]  	13	None	replace
16	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_OBJECT  ||  p  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  NUMBER_CHAR_OBJECT  ||  p  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  NUMBER_CHAR_OBJECT  ||  p  ==  NUMBER_CHAR_FRACTION_DIGIT)  {	  if(p    ==    NUMBER_CHAR_OBJECT)    {    	non-compiled	[CE]  	13	None	replace
17	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(p    ==    NUMBER_CHAR_OBJECT)    {    	non-compiled	[CE]  	13	None	replace
18	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_OBJECT  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  NUMBER_CHAR_OBJECT  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  NUMBER_CHAR_OBJECT  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(p    ==    NUMBER_CHAR_OBJECT)    {    	non-compiled	[CE]  	13	None	replace
19	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_FRACTION_DIGIT  ||  p  ==  NUMBER_CHAR_OBJECT)  {  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  NUMBER_CHAR_FRACTION_DIGIT  ||  p  ==  NUMBER_CHAR_OBJECT)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  NUMBER_CHAR_FRACTION_DIGIT  ||  p  ==  NUMBER_CHAR_OBJECT)  {	  if(p    ==    NUMBER_CHAR_OBJECT)    {    	non-compiled	[CE]  	13	None	replace
20	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	15	None	replace
21	[BUG]  [BUGGY]  if(p!=  PEEKED_BUFFERED  ||  p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p!=  PEEKED_BUFFERED  ||  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p!=  PEEKED_BUFFERED  ||  p  ==  PEEKED_BOOLEAN)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	15	None	replace
22	[BUG]  [BUGGY]  if(p  >=  PEEKED_BUFFERED  ||  p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  >=  PEEKED_BUFFERED  ||  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  >=  PEEKED_BUFFERED  ||  p  ==  PEEKED_BOOLEAN)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	15	None	replace
23	[BUG]  [BUGGY]  if(p  <  =  PEEKED_BUFFERED  ||  p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  <  =  PEEKED_BUFFERED  ||  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  <  =  PEEKED_BUFFERED  ||  p  ==  PEEKED_BOOLEAN)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	15	None	replace
24	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	3	None	replace
25	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	3	None	replace
26	[BUG]  [BUGGY]  if(p!=  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p!=  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p!=  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	3	None	replace
27	[BUG]  [BUGGY]  if(p  >=  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  >=  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  >=  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	3	None	replace
28	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	3	None	replace
29	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_NUMBER_QUOTED)  {  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_NUMBER_QUOTED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_NUMBER_QUOTED)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	3	None	replace
30	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_DOUBLE_QUOTED?  '  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_DOUBLE_QUOTED?  '  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_DOUBLE_QUOTED?  '	      	non-compiled	[CE]  	8	None	replace
31	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_DOUBLE_QUOTED?  '''  :  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_DOUBLE_QUOTED?  '''  :  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_DOUBLE_QUOTED?  '''  :	      	non-compiled	[CE]  	8	None	replace
32	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_DOUBLE_QUOTED?  ''  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_DOUBLE_QUOTED?  ''  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_DOUBLE_QUOTED?  ''	      	non-compiled	[CE]  	8	None	replace
33	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peeked  =  PEEKED_BUFFERED;  pathIndices[stackSize  -  1]++;  return  result;  }  [CE]  [FE]                            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peeked  =  PEEKED_BUFFERED;  pathIndices[stackSize  -  1]++;  return  result;  }  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peeked  =  PEEKED_BUFFERED;  pathIndices[stackSize  -  1]++;  return  result;  }	      	non-compiled	[CE]  	8	None	replace
34	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_DOUBLE_QUOTED?  '''  :  '  [CE]  [FE]                              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_DOUBLE_QUOTED?  '''  :  '  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_DOUBLE_QUOTED?  '''  :  '	      	non-compiled	[CE]  	8	None	replace
35	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peeked  =  PEEKED_BUFFERED;  pathIndices[stackSize  -  1]++;  return  null;  }  [CE]  [FE]                                JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peeked  =  PEEKED_BUFFERED;  pathIndices[stackSize  -  1]++;  return  null;  }  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peeked  =  PEEKED_BUFFERED;  pathIndices[stackSize  -  1]++;  return  null;  }	      	non-compiled	[CE]  	8	None	replace
36	[BUG]  [BUGGY]  if(p!=  0)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p!=  0)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p!=  0)  {	  if(p    ==    0)    {    	non-compiled	[CE]  	9	None	replace
37	[BUG]  [BUGGY]  if(p  ==  0  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  0  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  0  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    ==    0)    {    	non-compiled	[CE]  	9	None	replace
38	[BUG]  [BUGGY]  if(p  >=  0)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  >=  0)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  >=  0)  {	  if(p    ==    0)    {    	non-compiled	[CE]  	9	None	replace
39	[BUG]  [BUGGY]  if(p  <  =  0)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  <  =  0)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  <  =  0)  {	  if(p    ==    0)    {    	non-compiled	[CE]  	9	None	replace
40	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTE)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTE)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTE)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_NUMBER)    {    	non-compiled	[CE]  	4	None	replace
41	[BUG]  [BUGGY]  if(p!=  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p!=  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p!=  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE)  {	  if(p    ==    PEEKED_BUFFER    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	10	None	replace
42	[BUG]  [BUGGY]  if(p  >=  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  >=  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  >=  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE)  {	  if(p    ==    PEEKED_BUFFER    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	10	None	replace
43	[BUG]  [BUGGY]  if(p  <  =  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  <  =  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  <  =  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE)  {	  if(p    ==    PEEKED_BUFFER    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	10	None	replace
44	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER  ||  p!=  PEEKED_DOUBLE)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFER  ||  p!=  PEEKED_DOUBLE)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFER  ||  p!=  PEEKED_DOUBLE)  {	  if(p    ==    PEEKED_BUFFER    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	10	None	replace
45	[BUG]  [BUGGY]  if(p  <  PEEKED_BUFFER  ||  p  >  PEEKED_DOUBLE)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  <  PEEKED_BUFFER  ||  p  >  PEEKED_DOUBLE)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  <  PEEKED_BUFFER  ||  p  >  PEEKED_DOUBLE)  {	  if(p    ==    PEEKED_BUFFER    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	10	None	replace
46	[BUG]  [BUGGY]  if(p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_DOUBLE)  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_DOUBLE)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_DOUBLE)  {	  if(p    ==    PEEKED_BUFFER    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	10	None	replace
47	[BUG]  [BUGGY]  if(p  <  =  PEEKED_BUFFERED)  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  <  =  PEEKED_BUFFERED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  <  =  PEEKED_BUFFERED)  {	  if(p    >=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	7	None	replace
48	[BUG]  [BUGGY]  if(p  >  PEEKED_BUFFERED)  {  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  >  PEEKED_BUFFERED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  >  PEEKED_BUFFERED)  {	  if(p    >=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	7	None	replace
49	[BUG]  [BUGGY]  if(pos  >=  PEEKED_BUFFERED)  {  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(pos  >=  PEEKED_BUFFERED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(pos  >=  PEEKED_BUFFERED)  {	  if(p    >=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	7	None	replace
50	[BUG]  [BUGGY]  if(p  ==  MIN_INCOMPLETE_INTEGER  ||  p  ==  PEEKED_BUFFER)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  MIN_INCOMPLETE_INTEGER  ||  p  ==  PEEKED_BUFFER)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  MIN_INCOMPLETE_INTEGER  ||  p  ==  PEEKED_BUFFER)  {	  if(p    ==    PEEKED_BUFFER)    {    	non-compiled	[CE]  	2	None	replace
51	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_E  ||  p  ==  PEEKED_BUFFER)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_E  ||  p  ==  PEEKED_BUFFER)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  NUMBER_CHAR_EXP_E  ||  p  ==  PEEKED_BUFFER)  {	  if(p    ==    PEEKED_BUFFER)    {    	non-compiled	[CE]  	2	None	replace
52	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p!=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p!=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p!=  PEEKED_DOUBLE_QUOTED)  {	  if(p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	1	None	replace
53	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  NUMBER_CHAR_EXP_SIGN)  {	  if(p    ==    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	5	None	replace
54	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  NUMBER_CHAR_FRACTION_DIGIT)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  NUMBER_CHAR_FRACTION_DIGIT)  {	  if(p    ==    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	5	None	replace
55	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_FRACTION_DIGIT  ||  p  ==  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  NUMBER_CHAR_FRACTION_DIGIT  ||  p  ==  NUMBER_CHAR_SIGN)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  NUMBER_CHAR_FRACTION_DIGIT  ||  p  ==  NUMBER_CHAR_SIGN)  {	  if(p    ==    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	5	None	replace
56	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_BEGIN_ARRAY)  {	  if(p    ==    PEEKED_BUFFER    ||    p    ==    PEEKED_NUMBER)    {    	non-compiled	[CE]  	11	None	replace
57	[BUG]  [BUGGY]  if(p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_BUFFER)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_BUFFER)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_BUFFER)  {	  if(p    ==    PEEKED_BUFFER    ||    p    ==    PEEKED_NUMBER)    {    	non-compiled	[CE]  	11	None	replace
58	[BUG]  [BUGGY]  if(p  ==  MIN_INCOMPLETE_INTEGER)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  MIN_INCOMPLETE_INTEGER)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  MIN_INCOMPLETE_INTEGER)  {	  if(p    ==    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	5	None	replace
59	[BUG]  [BUGGY]  if(p  ==  MIN_INCOMPLETE_INTEGER  ||  p  ==  NUMBER_CHAR_SIGN)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  MIN_INCOMPLETE_INTEGER  ||  p  ==  NUMBER_CHAR_SIGN)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  MIN_INCOMPLETE_INTEGER  ||  p  ==  NUMBER_CHAR_SIGN)  {	  if(p    ==    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	5	None	replace
60	[BUG]  [BUGGY]  int  bufferLength  =  stack.size();  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  int  bufferLength  =  stack.size();  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	int  bufferLength  =  stack.size();	      	non-compiled	[CE]  	8	None	replace
61	[BUG]  [BUGGY]  int  pos  =  stack.size();  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  int  pos  =  stack.size();  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	int  pos  =  stack.size();	      	non-compiled	[CE]  	8	None	replace
62	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(buffer,  0,  pathIndices.length);  [CE]  [FE]                          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(buffer,  0,  pathIndices.length);  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	IntBuffer  buffer  =  new  IntBuffer(buffer,  0,  pathIndices.length);	      	non-compiled	[CE]  	8	None	replace
63	[BUG]  [BUGGY]  StringBuffer  buffer  =  new  StringBuffer(buffer,  0,  pathIndices.length);  [CE]  [FE]                            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  StringBuffer  buffer  =  new  StringBuffer(buffer,  0,  pathIndices.length);  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	StringBuffer  buffer  =  new  StringBuffer(buffer,  0,  pathIndices.length);	      	non-compiled	[CE]  	8	None	replace
64	[BUG]  [BUGGY]  IntBuffer  buf  =  new  IntBuffer(buffer,  pos  +  1,  pathIndices.length);  [CE]  [FE]                              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  IntBuffer  buf  =  new  IntBuffer(buffer,  pos  +  1,  pathIndices.length);  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	IntBuffer  buf  =  new  IntBuffer(buffer,  pos  +  1,  pathIndices.length);	      	non-compiled	[CE]  	8	None	replace
65	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(buffer,  pos  +  1,  pathIndices.length);  [CE]  [FE]                                JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(buffer,  pos  +  1,  pathIndices.length);  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	IntBuffer  buffer  =  new  IntBuffer(buffer,  pos  +  1,  pathIndices.length);	      	non-compiled	[CE]  	8	None	replace
66	[BUG]  [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(buffer,  pos,  pathNames.length);  [CE]  [FE]                                  JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  IntBuffer  buffer  =  new  IntBuffer(buffer,  pos,  pathNames.length);  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	IntBuffer  buffer  =  new  IntBuffer(buffer,  pos,  pathNames.length);	      	non-compiled	[CE]  	8	None	replace
67	[BUG]  [BUGGY]  if(p  ==  PEEKED_OBJECT  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_OBJECT  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_OBJECT  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	1	None	replace
68	[BUG]  [BUGGY]  if(p  ==  PEEKED_OBJECT)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_OBJECT)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_OBJECT)  {	  if(p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	1	None	replace
69	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_OBJECT)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_OBJECT)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_OBJECT)  {	  if(p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	1	None	replace
70	[BUG]  [BUGGY]  if(p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	14	None	replace
71	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_BEGIN_ARRAY)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	14	None	replace
72	[BUG]  [BUGGY]  if(p  ==  PEEKED_BEGIN_ARRAY)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BEGIN_ARRAY)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BEGIN_ARRAY)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	14	None	replace
73	[BUG]  [BUGGY]  if(p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BEGIN_ARRAY  ||  p  ==  PEEKED_BOOLEAN)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	14	None	replace
74	[BUG]  [BUGGY]  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BACKSLASH  ||  p  ==  PEEKED_BOOLEAN)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	15	None	replace
75	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	3	None	replace
76	[BUG]  [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BUFFER)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BUFFER)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BUFFER)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	3	None	replace
77	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_DOUBLE)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_DOUBLE)  {	  if(p    ==    PEEKED_BUFFER)    {    	non-compiled	[CE]  	2	None	replace
78	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_DECIMAL)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  NUMBER_CHAR_DECIMAL)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  NUMBER_CHAR_DECIMAL)  {	  if(p    ==    NUMBER_CHAR_OBJECT)    {    	non-compiled	[CE]  	13	None	replace
79	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_DECIMAL  ||  p  ==  NUMBER_CHAR_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  NUMBER_CHAR_DECIMAL  ||  p  ==  NUMBER_CHAR_OBJECT)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  NUMBER_CHAR_DECIMAL  ||  p  ==  NUMBER_CHAR_OBJECT)  {	  if(p    ==    NUMBER_CHAR_OBJECT)    {    	non-compiled	[CE]  	13	None	replace
80	[BUG]  [BUGGY]  if(p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BOOLEAN)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BOOLEAN)  {	  if(p!=    PEEKED_BUFFER)    {    	non-compiled	[CE]  	12	None	replace
81	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedNumberLength  ==  0)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  0  ||  peekedNumberLength  ==  0)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  0  ||  peekedNumberLength  ==  0)  {	  if(p    ==    0)    {    	non-compiled	[CE]  	9	None	replace
82	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedNumberLength!=  0)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  0  ||  peekedNumberLength!=  0)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  0  ||  peekedNumberLength!=  0)  {	  if(p    ==    0)    {    	non-compiled	[CE]  	9	None	replace
83	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedNumberLength  >=  0)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  0  ||  peekedNumberLength  >=  0)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  0  ||  peekedNumberLength  >=  0)  {	  if(p    ==    0)    {    	non-compiled	[CE]  	9	None	replace
84	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_BOTH)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_BOTH)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFER  ||  p  ==  PEEKED_BOTH)  {	  if(p    ==    PEEKED_BUFFER    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	10	None	replace
85	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUCKET)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUCKET)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUCKET)  {	  if(p!=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	6	None	replace
86	[BUG]  [BUGGY]  if(p  <  =  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  <  =  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  <  =  PEEKED_BUFFER  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p!=    PEEKED_BUFFER)    {    	non-compiled	[CE]  	12	None	replace
87	[BUG]  [BUGGY]  if(p  <  =  PEEKED_BUFFER  ||  p  >=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  <  =  PEEKED_BUFFER  ||  p  >=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  <  =  PEEKED_BUFFER  ||  p  >=  PEEKED_DOUBLE_QUOTED)  {	  if(p!=    PEEKED_BUFFER)    {    	non-compiled	[CE]  	12	None	replace
88	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_E)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  NUMBER_CHAR_EXP_E)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  NUMBER_CHAR_EXP_E)  {	  if(p    ==    PEEKED_BUFFER)    {    	non-compiled	[CE]  	2	None	replace
89	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_OBJECT  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  NUMBER_CHAR_OBJECT  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  NUMBER_CHAR_OBJECT  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    ==    NUMBER_CHAR_OBJECT)    {    	non-compiled	[CE]  	13	None	replace
90	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_BEGIN_OBJECT)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_BEGIN_OBJECT)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_BEGIN_OBJECT)  {	  if(p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	1	None	replace
91	[BUG]  [BUGGY]  if(p!=  PEEKED_BUFFERED  ||  p  ==  PEEKED_BEGIN_OBJECT)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p!=  PEEKED_BUFFERED  ||  p  ==  PEEKED_BEGIN_OBJECT)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p!=  PEEKED_BUFFERED  ||  p  ==  PEEKED_BEGIN_OBJECT)  {	  if(p!=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	6	None	replace
92	[BUG]  [BUGGY]  if(p  >>  PEEKED_BUFFERED)  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  >>  PEEKED_BUFFERED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  >>  PEEKED_BUFFERED)  {	  if(p    >=    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	7	None	replace
93	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DECIMAL)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DECIMAL)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DECIMAL)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	3	None	replace
94	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_LONG)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_LONG)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_LONG)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	3	None	replace
95	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_SIGN  &&  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  NUMBER_CHAR_SIGN  &&  p  ==  PEEKED_BUFFERED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  NUMBER_CHAR_SIGN  &&  p  ==  PEEKED_BUFFERED)  {	  if(p    ==    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	5	None	replace
96	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_SIGN  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  NUMBER_CHAR_SIGN  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  NUMBER_CHAR_SIGN  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p    ==    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	5	None	replace
97	[BUG]  [BUGGY]  if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                    JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  NUMBER_CHAR_SIGN  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p    ==    NUMBER_CHAR_SIGN)    {    	non-compiled	[CE]  	5	None	replace
98	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peeked  =  nextQuotedValue(p  ==  PEEKED_DOUBLE_QUOTED?  '''  :  '  [CE]  [FE]                      JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peeked  =  nextQuotedValue(p  ==  PEEKED_DOUBLE_QUOTED?  '''  :  '  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peeked  =  nextQuotedValue(p  ==  PEEKED_DOUBLE_QUOTED?  '''  :  '	      	non-compiled	[CE]  	8	None	replace
99	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peeked  =  nextQuotedValue(p  ==  PEEKED_DOUBLE_QUOTED?  '''  :  [CE]  [FE]                        JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peeked  =  nextQuotedValue(p  ==  PEEKED_DOUBLE_QUOTED?  '''  :  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peeked  =  nextQuotedValue(p  ==  PEEKED_DOUBLE_QUOTED?  '''  :	      	non-compiled	[CE]  	8	None	replace
100	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE  ||  p  ==  PEEKED_BUFFER)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_DOUBLE  ||  p  ==  PEEKED_BUFFER)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_DOUBLE  ||  p  ==  PEEKED_BUFFER)  {	  if(p    ==    PEEKED_BUFFER    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	10	None	replace
101	[BUG]  [BUGGY]  if(p  ==  PEEKED_BIGINT  ||  p  ==  PEEKED_DOUBLE)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BIGINT  ||  p  ==  PEEKED_DOUBLE)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BIGINT  ||  p  ==  PEEKED_DOUBLE)  {	  if(p    ==    PEEKED_BUFFER    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	10	None	replace
102	[BUG]  [BUGGY]  if(p  ==  0  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  0  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  0  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  if(p    ==    0)    {    	non-compiled	[CE]  	9	None	replace
103	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedNumberLength!=  pathIndices.length)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  0  ||  peekedNumberLength!=  pathIndices.length)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  0  ||  peekedNumberLength!=  pathIndices.length)  {	  if(p    ==    0)    {    	non-compiled	[CE]  	9	None	replace
104	[BUG]  [BUGGY]  if(p  ==  0  ||  peekedNumberLength  >  0)  {  [CE]  [FE]            JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  0  ||  peekedNumberLength  >  0)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  0  ||  peekedNumberLength  >  0)  {	  if(p    ==    0)    {    	non-compiled	[CE]  	9	None	replace
105	[BUG]  [BUGGY]  if(p  ==  0  ||  p  ==  Integer.MIN_VALUE)  {  [CE]  [FE]              JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  0  ||  p  ==  Integer.MIN_VALUE)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  0  ||  p  ==  Integer.MIN_VALUE)  {	  if(p    ==    0)    {    	non-compiled	[CE]  	9	None	replace
106	[BUG]  [BUGGY]  if(p  ==  PEEKED_BIGINT  ||  p  ==  PEEKED_BOOLEAN)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BIGINT  ||  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BIGINT  ||  p  ==  PEEKED_BOOLEAN)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	15	None	replace
107	[BUG]  [BUGGY]  if(p  ==  PEEKED_DOUBLE  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]        JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_DOUBLE  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_DOUBLE  ||  p  ==  PEEKED_BUFFERED)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	14	None	replace
108	[BUG]  [BUGGY]  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_DOUBLE)  {  [CE]  [FE]          JsonSyntaxException    [CONTEXT]    if  (p  ==  PEEKED_NONE)  {  p  =  doPeek();  }  if  (p  ==  PEEKED_LONG)  {  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  peekedLong;  }    [BUGGY]  if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_DOUBLE)  {  [BUGGY]    peekedString  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '   "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.23570226039551587	951	951	3	replace	if(p  ==  PEEKED_BUFFERED  &&  p  ==  PEEKED_DOUBLE)  {	  if(p    ==    PEEKED_BUFFERED    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  	14	None	replace
