bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  lineNumber  =  stack[pathIndices.length  -  1];  [CE]  ';'  expected  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  stack[pathIndices.length  -  1];  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  stack[pathIndices.length  -  1];	  int    lineNumber    =    stack[stackSize    -    1];    	non-compiled	[CE]  ';'  expected	15	None	replace
2	[BUG]  [BUGGY]  int  lineNumber  =  stack[stackSize  -  1]  +  1;  [CE]  ';'  expected  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  stack[stackSize  -  1]  +  1;  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  stack[stackSize  -  1]  +  1;	  int    lineNumber    =    stack[stackSize    -    1];    	non-compiled	[CE]  ';'  expected	15	None	replace
3	[BUG]  [BUGGY]  int  lineNumber  =  paths[stackSize  -  1];  [CE]  ';'  expected  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  paths[stackSize  -  1];  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  paths[stackSize  -  1];	  int    lineNumber    =    stack[stackSize    -    1];    	non-compiled	[CE]  ';'  expected	15	None	replace
4	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path   "  +  getPath());  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path   "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path   "  +  getPath());	  throw    new    IllegalStateException(   "Expected    a    long    but    was       "    +    getLineNumber()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   ",    path   "    +    getPath());    	non-compiled	[CE]  	25	None	replace
5	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  expected: "  +  getPath());  [CE]  ';'  expected  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  expected: "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  expected: "  +  getPath());	  throw    new    IllegalStateException(   "Expected    a    long    but    was       "    +    getLineNumber()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   ",    path   "    +    getPath());    	non-compiled	[CE]  ';'  expected	25	None	replace
6	[BUG]  [BUGGY]  int  lineNumber  =  nextInt(PEEKED_DOUBLE_QUOTED);  [CE]  ';'  expected  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  nextInt(PEEKED_DOUBLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  nextInt(PEEKED_DOUBLE_QUOTED);	  int    lineNumber    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  ';'  expected	23	None	replace
7	[BUG]  [BUGGY]  int  lineNumber  =  nextInt(PEEKED_BUFFERED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  nextInt(PEEKED_BUFFERED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  nextInt(PEEKED_BUFFERED);	  int    lineNumber    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	23	None	replace
8	[BUG]  [BUGGY]  int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED,  0);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED,  0);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED,  0);	  int    lineNumber    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	23	None	replace
9	[BUG]  [BUGGY]  int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED);	  int    lineNumber    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	23	None	replace
10	[BUG]  [BUGGY]  int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED_NAME);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED_NAME);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED_NAME);	  int    lineNumber    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	23	None	replace
11	[BUG]  [BUGGY]  int  lineNumber  =  nextInt(PEEKED_LONG);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  nextInt(PEEKED_LONG);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  nextInt(PEEKED_LONG);	  int    lineNumber    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	23	None	replace
12	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(p);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(p);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(p);	  peekedString    =    nextQuotedValue(peeked);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	16	None	replace
13	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(peeked,  pathIndices[stackSize  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(peeked,  pathIndices[stackSize  -  1]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(peeked,  pathIndices[stackSize  -  1]);	  peekedString    =    nextQuotedValue(peeked);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	16	None	replace
14	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED);	  peekedString    =    nextQuotedValue(peeked);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	16	None	replace
15	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(pathIndices[stackSize  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(pathIndices[stackSize  -  1]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(pathIndices[stackSize  -  1]);	  peekedString    =    nextQuotedValue(peeked);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	16	None	replace
16	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices[stackSize  -  1]  +  1;  [CE]  'try'  without  'catch'  or  'finally'  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  pathIndices[stackSize  -  1]  +  1;  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  pathIndices[stackSize  -  1]  +  1;	  int    lineNumber    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
17	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices[stackSize  -  1]++;  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  pathIndices[stackSize  -  1]++;  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  pathIndices[stackSize  -  1]++;	  int    lineNumber    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
18	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices[pathSize  -  1];  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  pathIndices[pathSize  -  1];  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  pathIndices[pathSize  -  1];	  int    lineNumber    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
19	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices[peeked  -  1];  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  pathIndices[peeked  -  1];  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  pathIndices[peeked  -  1];	  int    lineNumber    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
20	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices[stackSize  -  1]  +  2;  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  pathIndices[stackSize  -  1]  +  2;  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  pathIndices[stackSize  -  1]  +  2;	  int    lineNumber    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
21	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  expected: "  +  getPath());  [CE]  'try'  without  'catch'  or  'finally'  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  expected: "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  expected: "  +  getPath());	  throw    new    IllegalStateException(   "Expected    a    long    but    was       "    +    getPeek()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   ",    path   "    +    getPath());    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	26	None	replace
22	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  missing  line "  +  getPath());  [CE]  'try'  without  'catch'  or  'finally'  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  missing  line "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  missing  line "  +  getPath());	  throw    new    IllegalStateException(   "Expected    a    long    but    was       "    +    getPeek()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   ",    path   "    +    getPath());    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	26	None	replace
23	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(peeked[i]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(peeked[i]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(peeked[i]);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(peeked[i]);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	13	None	replace
24	[BUG]  [BUGGY]  pendString  =  nextQuotedValue(peeked[i]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pendString  =  nextQuotedValue(peeked[i]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pendString  =  nextQuotedValue(peeked[i]);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(peeked[i]);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	13	None	replace
25	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(pathIndices[i]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(pathIndices[i]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(pathIndices[i]);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(peeked[i]);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	13	None	replace
26	[BUG]  [BUGGY]  peeked  =  nextQuotedValue(peeked[i]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peeked  =  nextQuotedValue(peeked[i]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peeked  =  nextQuotedValue(peeked[i]);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(peeked[i]);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	13	None	replace
27	[BUG]  [BUGGY]  pokedString  =  nextQuotedValue(peeked[i]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pokedString  =  nextQuotedValue(peeked[i]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pokedString  =  nextQuotedValue(peeked[i]);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(peeked[i]);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	13	None	replace
28	[BUG]  [BUGGY]  pokeedString  =  nextQuotedValue(peeked[i]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pokeedString  =  nextQuotedValue(peeked[i]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pokeedString  =  nextQuotedValue(peeked[i]);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(peeked[i]);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	13	None	replace
29	[BUG]  [BUGGY]  pendString  =  nextQuotedValue(peeked);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pendString  =  nextQuotedValue(peeked);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pendString  =  nextQuotedValue(peeked);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(peeked);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
30	[BUG]  [BUGGY]  peeked  =  nextQuotedValue(peeked);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peeked  =  nextQuotedValue(peeked);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peeked  =  nextQuotedValue(peeked);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(peeked);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
31	[BUG]  [BUGGY]  pokedString  =  nextQuotedValue(peeked);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pokedString  =  nextQuotedValue(peeked);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pokedString  =  nextQuotedValue(peeked);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(peeked);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
32	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  long  but  was   "  +  getPeek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path   "  +  getPath());  [CE]  'try'  without  'catch'  or  'finally'  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  throw  new  IllegalStateException( "Expected  long  but  was   "  +  getPeek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path   "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	throw  new  IllegalStateException( "Expected  long  but  was   "  +  getPeek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path   "  +  getPath());	  throw    new    IllegalStateException(   "Expected    long    but    was       "    +    peek()    +   ",    at    line       "    +    getLineNumber()    +   "    column       "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	2	None	replace
33	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  long  but  was   "  +  getLineNumber()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path "  +  getPath());  [CE]  'try'  without  'catch'  or  'finally'  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  throw  new  IllegalStateException( "Expected  long  but  was   "  +  getLineNumber()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	throw  new  IllegalStateException( "Expected  long  but  was   "  +  getLineNumber()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path "  +  getPath());	  throw    new    IllegalStateException(   "Expected    long    but    was       "    +    peek()    +   ",    at    line       "    +    getLineNumber()    +   "    column       "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	2	None	replace
34	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  long  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path "  +  getPath());  [CE]  <identifier>  expected  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  long  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	Throwables.throw  new  IllegalStateException( "Expected  long  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path "  +  getPath());	  throw    new    IllegalStateException(   "Expected    long    but    was       "    +    peek()    +   ",    at    line       "    +    getLineNumber()    +   "    column       "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  <identifier>  expected	2	None	replace
35	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(peeked?  '''  :' "');  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(peeked?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(peeked?  '''  :' "');	  peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    	non-compiled	[CE]  empty  character  literal	14	None	replace
36	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED?  '''  :' "');  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED?  '''  :' "');	  peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    	non-compiled	[CE]  empty  character  literal	14	None	replace
37	[BUG]  [BUGGY]  pokeedString  =  nextQuotedValue(peeked,  pathIndices[stackSize  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pokeedString  =  nextQuotedValue(peeked,  pathIndices[stackSize  -  1]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pokeedString  =  nextQuotedValue(peeked,  pathIndices[stackSize  -  1]);	  pokeedString    =    nextQuotedValue(peeked);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
38	[BUG]  [BUGGY]  pokeedString  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pokeedString  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pokeedString  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED);	  pokeedString    =    nextQuotedValue(peeked);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
39	[BUG]  [BUGGY]  pokeedString  =  nextQuotedValue(p);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pokeedString  =  nextQuotedValue(p);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pokeedString  =  nextQuotedValue(p);	  pokeedString    =    nextQuotedValue(peeked);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
40	[BUG]  [BUGGY]  pokeedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pokeedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pokeedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED);	  pokeedString    =    nextQuotedValue(peeked);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
41	[BUG]  [BUGGY]  pokeedString  =  nextQuotedValue(pathIndices[stackSize  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pokeedString  =  nextQuotedValue(pathIndices[stackSize  -  1]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pokeedString  =  nextQuotedValue(pathIndices[stackSize  -  1]);	  pokeedString    =    nextQuotedValue(peeked);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
42	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED,  PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED,  PEEKED_SINGLE_QUOTED);	  peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	18	None	replace
43	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED);  [CE]  ']'  expected  [FE]                          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED,  PEEKED_DOUBLE_QUOTED);	  peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  ']'  expected	18	None	replace
44	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED,  pathIndices[stackSize  -  1]);  [CE]  ']'  expected  [FE]                            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED,  pathIndices[stackSize  -  1]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED,  pathIndices[stackSize  -  1]);	  peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  ']'  expected	18	None	replace
45	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_BUFFERED);  [CE]  ']'  expected  [FE]                              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_BUFFERED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(PEEKED_BUFFERED);	  peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  ']'  expected	18	None	replace
46	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + "  path "  +  getPath());  [CE]  ']'  expected  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Throwable  t  =  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + "  path "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	Throwable  t  =  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + "  path "  +  getPath());	  Throwable    t    =    new    IllegalStateException(   "Expected    a    long    but    was       "    +    getLineNumber()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  ']'  expected	20	None	replace
47	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + "  path "  +  getPath());  [CE]  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + "  path "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + "  path "  +  getPath());	  Throwables.throw    new    IllegalStateException(   "Expected    a    long    but    was       "    +    getLineNumber()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  	5	None	replace
48	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_LONG,  PEEKED_DOUBLE_QUOTED);  [CE]  ']'  expected  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_LONG,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(PEEKED_LONG,  PEEKED_DOUBLE_QUOTED);	  peekedString    =    nextQuotedValue(PEEKED_LONG,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  ']'  expected	17	None	replace
49	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_CATCH,  PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_CATCH,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(PEEKED_CATCH,  PEEKED_SINGLE_QUOTED);	  peekedString    =    nextQuotedValue(PEEKED_LONG,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	17	None	replace
50	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED,  PEEKED_BUFFERED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED,  PEEKED_BUFFERED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED,  PEEKED_BUFFERED);	  peekedString    =    nextQuotedValue(PEEKED_LONG,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	17	None	replace
51	[BUG]  [BUGGY]  peekedString  =  new  String(pathNames[i]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  new  String(pathNames[i]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  new  String(pathNames[i]);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    new    String(pathNames[i]);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	8	None	replace
52	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(peeked,  pathNames[stackSize  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(peeked,  pathNames[stackSize  -  1]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(peeked,  pathNames[stackSize  -  1]);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    new    String(pathNames[i]);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	8	None	replace
53	[BUG]  [BUGGY]  pendString  =  nextQuotedValue(peeked,  pathIndices[stackSize  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pendString  =  nextQuotedValue(peeked,  pathIndices[stackSize  -  1]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pendString  =  nextQuotedValue(peeked,  pathIndices[stackSize  -  1]);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    new    String(pathNames[i]);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	8	None	replace
54	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + "  at  line   "  +  getLineNumber()  + ",  column   "  +  getColumnNumber()  + "  path "  +  getPath());  [CE]  <identifier>  expected  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + "  at  line   "  +  getLineNumber()  + ",  column   "  +  getColumnNumber()  + "  path "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + "  at  line   "  +  getLineNumber()  + ",  column   "  +  getColumnNumber()  + "  path "  +  getPath());	  Throwables.throw    new    IllegalStateException(   "Expected    a    long    but    was       "    +    getPeek()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
55	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path   "  +  getPath());  [CE]  <identifier>  expected  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path   "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path   "  +  getPath());	  Throwables.throw    new    IllegalStateException(   "Expected    a    long    but    was       "    +    peek()    +   ",    at    line       "    +    getLineNumber()    +   "    column       "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  <identifier>  expected	3	None	replace
56	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  result: "  +  getPath());  [CE]  <identifier>  expected  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  result: "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  result: "  +  getPath());	  Throwables.throw    new    IllegalStateException(   "Expected    a    long    but    was       "    +    peek()    +   ",    at    line       "    +    getLineNumber()    +   "    column       "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  <identifier>  expected	3	None	replace
57	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path: "  +  getPath());  [CE]  <identifier>  expected  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path: "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path: "  +  getPath());	  Throwables.throw    new    IllegalStateException(   "Expected    a    long    but    was       "    +    peek()    +   ",    at    line       "    +    getLineNumber()    +   "    column       "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  <identifier>  expected	3	None	replace
58	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  result   "  +  getPath());  [CE]  <identifier>  expected  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  result   "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  peek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  result   "  +  getPath());	  Throwables.throw    new    IllegalStateException(   "Expected    a    long    but    was       "    +    peek()    +   ",    at    line       "    +    getLineNumber()    +   "    column       "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  <identifier>  expected	3	None	replace
59	[BUG]  [BUGGY]  peekedString  =  nextValue(peeked);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextValue(peeked);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextValue(peeked);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextValue(peeked);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	11	None	replace
60	[BUG]  [BUGGY]  pendString  =  nextValue(peeked);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pendString  =  nextValue(peeked);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pendString  =  nextValue(peeked);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextValue(peeked);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	11	None	replace
61	[BUG]  [BUGGY]  peeked  =  nextValue(peeked);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peeked  =  nextValue(peeked);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peeked  =  nextValue(peeked);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextValue(peeked);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	11	None	replace
62	[BUG]  [BUGGY]  pokedString  =  nextValue(peeked);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pokedString  =  nextValue(peeked);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pokedString  =  nextValue(peeked);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextValue(peeked);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	11	None	replace
63	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(i);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(i);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(i);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(i);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	10	None	replace
64	[BUG]  [BUGGY]  pendString  =  nextQuotedValue(i);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pendString  =  nextQuotedValue(i);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pendString  =  nextQuotedValue(i);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(i);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	10	None	replace
65	[BUG]  [BUGGY]  pendString  =  nextQuotedValue(p);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pendString  =  nextQuotedValue(p);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pendString  =  nextQuotedValue(p);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(i);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	10	None	replace
66	[BUG]  [BUGGY]  pokedString  =  nextQuotedValue(i);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pokedString  =  nextQuotedValue(i);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pokedString  =  nextQuotedValue(i);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(i);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	10	None	replace
67	[BUG]  [BUGGY]  peechedString  =  nextQuotedValue(i);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peechedString  =  nextQuotedValue(i);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peechedString  =  nextQuotedValue(i);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(i);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	10	None	replace
68	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path: "  +  getPath());  [CE]  'try'  without  'catch'  or  'finally'  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path: "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + ",  at  line   "  +  getLineNumber()  + "  column   "  +  getColumnNumber()  + "  path: "  +  getPath());	  throw    new    IllegalStateException(   "Expected    a    long    but    was       "    +    getPeek()    +   ",    at    line       "    +    getLineNumber()    +   "    column       "    +    getColumnNumber()    +   "    path       "    +    getPath());    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	1	None	replace
69	[BUG]  [BUGGY]  peekedString  =  nextValue(PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextValue(PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextValue(PEEKED_SINGLE_QUOTED);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextValue(PEEKED_SINGLE_QUOTED);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	9	None	replace
70	[BUG]  [BUGGY]  pendString  =  nextValue(PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pendString  =  nextValue(PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pendString  =  nextValue(PEEKED_SINGLE_QUOTED);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextValue(PEEKED_SINGLE_QUOTED);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	9	None	replace
71	[BUG]  [BUGGY]  peechedString  =  nextValue(PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peechedString  =  nextValue(PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peechedString  =  nextValue(PEEKED_SINGLE_QUOTED);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextValue(PEEKED_SINGLE_QUOTED);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	9	None	replace
72	[BUG]  [BUGGY]  pokedString  =  nextValue(PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pokedString  =  nextValue(PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pokedString  =  nextValue(PEEKED_SINGLE_QUOTED);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextValue(PEEKED_SINGLE_QUOTED);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	9	None	replace
73	[BUG]  [BUGGY]  peekedString  =  nextValue(PEEKED_SINGLE_QUOTED,  pathIndices[stackSize  -  1]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextValue(PEEKED_SINGLE_QUOTED,  pathIndices[stackSize  -  1]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextValue(PEEKED_SINGLE_QUOTED,  pathIndices[stackSize  -  1]);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextValue(PEEKED_SINGLE_QUOTED);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	9	None	replace
74	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(pathIndices,  PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(pathIndices,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(pathIndices,  PEEKED_SINGLE_QUOTED);	  peekedString    =    nextQuotedValue(peeked,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	22	None	replace
75	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(peeked,  PEEKED_DOUBLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(peeked,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(peeked,  PEEKED_DOUBLE_QUOTED);	  peekedString    =    nextQuotedValue(peeked,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	22	None	replace
76	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(path,  PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(path,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(path,  PEEKED_SINGLE_QUOTED);	  peekedString    =    nextQuotedValue(peeked,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	22	None	replace
77	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(peeked,  pathNames);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(peeked,  pathNames);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(peeked,  pathNames);	  peekedString    =    nextQuotedValue(peeked);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	16	None	replace
78	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(peeked,  pathIndices);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(peeked,  pathIndices);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(peeked,  pathIndices);	  peekedString    =    nextQuotedValue(peeked);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	16	None	replace
79	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(pathNames);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(pathNames);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(pathNames);	  peekedString    =    nextQuotedValue(peeked);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	16	None	replace
80	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(p?  '''  :' "');  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(p?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(p?  '''  :' "');	  peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    	non-compiled	[CE]  empty  character  literal	14	None	replace
81	[BUG]  [BUGGY]  int  lineNumber  =  nextInt(PEEKED_FALSE);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  nextInt(PEEKED_FALSE);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  nextInt(PEEKED_FALSE);	  int    lineNumber    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	23	None	replace
82	[BUG]  [BUGGY]  int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED  +  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED  +  1);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  nextInt(PEEKED_SINGLE_QUOTED  +  1);	  int    lineNumber    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	23	None	replace
83	[BUG]  [BUGGY]  int  lineNumber  =  nextInt(PEEKED_LINE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  nextInt(PEEKED_LINE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  nextInt(PEEKED_LINE_QUOTED);	  int    lineNumber    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	23	None	replace
84	[BUG]  [BUGGY]  pokeedString  =  nextQuotedValue(i);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pokeedString  =  nextQuotedValue(i);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pokeedString  =  nextQuotedValue(i);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(i);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	10	None	replace
85	[BUG]  [BUGGY]  peeked  =  nextQuotedValue(i);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peeked  =  nextQuotedValue(i);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peeked  =  nextQuotedValue(i);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(i);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	10	None	replace
86	[BUG]  [BUGGY]  int  lineNumber  =  stack[peeked.length  -  1];  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  stack[peeked.length  -  1];  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  stack[peeked.length  -  1];	  int    lineNumber    =    stack[stackSize    -    1];    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	15	None	replace
87	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path= "  +  getPath());  [CE]  'try'  without  'catch'  or  'finally'  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path= "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path= "  +  getPath());	  throw    new    IllegalStateException(   "Expected    a    long    but    was       "    +    getLineNumber()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   ",    path   "    +    getPath());    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	25	None	replace
88	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  missing  line "  +  getPath());  [CE]  not  a  statement  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  missing  line "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  missing  line "  +  getPath());	  throw    new    IllegalStateException(   "Expected    a    long    but    was       "    +    getLineNumber()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   ",    path   "    +    getPath());    	non-compiled	[CE]  not  a  statement	25	None	replace
89	[BUG]  [BUGGY]  pokeekedString  =  nextQuotedValue(peeked);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pokeekedString  =  nextQuotedValue(peeked);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pokeekedString  =  nextQuotedValue(peeked);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(peeked);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
90	[BUG]  [BUGGY]  peeked  =  nextQuotedValue(peekedString);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peeked  =  nextQuotedValue(peekedString);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peeked  =  nextQuotedValue(peekedString);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(peeked);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
91	[BUG]  [BUGGY]  pokeedString  =  nextValue(peeked);  [CE]  not  a  statement  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pokeedString  =  nextValue(peeked);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pokeedString  =  nextValue(peeked);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextValue(peeked);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
92	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(pathNames,  PEEKED_SINGLE_QUOTED);  [CE]  not  a  statement  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(pathNames,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(pathNames,  PEEKED_SINGLE_QUOTED);	  peekedString    =    nextQuotedValue(peeked,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  not  a  statement	22	None	replace
93	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(p,  PEEKED_DOUBLE_QUOTED);  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(p,  PEEKED_DOUBLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(p,  PEEKED_DOUBLE_QUOTED);	  peekedString    =    nextQuotedValue(peeked,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  not  a  statement	22	None	replace
94	[BUG]  [BUGGY]  pokeedString  =  nextQuotedValue(peeked,  pathNames);  [CE]  not  a  statement  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pokeedString  =  nextQuotedValue(peeked,  pathNames);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pokeedString  =  nextQuotedValue(peeked,  pathNames);	  pokeedString    =    nextQuotedValue(peeked);    	non-compiled	[CE]  not  a  statement	24	None	replace
95	[BUG]  [BUGGY]  pokeedString  =  nextQuotedValue(peeked,  pathIndices);  [CE]  class  expected  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pokeedString  =  nextQuotedValue(peeked,  pathIndices);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pokeedString  =  nextQuotedValue(peeked,  pathIndices);	  pokeedString    =    nextQuotedValue(peeked);    	non-compiled	[CE]  class  expected	24	None	replace
96	[BUG]  [BUGGY]  pokeekedString  =  nextQuotedValue(peeked[i]);  [CE]  class  expected  [FE]                            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pokeekedString  =  nextQuotedValue(peeked[i]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pokeekedString  =  nextQuotedValue(peeked[i]);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(peeked[i]);    }    	non-compiled	[CE]  class  expected	13	None	replace
97	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(peeked[0]);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(peeked[0]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(peeked[0]);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(peeked[i]);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	13	None	replace
98	[BUG]  [BUGGY]  piedString  =  nextQuotedValue(peeked[i]);  [CE]  not  a  statement  [FE]                                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  piedString  =  nextQuotedValue(peeked[i]);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	piedString  =  nextQuotedValue(peeked[i]);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(peeked[i]);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
99	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + ",  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + "  path "  +  getPath());  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + ",  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + "  path "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + ",  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + "  path "  +  getPath());	  throw    new    IllegalStateException(   "Expected    a    long    but    was       "    +    getLineNumber()    +   ",    at    line       "    +    getLineNumber()    +   "    column       "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
100	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path= "  +  getPath());  [CE]  'try'  without  'catch'  or  'finally'  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path= "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path= "  +  getPath());	  throw    new    IllegalStateException(   "Expected    a    long    but    was       "    +    getPeek()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   ",    path   "    +    getPath());    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	26	None	replace
101	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path: "  +  getPath());  [CE]  not  a  statement  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path: "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path: "  +  getPath());	  throw    new    IllegalStateException(   "Expected    a    long    but    was       "    +    getPeek()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   ",    path   "    +    getPath());    	non-compiled	[CE]  not  a  statement	26	None	replace
102	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + ",  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());  [CE]  'try'  without  'catch'  or  'finally'  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Throwable  t  =  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + ",  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	Throwable  t  =  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + ",  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());	  Throwable    t    =    new    IllegalStateException(   "Expected    a    long    but    was       "    +    getLineNumber()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	20	None	replace
103	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path "  +  getPath());  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Throwable  t  =  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	Throwable  t  =  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path "  +  getPath());	  Throwable    t    =    new    IllegalStateException(   "Expected    a    long    but    was       "    +    getLineNumber()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	20	None	replace
104	[BUG]  [BUGGY]  peeked  =  nextQuotedValue(PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peeked  =  nextQuotedValue(PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peeked  =  nextQuotedValue(PEEKED_SINGLE_QUOTED);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextValue(PEEKED_SINGLE_QUOTED);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	9	None	replace
105	[BUG]  [BUGGY]  peeked  =  nextValue(PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peeked  =  nextValue(PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peeked  =  nextValue(PEEKED_SINGLE_QUOTED);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextValue(PEEKED_SINGLE_QUOTED);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	9	None	replace
106	[BUG]  [BUGGY]  pokeekedString  =  nextValue(PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pokeekedString  =  nextValue(PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pokeekedString  =  nextValue(PEEKED_SINGLE_QUOTED);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextValue(PEEKED_SINGLE_QUOTED);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	9	None	replace
107	[BUG]  [BUGGY]  pendString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pendString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pendString  =  nextQuotedValue(PEEKED_SINGLE_QUOTED);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextValue(PEEKED_SINGLE_QUOTED);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	9	None	replace
108	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices[pathSize  -  1]  +  1;  [CE]  'try'  without  'catch'  or  'finally'  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  pathIndices[pathSize  -  1]  +  1;  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  pathIndices[pathSize  -  1]  +  1;	  int    lineNumber    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
109	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices[peeked.length  -  1];  [CE]  not  a  statement  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  pathIndices[peeked.length  -  1];  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  pathIndices[peeked.length  -  1];	  int    lineNumber    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  not  a  statement	7	None	replace
110	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices[pathNames.length  -  1];  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  pathIndices[pathNames.length  -  1];  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  pathIndices[pathNames.length  -  1];	  int    lineNumber    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
111	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices[pathCount  -  1];  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  pathIndices[pathCount  -  1];  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  pathIndices[pathCount  -  1];	  int    lineNumber    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
112	[BUG]  [BUGGY]  int  lineNumber  =  pathIndices[path.length  -  1];  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  pathIndices[path.length  -  1];  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  pathIndices[path.length  -  1];	  int    lineNumber    =    pathIndices[stackSize    -    1];    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
113	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(p,  PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(p,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(p,  PEEKED_SINGLE_QUOTED);	  peekedString    =    nextQuotedValue(PEEKED_LONG,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	17	None	replace
114	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(p  +  1,  PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(p  +  1,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(p  +  1,  PEEKED_SINGLE_QUOTED);	  peekedString    =    nextQuotedValue(PEEKED_LONG,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	17	None	replace
115	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :' "');  [CE]  empty  character  literal  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :' "');	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    new    String(pathNames[i]);    }    	non-compiled	[CE]  empty  character  literal	8	None	replace
116	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(p  {  PEEKED_SINGLE_QUOTED?  '''  :' "');  [CE]  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(p  {  PEEKED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(p  {  PEEKED_SINGLE_QUOTED?  '''  :' "');	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    new    String(pathNames[i]);    }    	non-compiled	[CE]  	8	None	replace
117	[BUG]  [BUGGY]  pendString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :' "');  [CE]  empty  character  literal  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pendString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pendString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :' "');	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    new    String(pathNames[i]);    }    	non-compiled	[CE]  empty  character  literal	8	None	replace
118	[BUG]  [BUGGY]  pokeedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :' "');  [CE]  empty  character  literal  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pokeedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :' "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pokeedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED?  '''  :' "');	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    new    String(pathNames[i]);    }    	non-compiled	[CE]  empty  character  literal	8	None	replace
119	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + ",  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());  [CE]  <identifier>  expected  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + ",  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getLineNumber()  + ",  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());	  Throwables.throw    new    IllegalStateException(   "Expected    a    long    but    was       "    +    getLineNumber()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
120	[BUG]  [BUGGY]  pokeedString  =  nextValue(PEEKED_SINGLE_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pokeedString  =  nextValue(PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pokeedString  =  nextValue(PEEKED_SINGLE_QUOTED);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextValue(PEEKED_SINGLE_QUOTED);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	9	None	replace
121	[BUG]  [BUGGY]  peekedString  =  nextValue(PEEKED_BUFFERED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextValue(PEEKED_BUFFERED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextValue(PEEKED_BUFFERED);	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextValue(PEEKED_SINGLE_QUOTED);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	9	None	replace
122	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(peeked,  pathIndices.length);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(peeked,  pathIndices.length);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(peeked,  pathIndices.length);	  peekedString    =    nextQuotedValue(peeked);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	16	None	replace
123	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path   "  +  getPath());  [CE]  <identifier>  expected  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path   "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + ",  path   "  +  getPath());	  Throwables.throw    new    IllegalStateException(   "Expected    a    long    but    was       "    +    getPeek()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
124	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  nextQuotedValue(i);  }  [CE]  illegal  start  of  expression  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  nextQuotedValue(i);  }  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  nextQuotedValue(i);  }	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(i);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
125	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  nextQuotedValue();  }  [CE]  illegal  start  of  expression  [FE]                        JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  nextQuotedValue();  }  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  nextQuotedValue();  }	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(i);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
126	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  nextQuotedValue(0);  }  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  nextQuotedValue(0);  }  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  nextQuotedValue(0);  }	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(i);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
127	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  firstQuotedValue(i);  }  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  firstQuotedValue(i);  }  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  firstQuotedValue(i);  }	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(i);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
128	[BUG]  [BUGGY]  int  lineNumber  =  stack[stackSize  -  1]  -  1;  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  stack[stackSize  -  1]  -  1;  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  stack[stackSize  -  1]  -  1;	  int    lineNumber    =    stack[stackSize    -    1];    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	15	None	replace
129	[BUG]  [BUGGY]  pokeedString  =  nextQuotedValue(peeked,  pathIndices.length);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  pokeedString  =  nextQuotedValue(peeked,  pathIndices.length);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	pokeedString  =  nextQuotedValue(peeked,  pathIndices.length);	  pokeedString    =    nextQuotedValue(peeked);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
130	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  new  String(pathNames[i]);  }  [CE]  illegal  start  of  expression  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  new  String(pathNames[i]);  }  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  new  String(pathNames[i]);  }	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    new    String(pathNames[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
131	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + ",  path   "  +  getPath());  [CE]  'try'  without  'catch'  or  'finally'  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + ",  path   "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + "  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + ",  path   "  +  getPath());	  throw    new    IllegalStateException(   "Expected    a    long    but    was       "    +    getPeek()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   ",    path   "    +    getPath());    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	26	None	replace
132	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(pathIndices[stackSize  -  1]?  '''  :'   "');  [CE]  empty  character  literal  [FE]                JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(pathIndices[stackSize  -  1]?  '''  :'   "');  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(pathIndices[stackSize  -  1]?  '''  :'   "');	  peekedString    =    nextQuotedValue(PEEKED_SINGLE_QUOTED?    '''    :'   "');    	non-compiled	[CE]  empty  character  literal	14	None	replace
133	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was  expecting  line  number "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());  [CE]  <identifier>  expected  [FE]              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was  expecting  line  number "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	Throwables.throw  new  IllegalStateException( "Expected  a  long  but  was  expecting  line  number "  +  getLineNumber()  + "  at  line "  +  getLineNumber()  + "  column "  +  getColumnNumber()  + "  path "  +  getPath());	  Throwables.throw    new    IllegalStateException(   "Expected    a    long    but    was       "    +    getLineNumber()    +   "    at    line   "    +    getLineNumber()    +   "    column   "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
134	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  nextQuotedValue(peeked[i]);  }  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  nextQuotedValue(peeked[i]);  }  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  nextQuotedValue(peeked[i]);  }	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(peeked[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
135	[BUG]  [BUGGY]  if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  nextQuotedValue(peeked[i].value);  }  [CE]  illegal  start  of  expression  [FE]                              JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  nextQuotedValue(peeked[i].value);  }  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	if(peekedString  ==  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  nextQuotedValue(peeked[i].value);  }	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(peeked[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
136	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + ",  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + "  path   "  +  getPath());  [CE]  'try'  without  'catch'  or  'finally'  [FE]            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + ",  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + "  path   "  +  getPath());  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	throw  new  IllegalStateException( "Expected  a  long  but  was   "  +  getPeek()  + ",  at  line "  +  getLineNumber()  + ",  column "  +  getColumnNumber()  + "  path   "  +  getPath());	  throw    new    IllegalStateException(   "Expected    a    long    but    was       "    +    getPeek()    +   "    at    line   "    +    getLineNumber()    +   ",    column   "    +    getColumnNumber()    +   "    path   "    +    getPath());    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	21	None	replace
137	[BUG]  [BUGGY]  int  lineNumber  =  nextInt(PEEKED_LOAD_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  nextInt(PEEKED_LOAD_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  nextInt(PEEKED_LOAD_QUOTED);	  int    lineNumber    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	23	None	replace
138	[BUG]  [BUGGY]  int  lineNumber  =  nextInt(PEEKED_COLUMN_QUOTED);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  int  lineNumber  =  nextInt(PEEKED_COLUMN_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	int  lineNumber  =  nextInt(PEEKED_COLUMN_QUOTED);	  int    lineNumber    =    nextInt(PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	23	None	replace
139	[BUG]  [BUGGY]  peekedString  =  nextQuotedValue(p  0,  PEEKED_SINGLE_QUOTED);  [CE]  ')'  expected  [FE]                      JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  peekedString  =  nextQuotedValue(p  0,  PEEKED_SINGLE_QUOTED);  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	peekedString  =  nextQuotedValue(p  0,  PEEKED_SINGLE_QUOTED);	  peekedString    =    nextQuotedValue(PEEKED_LONG,    PEEKED_SINGLE_QUOTED);    	non-compiled	[CE]  ')'  expected	17	None	replace
140	[BUG]  [BUGGY]  if(peeked!=  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  nextQuotedValue(peeked);  }  [CE]  illegal  start  of  expression  [FE]                          JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  if(peeked!=  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  nextQuotedValue(peeked);  }  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	if(peeked!=  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  nextQuotedValue(peeked);  }	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(peeked);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
141	[BUG]  [BUGGY]  if(peeked!=  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  nextQuotedValue();  }  [CE]  illegal  start  of  expression  [FE]                            JsonSyntaxException      [CONTEXT]      peekedString  =  nextQuotedValue(p  ==  PEEKED_SINGLE_QUOTED  ?  '\''  :  '     "');  try  {  long  result  =  Long.parseLong(peekedString);  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  }  catch  (NumberFormatException  ignored)  {  }  }  else  {      [BUGGY]  if(peeked!=  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  nextQuotedValue();  }  [BUGGY]      +       "  at  line       "  +  getLineNumber()  +       "  column       "  +  getColumnNumber()  +       "  path       "  +  getPath());  }  [CLASS]  JsonReader  1  [METHOD]  nextLong  [RETURN_TYPE]  long  [VARIABLES]  boolean  fitsInLong  lenient  negative  double  asDouble  Reader  in  NumberFormatException  ignored  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  result  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson7/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	965	966	3	replace	if(peeked!=  null)  {  for(int  i  =  0;  i  <  pathIndices.length;  i++)  {  peekedString  =  nextQuotedValue();  }	  if(peeked    ==    null)    {    for(int    i    =    0;    i    <    pathIndices.length;    i++)    {    peekedString    =    nextQuotedValue(peeked);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
